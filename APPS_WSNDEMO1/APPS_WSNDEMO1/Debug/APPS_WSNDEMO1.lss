
APPS_WSNDEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061a0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000061a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000f60  20000070  00006210  00010070  2**2
                  ALLOC
  3 .stack        00002000  20000fd0  00007170  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003b153  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000071f0  00000000  00000000  0004b279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ded7  00000000  00000000  00052469  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d40  00000000  00000000  00060340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001280  00000000  00000000  00061080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000f582  00000000  00000000  00062300  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e16b  00000000  00000000  00071882  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000870c0  00000000  00000000  0008f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002510  00000000  00000000  00116ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	20002fd0 	.word	0x20002fd0
       4:	00002025 	.word	0x00002025
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
       8:	00002021 	.word	0x00002021
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
       c:	00002021 	.word	0x00002021
	...

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
      2c:	00002021 	.word	0x00002021
	...
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
      38:	00002021 	.word	0x00002021

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
      3c:	00002021 	.word	0x00002021

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
      40:	00002021 	.word	0x00002021
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
      44:	00002021 	.word	0x00002021
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
      48:	00002021 	.word	0x00002021
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
      4c:	000004cd 	.word	0x000004cd

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
      50:	00000329 	.word	0x00000329
      54:	00002021 	.word	0x00002021
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
      58:	00002021 	.word	0x00002021
      5c:	00000000 	.word	0x00000000
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
      60:	00002021 	.word	0x00002021
      64:	00000979 	.word	0x00000979
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      68:	00000989 	.word	0x00000989
      6c:	00000999 	.word	0x00000999
      70:	000009a9 	.word	0x000009a9
	...
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
      7c:	00002021 	.word	0x00002021
      80:	00002021 	.word	0x00002021
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
      84:	00002021 	.word	0x00002021
      88:	00001cc1 	.word	0x00001cc1
      8c:	00001cd1 	.word	0x00001cd1
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
      90:	00001ce1 	.word	0x00001ce1
	...
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
      ac:	00002021 	.word	0x00002021

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000070 	.word	0x20000070
      d0:	00000000 	.word	0x00000000
      d4:	000061a0 	.word	0x000061a0

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	000061a0 	.word	0x000061a0
     104:	20000074 	.word	0x20000074
     108:	000061a0 	.word	0x000061a0
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	000019e9 	.word	0x000019e9
     13c:	00005751 	.word	0x00005751
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_us+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_us+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000000 	.word	0x20000000
     174:	e000e010 	.word	0xe000e010

00000178 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     178:	4b0c      	ldr	r3, [pc, #48]	; (1ac <cpu_irq_enter_critical+0x34>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	2b00      	cmp	r3, #0
     17e:	d110      	bne.n	1a2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     184:	2b00      	cmp	r3, #0
     186:	d109      	bne.n	19c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     188:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     18a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     18e:	2200      	movs	r2, #0
     190:	4b07      	ldr	r3, [pc, #28]	; (1b0 <cpu_irq_enter_critical+0x38>)
     192:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     194:	2201      	movs	r2, #1
     196:	4b07      	ldr	r3, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x3c>)
     198:	701a      	strb	r2, [r3, #0]
     19a:	e002      	b.n	1a2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     19c:	2200      	movs	r2, #0
     19e:	4b05      	ldr	r3, [pc, #20]	; (1b4 <cpu_irq_enter_critical+0x3c>)
     1a0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <cpu_irq_enter_critical+0x34>)
     1a4:	681a      	ldr	r2, [r3, #0]
     1a6:	3201      	adds	r2, #1
     1a8:	601a      	str	r2, [r3, #0]
}
     1aa:	4770      	bx	lr
     1ac:	2000008c 	.word	0x2000008c
     1b0:	20000008 	.word	0x20000008
     1b4:	20000090 	.word	0x20000090

000001b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1b8:	4b08      	ldr	r3, [pc, #32]	; (1dc <cpu_irq_leave_critical+0x24>)
     1ba:	681a      	ldr	r2, [r3, #0]
     1bc:	3a01      	subs	r2, #1
     1be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c0:	681b      	ldr	r3, [r3, #0]
     1c2:	2b00      	cmp	r3, #0
     1c4:	d109      	bne.n	1da <cpu_irq_leave_critical+0x22>
     1c6:	4b06      	ldr	r3, [pc, #24]	; (1e0 <cpu_irq_leave_critical+0x28>)
     1c8:	781b      	ldrb	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d005      	beq.n	1da <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1ce:	2201      	movs	r2, #1
     1d0:	4b04      	ldr	r3, [pc, #16]	; (1e4 <cpu_irq_leave_critical+0x2c>)
     1d2:	701a      	strb	r2, [r3, #0]
     1d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1d8:	b662      	cpsie	i
	}
}
     1da:	4770      	bx	lr
     1dc:	2000008c 	.word	0x2000008c
     1e0:	20000090 	.word	0x20000090
     1e4:	20000008 	.word	0x20000008

000001e8 <system_board_init>:




void system_board_init(void)
{
     1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ea:	4647      	mov	r7, r8
     1ec:	b480      	push	{r7}
     1ee:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f0:	ac01      	add	r4, sp, #4
     1f2:	2601      	movs	r6, #1
     1f4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1f6:	2700      	movs	r7, #0
     1f8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1fc:	2013      	movs	r0, #19
     1fe:	1c21      	adds	r1, r4, #0
     200:	4d27      	ldr	r5, [pc, #156]	; (2a0 <system_board_init+0xb8>)
     202:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     204:	4a27      	ldr	r2, [pc, #156]	; (2a4 <system_board_init+0xbc>)
     206:	4690      	mov	r8, r2
     208:	2380      	movs	r3, #128	; 0x80
     20a:	031b      	lsls	r3, r3, #12
     20c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     20e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     210:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     212:	201c      	movs	r0, #28
     214:	1c21      	adds	r1, r4, #0
     216:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     218:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     21a:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     21c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     21e:	2052      	movs	r0, #82	; 0x52
     220:	1c21      	adds	r1, r4, #0
     222:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     224:	203e      	movs	r0, #62	; 0x3e
     226:	1c21      	adds	r1, r4, #0
     228:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     22a:	203f      	movs	r0, #63	; 0x3f
     22c:	1c21      	adds	r1, r4, #0
     22e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     230:	202f      	movs	r0, #47	; 0x2f
     232:	1c21      	adds	r1, r4, #0
     234:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     236:	2014      	movs	r0, #20
     238:	1c21      	adds	r1, r4, #0
     23a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	02d2      	lsls	r2, r2, #11
     240:	4b19      	ldr	r3, [pc, #100]	; (2a8 <system_board_init+0xc0>)
     242:	619a      	str	r2, [r3, #24]
     244:	3b80      	subs	r3, #128	; 0x80
     246:	2280      	movs	r2, #128	; 0x80
     248:	05d2      	lsls	r2, r2, #23
     24a:	619a      	str	r2, [r3, #24]
     24c:	2280      	movs	r2, #128	; 0x80
     24e:	0612      	lsls	r2, r2, #24
     250:	619a      	str	r2, [r3, #24]
     252:	2280      	movs	r2, #128	; 0x80
     254:	0212      	lsls	r2, r2, #8
     256:	619a      	str	r2, [r3, #24]
     258:	2380      	movs	r3, #128	; 0x80
     25a:	035b      	lsls	r3, r3, #13
     25c:	4642      	mov	r2, r8
     25e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     260:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     262:	2053      	movs	r0, #83	; 0x53
     264:	1c21      	adds	r1, r4, #0
     266:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     268:	4b10      	ldr	r3, [pc, #64]	; (2ac <system_board_init+0xc4>)
     26a:	6a19      	ldr	r1, [r3, #32]
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	0392      	lsls	r2, r2, #14
     270:	430a      	orrs	r2, r1
     272:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     274:	2204      	movs	r2, #4
     276:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <system_board_init+0xc8>)
     278:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     27a:	466b      	mov	r3, sp
     27c:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     27e:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     280:	2305      	movs	r3, #5
     282:	466a      	mov	r2, sp
     284:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     286:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     288:	2009      	movs	r0, #9
     28a:	4669      	mov	r1, sp
     28c:	4c09      	ldr	r4, [pc, #36]	; (2b4 <system_board_init+0xcc>)
     28e:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     290:	200c      	movs	r0, #12
     292:	4669      	mov	r1, sp
     294:	47a0      	blx	r4
#endif

}
     296:	b002      	add	sp, #8
     298:	bc04      	pop	{r2}
     29a:	4690      	mov	r8, r2
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	000004a9 	.word	0x000004a9
     2a4:	41004400 	.word	0x41004400
     2a8:	41004500 	.word	0x41004500
     2ac:	40000400 	.word	0x40000400
     2b0:	42005400 	.word	0x42005400
     2b4:	00001bdd 	.word	0x00001bdd

000002b8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2b8:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2ba:	2a00      	cmp	r2, #0
     2bc:	d10f      	bne.n	2de <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2be:	008b      	lsls	r3, r1, #2
     2c0:	4a08      	ldr	r2, [pc, #32]	; (2e4 <extint_register_callback+0x2c>)
     2c2:	589a      	ldr	r2, [r3, r2]
     2c4:	2a00      	cmp	r2, #0
     2c6:	d104      	bne.n	2d2 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     2c8:	1c19      	adds	r1, r3, #0
     2ca:	4b06      	ldr	r3, [pc, #24]	; (2e4 <extint_register_callback+0x2c>)
     2cc:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     2ce:	2300      	movs	r3, #0
     2d0:	e005      	b.n	2de <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2d2:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2d4:	1a12      	subs	r2, r2, r0
     2d6:	1e50      	subs	r0, r2, #1
     2d8:	4182      	sbcs	r2, r0
     2da:	4252      	negs	r2, r2
     2dc:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2de:	1c18      	adds	r0, r3, #0
     2e0:	4770      	bx	lr
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	20000e40 	.word	0x20000e40

000002e8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2e8:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ea:	2900      	cmp	r1, #0
     2ec:	d107      	bne.n	2fe <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2ee:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2f0:	281f      	cmp	r0, #31
     2f2:	d800      	bhi.n	2f6 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2f4:	4b03      	ldr	r3, [pc, #12]	; (304 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2f6:	2201      	movs	r2, #1
     2f8:	4082      	lsls	r2, r0
     2fa:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     2fc:	2300      	movs	r3, #0
}
     2fe:	1c18      	adds	r0, r3, #0
     300:	4770      	bx	lr
     302:	46c0      	nop			; (mov r8, r8)
     304:	40001800 	.word	0x40001800

00000308 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     308:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     30a:	2900      	cmp	r1, #0
     30c:	d107      	bne.n	31e <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     30e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     310:	281f      	cmp	r0, #31
     312:	d800      	bhi.n	316 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     314:	4b03      	ldr	r3, [pc, #12]	; (324 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     316:	2201      	movs	r2, #1
     318:	4082      	lsls	r2, r0
     31a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     31c:	2300      	movs	r3, #0
}
     31e:	1c18      	adds	r0, r3, #0
     320:	4770      	bx	lr
     322:	46c0      	nop			; (mov r8, r8)
     324:	40001800 	.word	0x40001800

00000328 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     328:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     32a:	2200      	movs	r2, #0
     32c:	4b16      	ldr	r3, [pc, #88]	; (388 <EIC_Handler+0x60>)
     32e:	701a      	strb	r2, [r3, #0]
     330:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     332:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     334:	4d15      	ldr	r5, [pc, #84]	; (38c <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     336:	4c14      	ldr	r4, [pc, #80]	; (388 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     338:	2b1f      	cmp	r3, #31
     33a:	d910      	bls.n	35e <EIC_Handler+0x36>
     33c:	e019      	b.n	372 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     33e:	4914      	ldr	r1, [pc, #80]	; (390 <EIC_Handler+0x68>)
     340:	e000      	b.n	344 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     342:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     344:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     346:	009b      	lsls	r3, r3, #2
     348:	595b      	ldr	r3, [r3, r5]
     34a:	2b00      	cmp	r3, #0
     34c:	d000      	beq.n	350 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     34e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     350:	7823      	ldrb	r3, [r4, #0]
     352:	3301      	adds	r3, #1
     354:	b2db      	uxtb	r3, r3
     356:	7023      	strb	r3, [r4, #0]
     358:	2b0f      	cmp	r3, #15
     35a:	d814      	bhi.n	386 <EIC_Handler+0x5e>
     35c:	e7ec      	b.n	338 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     35e:	1c32      	adds	r2, r6, #0
     360:	401a      	ands	r2, r3
     362:	2101      	movs	r1, #1
     364:	4091      	lsls	r1, r2
     366:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     368:	4909      	ldr	r1, [pc, #36]	; (390 <EIC_Handler+0x68>)
     36a:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     36c:	4211      	tst	r1, r2
     36e:	d1e6      	bne.n	33e <EIC_Handler+0x16>
     370:	e7ee      	b.n	350 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     372:	1c32      	adds	r2, r6, #0
     374:	401a      	ands	r2, r3
     376:	2101      	movs	r1, #1
     378:	4091      	lsls	r1, r2
     37a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     37c:	2100      	movs	r1, #0
     37e:	6909      	ldr	r1, [r1, #16]
     380:	4211      	tst	r1, r2
     382:	d1de      	bne.n	342 <EIC_Handler+0x1a>
     384:	e7e4      	b.n	350 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     386:	bd70      	pop	{r4, r5, r6, pc}
     388:	20000e3c 	.word	0x20000e3c
     38c:	20000e40 	.word	0x20000e40
     390:	40001800 	.word	0x40001800

00000394 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     394:	4b05      	ldr	r3, [pc, #20]	; (3ac <_extint_enable+0x18>)
     396:	7819      	ldrb	r1, [r3, #0]
     398:	2202      	movs	r2, #2
     39a:	430a      	orrs	r2, r1
     39c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     39e:	1c1a      	adds	r2, r3, #0
     3a0:	7853      	ldrb	r3, [r2, #1]
     3a2:	b25b      	sxtb	r3, r3
     3a4:	2b00      	cmp	r3, #0
     3a6:	dbfb      	blt.n	3a0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a8:	4770      	bx	lr
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40001800 	.word	0x40001800

000003b0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3b0:	b500      	push	{lr}
     3b2:	b083      	sub	sp, #12
     3b4:	4b12      	ldr	r3, [pc, #72]	; (400 <_system_extint_init+0x50>)
     3b6:	6999      	ldr	r1, [r3, #24]
     3b8:	2240      	movs	r2, #64	; 0x40
     3ba:	430a      	orrs	r2, r1
     3bc:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3be:	a901      	add	r1, sp, #4
     3c0:	2300      	movs	r3, #0
     3c2:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3c4:	2005      	movs	r0, #5
     3c6:	4b0f      	ldr	r3, [pc, #60]	; (404 <_system_extint_init+0x54>)
     3c8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3ca:	2005      	movs	r0, #5
     3cc:	4b0e      	ldr	r3, [pc, #56]	; (408 <_system_extint_init+0x58>)
     3ce:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3d0:	4b0e      	ldr	r3, [pc, #56]	; (40c <_system_extint_init+0x5c>)
     3d2:	7819      	ldrb	r1, [r3, #0]
     3d4:	2201      	movs	r2, #1
     3d6:	430a      	orrs	r2, r1
     3d8:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3da:	1c1a      	adds	r2, r3, #0
     3dc:	7853      	ldrb	r3, [r2, #1]
     3de:	b25b      	sxtb	r3, r3
     3e0:	2b00      	cmp	r3, #0
     3e2:	dbfb      	blt.n	3dc <_system_extint_init+0x2c>
     3e4:	4b0a      	ldr	r3, [pc, #40]	; (410 <_system_extint_init+0x60>)
     3e6:	1c19      	adds	r1, r3, #0
     3e8:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3ea:	2200      	movs	r2, #0
     3ec:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3ee:	428b      	cmp	r3, r1
     3f0:	d1fc      	bne.n	3ec <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3f2:	2210      	movs	r2, #16
     3f4:	4b07      	ldr	r3, [pc, #28]	; (414 <_system_extint_init+0x64>)
     3f6:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_system_extint_init+0x68>)
     3fa:	4798      	blx	r3
}
     3fc:	b003      	add	sp, #12
     3fe:	bd00      	pop	{pc}
     400:	40000400 	.word	0x40000400
     404:	00001b01 	.word	0x00001b01
     408:	00001a75 	.word	0x00001a75
     40c:	40001800 	.word	0x40001800
     410:	20000e40 	.word	0x20000e40
     414:	e000e100 	.word	0xe000e100
     418:	00000395 	.word	0x00000395

0000041c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     41c:	2300      	movs	r3, #0
     41e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     420:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     422:	2201      	movs	r2, #1
     424:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     426:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     428:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     42a:	2302      	movs	r3, #2
     42c:	72c3      	strb	r3, [r0, #11]
}
     42e:	4770      	bx	lr

00000430 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     430:	b5f0      	push	{r4, r5, r6, r7, lr}
     432:	b083      	sub	sp, #12
     434:	1c05      	adds	r5, r0, #0
     436:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     438:	a901      	add	r1, sp, #4
     43a:	2300      	movs	r3, #0
     43c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     43e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     440:	6863      	ldr	r3, [r4, #4]
     442:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     444:	7a23      	ldrb	r3, [r4, #8]
     446:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     448:	7820      	ldrb	r0, [r4, #0]
     44a:	4b15      	ldr	r3, [pc, #84]	; (4a0 <extint_chan_set_config+0x70>)
     44c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     44e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     450:	2d1f      	cmp	r5, #31
     452:	d800      	bhi.n	456 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     454:	4b13      	ldr	r3, [pc, #76]	; (4a4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     456:	2107      	movs	r1, #7
     458:	4029      	ands	r1, r5
     45a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     45c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     45e:	7aa2      	ldrb	r2, [r4, #10]
     460:	2a00      	cmp	r2, #0
     462:	d001      	beq.n	468 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     464:	2208      	movs	r2, #8
     466:	4310      	orrs	r0, r2
     468:	08ea      	lsrs	r2, r5, #3
     46a:	0092      	lsls	r2, r2, #2
     46c:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     46e:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     470:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     472:	270f      	movs	r7, #15
     474:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     476:	43be      	bics	r6, r7
     478:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47a:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47c:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     47e:	7a62      	ldrb	r2, [r4, #9]
     480:	2a00      	cmp	r2, #0
     482:	d006      	beq.n	492 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     484:	695a      	ldr	r2, [r3, #20]
     486:	2101      	movs	r1, #1
     488:	40a9      	lsls	r1, r5
     48a:	1c0d      	adds	r5, r1, #0
     48c:	4315      	orrs	r5, r2
     48e:	615d      	str	r5, [r3, #20]
     490:	e004      	b.n	49c <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     492:	695a      	ldr	r2, [r3, #20]
     494:	2101      	movs	r1, #1
     496:	40a9      	lsls	r1, r5
     498:	438a      	bics	r2, r1
     49a:	615a      	str	r2, [r3, #20]
	}
}
     49c:	b003      	add	sp, #12
     49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a0:	00001bdd 	.word	0x00001bdd
     4a4:	40001800 	.word	0x40001800

000004a8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4a8:	b500      	push	{lr}
     4aa:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4ac:	ab01      	add	r3, sp, #4
     4ae:	2280      	movs	r2, #128	; 0x80
     4b0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4b2:	780a      	ldrb	r2, [r1, #0]
     4b4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4b6:	784a      	ldrb	r2, [r1, #1]
     4b8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4ba:	788a      	ldrb	r2, [r1, #2]
     4bc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4be:	1c19      	adds	r1, r3, #0
     4c0:	4b01      	ldr	r3, [pc, #4]	; (4c8 <port_pin_set_config+0x20>)
     4c2:	4798      	blx	r3
}
     4c4:	b003      	add	sp, #12
     4c6:	bd00      	pop	{pc}
     4c8:	00001bdd 	.word	0x00001bdd

000004cc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     4cc:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     4ce:	4b12      	ldr	r3, [pc, #72]	; (518 <RTC_Handler+0x4c>)
     4d0:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
     4d2:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     4d4:	8ada      	ldrh	r2, [r3, #22]
	callback_mask &= module->registered_callback;
     4d6:	8a99      	ldrh	r1, [r3, #20]
     4d8:	1c08      	adds	r0, r1, #0
     4da:	4010      	ands	r0, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     4dc:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     4de:	79e1      	ldrb	r1, [r4, #7]
     4e0:	400a      	ands	r2, r1

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     4e2:	09d1      	lsrs	r1, r2, #7
     4e4:	d006      	beq.n	4f4 <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     4e6:	0741      	lsls	r1, r0, #29
     4e8:	d501      	bpl.n	4ee <RTC_Handler+0x22>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     4ea:	691b      	ldr	r3, [r3, #16]
     4ec:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     4ee:	2380      	movs	r3, #128	; 0x80
     4f0:	7223      	strb	r3, [r4, #8]
     4f2:	e010      	b.n	516 <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     4f4:	07d1      	lsls	r1, r2, #31
     4f6:	d506      	bpl.n	506 <RTC_Handler+0x3a>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     4f8:	07c2      	lsls	r2, r0, #31
     4fa:	d501      	bpl.n	500 <RTC_Handler+0x34>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     4fc:	689b      	ldr	r3, [r3, #8]
     4fe:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     500:	2301      	movs	r3, #1
     502:	7223      	strb	r3, [r4, #8]
     504:	e007      	b.n	516 <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     506:	0791      	lsls	r1, r2, #30
     508:	d505      	bpl.n	516 <RTC_Handler+0x4a>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     50a:	0782      	lsls	r2, r0, #30
     50c:	d501      	bpl.n	512 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     50e:	68db      	ldr	r3, [r3, #12]
     510:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     512:	2302      	movs	r3, #2
     514:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     516:	bd10      	pop	{r4, pc}
     518:	20000e80 	.word	0x20000e80

0000051c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     51c:	b510      	push	{r4, lr}
     51e:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     520:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     522:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     524:	4299      	cmp	r1, r3
     526:	d30c      	bcc.n	542 <_sercom_get_sync_baud_val+0x26>
     528:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     52a:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     52c:	1c60      	adds	r0, r4, #1
     52e:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     530:	428b      	cmp	r3, r1
     532:	d801      	bhi.n	538 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     534:	1c04      	adds	r4, r0, #0
     536:	e7f8      	b.n	52a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     538:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     53a:	2cff      	cmp	r4, #255	; 0xff
     53c:	d801      	bhi.n	542 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     53e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     540:	2000      	movs	r0, #0
	}
}
     542:	bd10      	pop	{r4, pc}
     544:	0000      	movs	r0, r0
	...

00000548 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	465f      	mov	r7, fp
     54c:	4656      	mov	r6, sl
     54e:	464d      	mov	r5, r9
     550:	4644      	mov	r4, r8
     552:	b4f0      	push	{r4, r5, r6, r7}
     554:	b087      	sub	sp, #28
     556:	1c06      	adds	r6, r0, #0
     558:	1c0d      	adds	r5, r1, #0
     55a:	9204      	str	r2, [sp, #16]
     55c:	aa10      	add	r2, sp, #64	; 0x40
     55e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     560:	1c32      	adds	r2, r6, #0
     562:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     564:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     566:	428a      	cmp	r2, r1
     568:	d900      	bls.n	56c <_sercom_get_async_baud_val+0x24>
     56a:	e0b3      	b.n	6d4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     56c:	2b00      	cmp	r3, #0
     56e:	d14b      	bne.n	608 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     570:	2100      	movs	r1, #0
     572:	1c32      	adds	r2, r6, #0
     574:	4c5e      	ldr	r4, [pc, #376]	; (6f0 <_sercom_get_async_baud_val+0x1a8>)
     576:	47a0      	blx	r4
     578:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     57a:	1c2e      	adds	r6, r5, #0
     57c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     57e:	2000      	movs	r0, #0
     580:	2100      	movs	r1, #0
     582:	2200      	movs	r2, #0
     584:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     586:	243f      	movs	r4, #63	; 0x3f
     588:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     58a:	2501      	movs	r5, #1
     58c:	46a8      	mov	r8, r5
     58e:	9002      	str	r0, [sp, #8]
     590:	9103      	str	r1, [sp, #12]
     592:	4661      	mov	r1, ip
     594:	3920      	subs	r1, #32
     596:	d403      	bmi.n	5a0 <_sercom_get_async_baud_val+0x58>
     598:	4640      	mov	r0, r8
     59a:	4088      	lsls	r0, r1
     59c:	4681      	mov	r9, r0
     59e:	e005      	b.n	5ac <_sercom_get_async_baud_val+0x64>
     5a0:	2120      	movs	r1, #32
     5a2:	4665      	mov	r5, ip
     5a4:	1b4c      	subs	r4, r1, r5
     5a6:	4640      	mov	r0, r8
     5a8:	40e0      	lsrs	r0, r4
     5aa:	4681      	mov	r9, r0
     5ac:	4641      	mov	r1, r8
     5ae:	4664      	mov	r4, ip
     5b0:	40a1      	lsls	r1, r4
     5b2:	468a      	mov	sl, r1

		r = r << 1;
     5b4:	1c10      	adds	r0, r2, #0
     5b6:	1c19      	adds	r1, r3, #0
     5b8:	1880      	adds	r0, r0, r2
     5ba:	4159      	adcs	r1, r3
     5bc:	1c02      	adds	r2, r0, #0
     5be:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     5c0:	465d      	mov	r5, fp
     5c2:	464c      	mov	r4, r9
     5c4:	4225      	tst	r5, r4
     5c6:	d002      	beq.n	5ce <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     5c8:	4642      	mov	r2, r8
     5ca:	4302      	orrs	r2, r0
     5cc:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     5ce:	429f      	cmp	r7, r3
     5d0:	d80c      	bhi.n	5ec <_sercom_get_async_baud_val+0xa4>
     5d2:	d101      	bne.n	5d8 <_sercom_get_async_baud_val+0x90>
     5d4:	4296      	cmp	r6, r2
     5d6:	d809      	bhi.n	5ec <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     5d8:	1b92      	subs	r2, r2, r6
     5da:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     5dc:	4650      	mov	r0, sl
     5de:	9d02      	ldr	r5, [sp, #8]
     5e0:	4328      	orrs	r0, r5
     5e2:	4649      	mov	r1, r9
     5e4:	9c03      	ldr	r4, [sp, #12]
     5e6:	4321      	orrs	r1, r4
     5e8:	9002      	str	r0, [sp, #8]
     5ea:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5ec:	4665      	mov	r5, ip
     5ee:	3d01      	subs	r5, #1
     5f0:	46ac      	mov	ip, r5
     5f2:	d2ce      	bcs.n	592 <_sercom_get_async_baud_val+0x4a>
     5f4:	9802      	ldr	r0, [sp, #8]
     5f6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5f8:	4b3c      	ldr	r3, [pc, #240]	; (6ec <_sercom_get_async_baud_val+0x1a4>)
     5fa:	4a3b      	ldr	r2, [pc, #236]	; (6e8 <_sercom_get_async_baud_val+0x1a0>)
     5fc:	1a12      	subs	r2, r2, r0
     5fe:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     600:	0c12      	lsrs	r2, r2, #16
     602:	041b      	lsls	r3, r3, #16
     604:	431a      	orrs	r2, r3
     606:	e062      	b.n	6ce <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     608:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     60a:	2b01      	cmp	r3, #1
     60c:	d15f      	bne.n	6ce <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     60e:	0f4f      	lsrs	r7, r1, #29
     610:	46b9      	mov	r9, r7
     612:	00cd      	lsls	r5, r1, #3
     614:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     616:	2100      	movs	r1, #0
     618:	1c32      	adds	r2, r6, #0
     61a:	2300      	movs	r3, #0
     61c:	4c34      	ldr	r4, [pc, #208]	; (6f0 <_sercom_get_async_baud_val+0x1a8>)
     61e:	47a0      	blx	r4
     620:	1c06      	adds	r6, r0, #0
     622:	1c0f      	adds	r7, r1, #0
     624:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     626:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     628:	9602      	str	r6, [sp, #8]
     62a:	9703      	str	r7, [sp, #12]
     62c:	469a      	mov	sl, r3
     62e:	4650      	mov	r0, sl
     630:	b2c0      	uxtb	r0, r0
     632:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     634:	2100      	movs	r1, #0
     636:	4688      	mov	r8, r1
     638:	2200      	movs	r2, #0
     63a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     63c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     63e:	1c27      	adds	r7, r4, #0
     640:	3f20      	subs	r7, #32
     642:	d403      	bmi.n	64c <_sercom_get_async_baud_val+0x104>
     644:	1c2e      	adds	r6, r5, #0
     646:	40be      	lsls	r6, r7
     648:	9601      	str	r6, [sp, #4]
     64a:	e004      	b.n	656 <_sercom_get_async_baud_val+0x10e>
     64c:	2020      	movs	r0, #32
     64e:	1b07      	subs	r7, r0, r4
     650:	1c29      	adds	r1, r5, #0
     652:	40f9      	lsrs	r1, r7
     654:	9101      	str	r1, [sp, #4]
     656:	1c2e      	adds	r6, r5, #0
     658:	40a6      	lsls	r6, r4
     65a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     65c:	1c10      	adds	r0, r2, #0
     65e:	1c19      	adds	r1, r3, #0
     660:	1880      	adds	r0, r0, r2
     662:	4159      	adcs	r1, r3
     664:	1c02      	adds	r2, r0, #0
     666:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     668:	465f      	mov	r7, fp
     66a:	4037      	ands	r7, r6
     66c:	46bc      	mov	ip, r7
     66e:	9e01      	ldr	r6, [sp, #4]
     670:	464f      	mov	r7, r9
     672:	403e      	ands	r6, r7
     674:	4667      	mov	r7, ip
     676:	433e      	orrs	r6, r7
     678:	d002      	beq.n	680 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     67a:	1c2a      	adds	r2, r5, #0
     67c:	4302      	orrs	r2, r0
     67e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     680:	9803      	ldr	r0, [sp, #12]
     682:	4298      	cmp	r0, r3
     684:	d80b      	bhi.n	69e <_sercom_get_async_baud_val+0x156>
     686:	d102      	bne.n	68e <_sercom_get_async_baud_val+0x146>
     688:	9902      	ldr	r1, [sp, #8]
     68a:	4291      	cmp	r1, r2
     68c:	d807      	bhi.n	69e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     68e:	9e02      	ldr	r6, [sp, #8]
     690:	9f03      	ldr	r7, [sp, #12]
     692:	1b92      	subs	r2, r2, r6
     694:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     696:	4647      	mov	r7, r8
     698:	9800      	ldr	r0, [sp, #0]
     69a:	4307      	orrs	r7, r0
     69c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     69e:	3c01      	subs	r4, #1
     6a0:	d2cd      	bcs.n	63e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     6a2:	4641      	mov	r1, r8
     6a4:	4652      	mov	r2, sl
     6a6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     6a8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     6aa:	4c12      	ldr	r4, [pc, #72]	; (6f4 <_sercom_get_async_baud_val+0x1ac>)
     6ac:	42a3      	cmp	r3, r4
     6ae:	d908      	bls.n	6c2 <_sercom_get_async_baud_val+0x17a>
     6b0:	9a05      	ldr	r2, [sp, #20]
     6b2:	3201      	adds	r2, #1
     6b4:	b2d2      	uxtb	r2, r2
     6b6:	9205      	str	r2, [sp, #20]
     6b8:	2601      	movs	r6, #1
     6ba:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     6bc:	4657      	mov	r7, sl
     6be:	2f08      	cmp	r7, #8
     6c0:	d1b5      	bne.n	62e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6c2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     6c4:	9805      	ldr	r0, [sp, #20]
     6c6:	2808      	cmp	r0, #8
     6c8:	d004      	beq.n	6d4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     6ca:	0342      	lsls	r2, r0, #13
     6cc:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     6ce:	9c04      	ldr	r4, [sp, #16]
     6d0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     6d2:	2400      	movs	r4, #0
}
     6d4:	1c20      	adds	r0, r4, #0
     6d6:	b007      	add	sp, #28
     6d8:	bc3c      	pop	{r2, r3, r4, r5}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	46a2      	mov	sl, r4
     6e0:	46ab      	mov	fp, r5
     6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e4:	46c0      	nop			; (mov r8, r8)
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000000 	.word	0x00000000
     6ec:	00000001 	.word	0x00000001
     6f0:	000057f1 	.word	0x000057f1
     6f4:	00001fff 	.word	0x00001fff

000006f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6f8:	b510      	push	{r4, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     6fe:	4b0f      	ldr	r3, [pc, #60]	; (73c <sercom_set_gclk_generator+0x44>)
     700:	781b      	ldrb	r3, [r3, #0]
     702:	2b00      	cmp	r3, #0
     704:	d001      	beq.n	70a <sercom_set_gclk_generator+0x12>
     706:	2900      	cmp	r1, #0
     708:	d00d      	beq.n	726 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     70a:	a901      	add	r1, sp, #4
     70c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     70e:	2013      	movs	r0, #19
     710:	4b0b      	ldr	r3, [pc, #44]	; (740 <sercom_set_gclk_generator+0x48>)
     712:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     714:	2013      	movs	r0, #19
     716:	4b0b      	ldr	r3, [pc, #44]	; (744 <sercom_set_gclk_generator+0x4c>)
     718:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     71a:	4b08      	ldr	r3, [pc, #32]	; (73c <sercom_set_gclk_generator+0x44>)
     71c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     71e:	2201      	movs	r2, #1
     720:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     722:	2000      	movs	r0, #0
     724:	e007      	b.n	736 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     726:	4b05      	ldr	r3, [pc, #20]	; (73c <sercom_set_gclk_generator+0x44>)
     728:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     72a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     72c:	1b14      	subs	r4, r2, r4
     72e:	1e62      	subs	r2, r4, #1
     730:	4194      	sbcs	r4, r2
     732:	4264      	negs	r4, r4
     734:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     736:	b002      	add	sp, #8
     738:	bd10      	pop	{r4, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	20000094 	.word	0x20000094
     740:	00001b01 	.word	0x00001b01
     744:	00001a75 	.word	0x00001a75

00000748 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     748:	4b44      	ldr	r3, [pc, #272]	; (85c <_sercom_get_default_pad+0x114>)
     74a:	4298      	cmp	r0, r3
     74c:	d033      	beq.n	7b6 <_sercom_get_default_pad+0x6e>
     74e:	d806      	bhi.n	75e <_sercom_get_default_pad+0x16>
     750:	4b43      	ldr	r3, [pc, #268]	; (860 <_sercom_get_default_pad+0x118>)
     752:	4298      	cmp	r0, r3
     754:	d00d      	beq.n	772 <_sercom_get_default_pad+0x2a>
     756:	4b43      	ldr	r3, [pc, #268]	; (864 <_sercom_get_default_pad+0x11c>)
     758:	4298      	cmp	r0, r3
     75a:	d01b      	beq.n	794 <_sercom_get_default_pad+0x4c>
     75c:	e06f      	b.n	83e <_sercom_get_default_pad+0xf6>
     75e:	4b42      	ldr	r3, [pc, #264]	; (868 <_sercom_get_default_pad+0x120>)
     760:	4298      	cmp	r0, r3
     762:	d04a      	beq.n	7fa <_sercom_get_default_pad+0xb2>
     764:	4b41      	ldr	r3, [pc, #260]	; (86c <_sercom_get_default_pad+0x124>)
     766:	4298      	cmp	r0, r3
     768:	d058      	beq.n	81c <_sercom_get_default_pad+0xd4>
     76a:	4b41      	ldr	r3, [pc, #260]	; (870 <_sercom_get_default_pad+0x128>)
     76c:	4298      	cmp	r0, r3
     76e:	d166      	bne.n	83e <_sercom_get_default_pad+0xf6>
     770:	e032      	b.n	7d8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     772:	2901      	cmp	r1, #1
     774:	d065      	beq.n	842 <_sercom_get_default_pad+0xfa>
     776:	2900      	cmp	r1, #0
     778:	d004      	beq.n	784 <_sercom_get_default_pad+0x3c>
     77a:	2902      	cmp	r1, #2
     77c:	d006      	beq.n	78c <_sercom_get_default_pad+0x44>
     77e:	2903      	cmp	r1, #3
     780:	d006      	beq.n	790 <_sercom_get_default_pad+0x48>
     782:	e001      	b.n	788 <_sercom_get_default_pad+0x40>
     784:	483b      	ldr	r0, [pc, #236]	; (874 <_sercom_get_default_pad+0x12c>)
     786:	e067      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     788:	2000      	movs	r0, #0
     78a:	e065      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78c:	483a      	ldr	r0, [pc, #232]	; (878 <_sercom_get_default_pad+0x130>)
     78e:	e063      	b.n	858 <_sercom_get_default_pad+0x110>
     790:	483a      	ldr	r0, [pc, #232]	; (87c <_sercom_get_default_pad+0x134>)
     792:	e061      	b.n	858 <_sercom_get_default_pad+0x110>
     794:	2901      	cmp	r1, #1
     796:	d056      	beq.n	846 <_sercom_get_default_pad+0xfe>
     798:	2900      	cmp	r1, #0
     79a:	d004      	beq.n	7a6 <_sercom_get_default_pad+0x5e>
     79c:	2902      	cmp	r1, #2
     79e:	d006      	beq.n	7ae <_sercom_get_default_pad+0x66>
     7a0:	2903      	cmp	r1, #3
     7a2:	d006      	beq.n	7b2 <_sercom_get_default_pad+0x6a>
     7a4:	e001      	b.n	7aa <_sercom_get_default_pad+0x62>
     7a6:	2003      	movs	r0, #3
     7a8:	e056      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7aa:	2000      	movs	r0, #0
     7ac:	e054      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ae:	4834      	ldr	r0, [pc, #208]	; (880 <_sercom_get_default_pad+0x138>)
     7b0:	e052      	b.n	858 <_sercom_get_default_pad+0x110>
     7b2:	4834      	ldr	r0, [pc, #208]	; (884 <_sercom_get_default_pad+0x13c>)
     7b4:	e050      	b.n	858 <_sercom_get_default_pad+0x110>
     7b6:	2901      	cmp	r1, #1
     7b8:	d047      	beq.n	84a <_sercom_get_default_pad+0x102>
     7ba:	2900      	cmp	r1, #0
     7bc:	d004      	beq.n	7c8 <_sercom_get_default_pad+0x80>
     7be:	2902      	cmp	r1, #2
     7c0:	d006      	beq.n	7d0 <_sercom_get_default_pad+0x88>
     7c2:	2903      	cmp	r1, #3
     7c4:	d006      	beq.n	7d4 <_sercom_get_default_pad+0x8c>
     7c6:	e001      	b.n	7cc <_sercom_get_default_pad+0x84>
     7c8:	482f      	ldr	r0, [pc, #188]	; (888 <_sercom_get_default_pad+0x140>)
     7ca:	e045      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7cc:	2000      	movs	r0, #0
     7ce:	e043      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7d0:	482e      	ldr	r0, [pc, #184]	; (88c <_sercom_get_default_pad+0x144>)
     7d2:	e041      	b.n	858 <_sercom_get_default_pad+0x110>
     7d4:	482e      	ldr	r0, [pc, #184]	; (890 <_sercom_get_default_pad+0x148>)
     7d6:	e03f      	b.n	858 <_sercom_get_default_pad+0x110>
     7d8:	2901      	cmp	r1, #1
     7da:	d038      	beq.n	84e <_sercom_get_default_pad+0x106>
     7dc:	2900      	cmp	r1, #0
     7de:	d004      	beq.n	7ea <_sercom_get_default_pad+0xa2>
     7e0:	2902      	cmp	r1, #2
     7e2:	d006      	beq.n	7f2 <_sercom_get_default_pad+0xaa>
     7e4:	2903      	cmp	r1, #3
     7e6:	d006      	beq.n	7f6 <_sercom_get_default_pad+0xae>
     7e8:	e001      	b.n	7ee <_sercom_get_default_pad+0xa6>
     7ea:	482a      	ldr	r0, [pc, #168]	; (894 <_sercom_get_default_pad+0x14c>)
     7ec:	e034      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ee:	2000      	movs	r0, #0
     7f0:	e032      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7f2:	4829      	ldr	r0, [pc, #164]	; (898 <_sercom_get_default_pad+0x150>)
     7f4:	e030      	b.n	858 <_sercom_get_default_pad+0x110>
     7f6:	4829      	ldr	r0, [pc, #164]	; (89c <_sercom_get_default_pad+0x154>)
     7f8:	e02e      	b.n	858 <_sercom_get_default_pad+0x110>
     7fa:	2901      	cmp	r1, #1
     7fc:	d029      	beq.n	852 <_sercom_get_default_pad+0x10a>
     7fe:	2900      	cmp	r1, #0
     800:	d004      	beq.n	80c <_sercom_get_default_pad+0xc4>
     802:	2902      	cmp	r1, #2
     804:	d006      	beq.n	814 <_sercom_get_default_pad+0xcc>
     806:	2903      	cmp	r1, #3
     808:	d006      	beq.n	818 <_sercom_get_default_pad+0xd0>
     80a:	e001      	b.n	810 <_sercom_get_default_pad+0xc8>
     80c:	4824      	ldr	r0, [pc, #144]	; (8a0 <_sercom_get_default_pad+0x158>)
     80e:	e023      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     810:	2000      	movs	r0, #0
     812:	e021      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     814:	4823      	ldr	r0, [pc, #140]	; (8a4 <_sercom_get_default_pad+0x15c>)
     816:	e01f      	b.n	858 <_sercom_get_default_pad+0x110>
     818:	4823      	ldr	r0, [pc, #140]	; (8a8 <_sercom_get_default_pad+0x160>)
     81a:	e01d      	b.n	858 <_sercom_get_default_pad+0x110>
     81c:	2901      	cmp	r1, #1
     81e:	d01a      	beq.n	856 <_sercom_get_default_pad+0x10e>
     820:	2900      	cmp	r1, #0
     822:	d004      	beq.n	82e <_sercom_get_default_pad+0xe6>
     824:	2902      	cmp	r1, #2
     826:	d006      	beq.n	836 <_sercom_get_default_pad+0xee>
     828:	2903      	cmp	r1, #3
     82a:	d006      	beq.n	83a <_sercom_get_default_pad+0xf2>
     82c:	e001      	b.n	832 <_sercom_get_default_pad+0xea>
     82e:	481f      	ldr	r0, [pc, #124]	; (8ac <_sercom_get_default_pad+0x164>)
     830:	e012      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     832:	2000      	movs	r0, #0
     834:	e010      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     836:	481e      	ldr	r0, [pc, #120]	; (8b0 <_sercom_get_default_pad+0x168>)
     838:	e00e      	b.n	858 <_sercom_get_default_pad+0x110>
     83a:	481e      	ldr	r0, [pc, #120]	; (8b4 <_sercom_get_default_pad+0x16c>)
     83c:	e00c      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     83e:	2000      	movs	r0, #0
     840:	e00a      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     842:	481d      	ldr	r0, [pc, #116]	; (8b8 <_sercom_get_default_pad+0x170>)
     844:	e008      	b.n	858 <_sercom_get_default_pad+0x110>
     846:	481d      	ldr	r0, [pc, #116]	; (8bc <_sercom_get_default_pad+0x174>)
     848:	e006      	b.n	858 <_sercom_get_default_pad+0x110>
     84a:	481d      	ldr	r0, [pc, #116]	; (8c0 <_sercom_get_default_pad+0x178>)
     84c:	e004      	b.n	858 <_sercom_get_default_pad+0x110>
     84e:	481d      	ldr	r0, [pc, #116]	; (8c4 <_sercom_get_default_pad+0x17c>)
     850:	e002      	b.n	858 <_sercom_get_default_pad+0x110>
     852:	481d      	ldr	r0, [pc, #116]	; (8c8 <_sercom_get_default_pad+0x180>)
     854:	e000      	b.n	858 <_sercom_get_default_pad+0x110>
     856:	481d      	ldr	r0, [pc, #116]	; (8cc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     858:	4770      	bx	lr
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	42001000 	.word	0x42001000
     860:	42000800 	.word	0x42000800
     864:	42000c00 	.word	0x42000c00
     868:	42001800 	.word	0x42001800
     86c:	42001c00 	.word	0x42001c00
     870:	42001400 	.word	0x42001400
     874:	00040003 	.word	0x00040003
     878:	00060003 	.word	0x00060003
     87c:	00070003 	.word	0x00070003
     880:	001e0003 	.word	0x001e0003
     884:	001f0003 	.word	0x001f0003
     888:	000c0002 	.word	0x000c0002
     88c:	000e0002 	.word	0x000e0002
     890:	000f0002 	.word	0x000f0002
     894:	00100003 	.word	0x00100003
     898:	00120003 	.word	0x00120003
     89c:	00130003 	.word	0x00130003
     8a0:	00530005 	.word	0x00530005
     8a4:	003e0005 	.word	0x003e0005
     8a8:	00520005 	.word	0x00520005
     8ac:	00160003 	.word	0x00160003
     8b0:	00180003 	.word	0x00180003
     8b4:	00190003 	.word	0x00190003
     8b8:	00050003 	.word	0x00050003
     8bc:	00010003 	.word	0x00010003
     8c0:	000d0002 	.word	0x000d0002
     8c4:	00110003 	.word	0x00110003
     8c8:	003f0005 	.word	0x003f0005
     8cc:	00170003 	.word	0x00170003

000008d0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8d4:	4a0c      	ldr	r2, [pc, #48]	; (908 <_sercom_get_sercom_inst_index+0x38>)
     8d6:	466b      	mov	r3, sp
     8d8:	ca70      	ldmia	r2!, {r4, r5, r6}
     8da:	c370      	stmia	r3!, {r4, r5, r6}
     8dc:	ca32      	ldmia	r2!, {r1, r4, r5}
     8de:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8e0:	9e00      	ldr	r6, [sp, #0]
     8e2:	4286      	cmp	r6, r0
     8e4:	d006      	beq.n	8f4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8e6:	2301      	movs	r3, #1
     8e8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8ea:	4669      	mov	r1, sp
     8ec:	5852      	ldr	r2, [r2, r1]
     8ee:	4282      	cmp	r2, r0
     8f0:	d103      	bne.n	8fa <_sercom_get_sercom_inst_index+0x2a>
     8f2:	e000      	b.n	8f6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8f4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     8f6:	b2d8      	uxtb	r0, r3
     8f8:	e003      	b.n	902 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8fa:	3301      	adds	r3, #1
     8fc:	2b06      	cmp	r3, #6
     8fe:	d1f3      	bne.n	8e8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     900:	2000      	movs	r0, #0
}
     902:	b006      	add	sp, #24
     904:	bd70      	pop	{r4, r5, r6, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	00006030 	.word	0x00006030

0000090c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     90c:	4770      	bx	lr
     90e:	46c0      	nop			; (mov r8, r8)

00000910 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     910:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <_sercom_set_handler+0x2c>)
     914:	781b      	ldrb	r3, [r3, #0]
     916:	2b00      	cmp	r3, #0
     918:	d10c      	bne.n	934 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     91a:	4f09      	ldr	r7, [pc, #36]	; (940 <_sercom_set_handler+0x30>)
     91c:	4e09      	ldr	r6, [pc, #36]	; (944 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     91e:	4d0a      	ldr	r5, [pc, #40]	; (948 <_sercom_set_handler+0x38>)
     920:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     922:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     924:	195a      	adds	r2, r3, r5
     926:	6014      	str	r4, [r2, #0]
     928:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     92a:	2b18      	cmp	r3, #24
     92c:	d1f9      	bne.n	922 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     92e:	2201      	movs	r2, #1
     930:	4b02      	ldr	r3, [pc, #8]	; (93c <_sercom_set_handler+0x2c>)
     932:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     934:	0080      	lsls	r0, r0, #2
     936:	4b02      	ldr	r3, [pc, #8]	; (940 <_sercom_set_handler+0x30>)
     938:	50c1      	str	r1, [r0, r3]
}
     93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     93c:	20000098 	.word	0x20000098
     940:	2000009c 	.word	0x2000009c
     944:	0000090d 	.word	0x0000090d
     948:	20000e84 	.word	0x20000e84

0000094c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     94c:	b510      	push	{r4, lr}
     94e:	b082      	sub	sp, #8
     950:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     952:	4668      	mov	r0, sp
     954:	4905      	ldr	r1, [pc, #20]	; (96c <_sercom_get_interrupt_vector+0x20>)
     956:	2206      	movs	r2, #6
     958:	4b05      	ldr	r3, [pc, #20]	; (970 <_sercom_get_interrupt_vector+0x24>)
     95a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     95c:	1c20      	adds	r0, r4, #0
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <_sercom_get_interrupt_vector+0x28>)
     960:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     962:	466b      	mov	r3, sp
     964:	5618      	ldrsb	r0, [r3, r0]
}
     966:	b002      	add	sp, #8
     968:	bd10      	pop	{r4, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	00006048 	.word	0x00006048
     970:	00005881 	.word	0x00005881
     974:	000008d1 	.word	0x000008d1

00000978 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     978:	b508      	push	{r3, lr}
     97a:	4b02      	ldr	r3, [pc, #8]	; (984 <SERCOM0_Handler+0xc>)
     97c:	681b      	ldr	r3, [r3, #0]
     97e:	2000      	movs	r0, #0
     980:	4798      	blx	r3
     982:	bd08      	pop	{r3, pc}
     984:	2000009c 	.word	0x2000009c

00000988 <SERCOM1_Handler>:
     988:	b508      	push	{r3, lr}
     98a:	4b02      	ldr	r3, [pc, #8]	; (994 <SERCOM1_Handler+0xc>)
     98c:	685b      	ldr	r3, [r3, #4]
     98e:	2001      	movs	r0, #1
     990:	4798      	blx	r3
     992:	bd08      	pop	{r3, pc}
     994:	2000009c 	.word	0x2000009c

00000998 <SERCOM2_Handler>:
     998:	b508      	push	{r3, lr}
     99a:	4b02      	ldr	r3, [pc, #8]	; (9a4 <SERCOM2_Handler+0xc>)
     99c:	689b      	ldr	r3, [r3, #8]
     99e:	2002      	movs	r0, #2
     9a0:	4798      	blx	r3
     9a2:	bd08      	pop	{r3, pc}
     9a4:	2000009c 	.word	0x2000009c

000009a8 <SERCOM3_Handler>:
     9a8:	b508      	push	{r3, lr}
     9aa:	4b02      	ldr	r3, [pc, #8]	; (9b4 <SERCOM3_Handler+0xc>)
     9ac:	68db      	ldr	r3, [r3, #12]
     9ae:	2003      	movs	r0, #3
     9b0:	4798      	blx	r3
     9b2:	bd08      	pop	{r3, pc}
     9b4:	2000009c 	.word	0x2000009c

000009b8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ba:	465f      	mov	r7, fp
     9bc:	4656      	mov	r6, sl
     9be:	464d      	mov	r5, r9
     9c0:	4644      	mov	r4, r8
     9c2:	b4f0      	push	{r4, r5, r6, r7}
     9c4:	b089      	sub	sp, #36	; 0x24
     9c6:	1c07      	adds	r7, r0, #0
     9c8:	1c0d      	adds	r5, r1, #0
     9ca:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     9cc:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     9ce:	680b      	ldr	r3, [r1, #0]
     9d0:	0798      	lsls	r0, r3, #30
     9d2:	d400      	bmi.n	9d6 <spi_init+0x1e>
     9d4:	e08d      	b.n	af2 <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     9d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
     9d8:	9103      	str	r1, [sp, #12]
     9da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     9dc:	9204      	str	r2, [sp, #16]
     9de:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9e0:	9305      	str	r3, [sp, #20]
     9e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
     9e4:	9006      	str	r0, [sp, #24]
     9e6:	2600      	movs	r6, #0

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9e8:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     9ea:	221f      	movs	r2, #31
     9ec:	4690      	mov	r8, r2
     9ee:	b2f1      	uxtb	r1, r6
     9f0:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9f2:	aa03      	add	r2, sp, #12
     9f4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9f6:	2800      	cmp	r0, #0
     9f8:	d102      	bne.n	a00 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9fa:	1c28      	adds	r0, r5, #0
     9fc:	4b8f      	ldr	r3, [pc, #572]	; (c3c <spi_init+0x284>)
     9fe:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     a00:	1c41      	adds	r1, r0, #1
     a02:	d029      	beq.n	a58 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a04:	0402      	lsls	r2, r0, #16
     a06:	0c12      	lsrs	r2, r2, #16
     a08:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     a0a:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a0c:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a0e:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a10:	0618      	lsls	r0, r3, #24
     a12:	d403      	bmi.n	a1c <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     a14:	0951      	lsrs	r1, r2, #5
     a16:	01c9      	lsls	r1, r1, #7
     a18:	4b89      	ldr	r3, [pc, #548]	; (c40 <spi_init+0x288>)
     a1a:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     a1c:	4640      	mov	r0, r8
     a1e:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a20:	180b      	adds	r3, r1, r0
     a22:	3340      	adds	r3, #64	; 0x40
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
     a28:	2380      	movs	r3, #128	; 0x80
     a2a:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a2c:	4653      	mov	r3, sl
     a2e:	07db      	lsls	r3, r3, #31
     a30:	d50c      	bpl.n	a4c <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     a32:	0840      	lsrs	r0, r0, #1
     a34:	1809      	adds	r1, r1, r0
     a36:	3130      	adds	r1, #48	; 0x30
     a38:	780b      	ldrb	r3, [r1, #0]
     a3a:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
     a3c:	07d0      	lsls	r0, r2, #31
     a3e:	d502      	bpl.n	a46 <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     a40:	091b      	lsrs	r3, r3, #4
     a42:	469b      	mov	fp, r3
     a44:	e002      	b.n	a4c <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     a46:	220f      	movs	r2, #15
     a48:	4013      	ands	r3, r2
     a4a:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a4c:	45dc      	cmp	ip, fp
     a4e:	d003      	beq.n	a58 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     a50:	2300      	movs	r3, #0
     a52:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
     a54:	201c      	movs	r0, #28
     a56:	e0ea      	b.n	c2e <spi_init+0x276>
     a58:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a5a:	2e04      	cmp	r6, #4
     a5c:	d1c7      	bne.n	9ee <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     a5e:	2013      	movs	r0, #19
     a60:	4b78      	ldr	r3, [pc, #480]	; (c44 <spi_init+0x28c>)
     a62:	4798      	blx	r3
     a64:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a66:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     a68:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a6a:	2b01      	cmp	r3, #1
     a6c:	d111      	bne.n	a92 <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a6e:	69a0      	ldr	r0, [r4, #24]
     a70:	aa02      	add	r2, sp, #8
     a72:	4b75      	ldr	r3, [pc, #468]	; (c48 <spi_init+0x290>)
     a74:	4798      	blx	r3
     a76:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     a78:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     a7a:	2b00      	cmp	r3, #0
     a7c:	d000      	beq.n	a80 <spi_init+0xc8>
     a7e:	e0d6      	b.n	c2e <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a80:	7b2b      	ldrb	r3, [r5, #12]
     a82:	b2db      	uxtb	r3, r3
     a84:	aa02      	add	r2, sp, #8
     a86:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a88:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a8a:	429a      	cmp	r2, r3
     a8c:	d000      	beq.n	a90 <spi_init+0xd8>
     a8e:	e0ce      	b.n	c2e <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a90:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     a92:	68a2      	ldr	r2, [r4, #8]
     a94:	6861      	ldr	r1, [r4, #4]
     a96:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a98:	68e3      	ldr	r3, [r4, #12]
     a9a:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a9c:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a9e:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
     aa0:	7c61      	ldrb	r1, [r4, #17]
     aa2:	2900      	cmp	r1, #0
     aa4:	d001      	beq.n	aaa <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     aa6:	2180      	movs	r1, #128	; 0x80
     aa8:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     aaa:	7ca1      	ldrb	r1, [r4, #18]
     aac:	2900      	cmp	r1, #0
     aae:	d002      	beq.n	ab6 <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ab0:	2180      	movs	r1, #128	; 0x80
     ab2:	0289      	lsls	r1, r1, #10
     ab4:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     ab6:	7ce1      	ldrb	r1, [r4, #19]
     ab8:	2900      	cmp	r1, #0
     aba:	d002      	beq.n	ac2 <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     abc:	2180      	movs	r1, #128	; 0x80
     abe:	0089      	lsls	r1, r1, #2
     ac0:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ac2:	7d21      	ldrb	r1, [r4, #20]
     ac4:	2900      	cmp	r1, #0
     ac6:	d002      	beq.n	ace <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ac8:	2180      	movs	r1, #128	; 0x80
     aca:	0189      	lsls	r1, r1, #6
     acc:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ace:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     ad0:	2002      	movs	r0, #2
     ad2:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ad4:	428a      	cmp	r2, r1
     ad6:	d108      	bne.n	aea <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
     ad8:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ada:	429a      	cmp	r2, r3
     adc:	d105      	bne.n	aea <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     ade:	7823      	ldrb	r3, [r4, #0]
     ae0:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
     ae2:	7c23      	ldrb	r3, [r4, #16]
     ae4:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
     ae6:	2000      	movs	r0, #0
     ae8:	e0a1      	b.n	c2e <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     aea:	2300      	movs	r3, #0
     aec:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
     aee:	201c      	movs	r0, #28
     af0:	e09d      	b.n	c2e <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     af2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     af4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     af6:	07d9      	lsls	r1, r3, #31
     af8:	d500      	bpl.n	afc <spi_init+0x144>
     afa:	e098      	b.n	c2e <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     afc:	1c28      	adds	r0, r5, #0
     afe:	4b53      	ldr	r3, [pc, #332]	; (c4c <spi_init+0x294>)
     b00:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b02:	4b53      	ldr	r3, [pc, #332]	; (c50 <spi_init+0x298>)
     b04:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b06:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b08:	2601      	movs	r6, #1
     b0a:	4096      	lsls	r6, r2
     b0c:	1c32      	adds	r2, r6, #0
     b0e:	430a      	orrs	r2, r1
     b10:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b12:	a907      	add	r1, sp, #28
     b14:	2624      	movs	r6, #36	; 0x24
     b16:	5da3      	ldrb	r3, [r4, r6]
     b18:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b1a:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b1c:	b2c0      	uxtb	r0, r0
     b1e:	4680      	mov	r8, r0
     b20:	4b4c      	ldr	r3, [pc, #304]	; (c54 <spi_init+0x29c>)
     b22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b24:	4640      	mov	r0, r8
     b26:	4b4c      	ldr	r3, [pc, #304]	; (c58 <spi_init+0x2a0>)
     b28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b2a:	5da0      	ldrb	r0, [r4, r6]
     b2c:	2100      	movs	r1, #0
     b2e:	4b4b      	ldr	r3, [pc, #300]	; (c5c <spi_init+0x2a4>)
     b30:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b32:	7823      	ldrb	r3, [r4, #0]
     b34:	2b01      	cmp	r3, #1
     b36:	d103      	bne.n	b40 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b38:	682a      	ldr	r2, [r5, #0]
     b3a:	230c      	movs	r3, #12
     b3c:	4313      	orrs	r3, r2
     b3e:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b40:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b42:	ab02      	add	r3, sp, #8
     b44:	2280      	movs	r2, #128	; 0x80
     b46:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b48:	2200      	movs	r2, #0
     b4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b4c:	2101      	movs	r1, #1
     b4e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     b50:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b52:	7823      	ldrb	r3, [r4, #0]
     b54:	2b00      	cmp	r3, #0
     b56:	d101      	bne.n	b5c <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b58:	ab02      	add	r3, sp, #8
     b5a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     b5e:	9203      	str	r2, [sp, #12]
     b60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b62:	9304      	str	r3, [sp, #16]
     b64:	6b20      	ldr	r0, [r4, #48]	; 0x30
     b66:	9005      	str	r0, [sp, #20]
     b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
     b6a:	9106      	str	r1, [sp, #24]
     b6c:	2500      	movs	r5, #0
     b6e:	b2e9      	uxtb	r1, r5
     b70:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b72:	aa03      	add	r2, sp, #12
     b74:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     b76:	2800      	cmp	r0, #0
     b78:	d102      	bne.n	b80 <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b7a:	1c30      	adds	r0, r6, #0
     b7c:	4a2f      	ldr	r2, [pc, #188]	; (c3c <spi_init+0x284>)
     b7e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b80:	1c43      	adds	r3, r0, #1
     b82:	d006      	beq.n	b92 <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b84:	4669      	mov	r1, sp
     b86:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b88:	0c00      	lsrs	r0, r0, #16
     b8a:	b2c0      	uxtb	r0, r0
     b8c:	a902      	add	r1, sp, #8
     b8e:	4a34      	ldr	r2, [pc, #208]	; (c60 <spi_init+0x2a8>)
     b90:	4790      	blx	r2
     b92:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b94:	2d04      	cmp	r5, #4
     b96:	d1ea      	bne.n	b6e <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     b98:	7823      	ldrb	r3, [r4, #0]
     b9a:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     b9c:	7c23      	ldrb	r3, [r4, #16]
     b9e:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     ba0:	7ca3      	ldrb	r3, [r4, #18]
     ba2:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ba4:	7d23      	ldrb	r3, [r4, #20]
     ba6:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ba8:	2200      	movs	r2, #0
     baa:	466b      	mov	r3, sp
     bac:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     bae:	7823      	ldrb	r3, [r4, #0]
     bb0:	2b01      	cmp	r3, #1
     bb2:	d114      	bne.n	bde <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bb4:	6838      	ldr	r0, [r7, #0]
     bb6:	4b25      	ldr	r3, [pc, #148]	; (c4c <spi_init+0x294>)
     bb8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bba:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bbc:	b2c0      	uxtb	r0, r0
     bbe:	4b21      	ldr	r3, [pc, #132]	; (c44 <spi_init+0x28c>)
     bc0:	4798      	blx	r3
     bc2:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     bc4:	69a0      	ldr	r0, [r4, #24]
     bc6:	466a      	mov	r2, sp
     bc8:	3206      	adds	r2, #6
     bca:	4b1f      	ldr	r3, [pc, #124]	; (c48 <spi_init+0x290>)
     bcc:	4798      	blx	r3
     bce:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     bd0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     bd2:	2b00      	cmp	r3, #0
     bd4:	d12b      	bne.n	c2e <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     bd6:	466b      	mov	r3, sp
     bd8:	3306      	adds	r3, #6
     bda:	781b      	ldrb	r3, [r3, #0]
     bdc:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bde:	68a2      	ldr	r2, [r4, #8]
     be0:	6863      	ldr	r3, [r4, #4]
     be2:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     be4:	68e0      	ldr	r0, [r4, #12]
     be6:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
     be8:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bea:	7c61      	ldrb	r1, [r4, #17]
     bec:	2900      	cmp	r1, #0
     bee:	d103      	bne.n	bf8 <spi_init+0x240>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bf0:	491c      	ldr	r1, [pc, #112]	; (c64 <spi_init+0x2ac>)
     bf2:	7889      	ldrb	r1, [r1, #2]
     bf4:	0788      	lsls	r0, r1, #30
     bf6:	d501      	bpl.n	bfc <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bf8:	2180      	movs	r1, #128	; 0x80
     bfa:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     bfc:	7ca1      	ldrb	r1, [r4, #18]
     bfe:	2900      	cmp	r1, #0
     c00:	d002      	beq.n	c08 <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c02:	2180      	movs	r1, #128	; 0x80
     c04:	0289      	lsls	r1, r1, #10
     c06:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     c08:	7ce1      	ldrb	r1, [r4, #19]
     c0a:	2900      	cmp	r1, #0
     c0c:	d002      	beq.n	c14 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c0e:	2180      	movs	r1, #128	; 0x80
     c10:	0089      	lsls	r1, r1, #2
     c12:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     c14:	7d21      	ldrb	r1, [r4, #20]
     c16:	2900      	cmp	r1, #0
     c18:	d002      	beq.n	c20 <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c1a:	2180      	movs	r1, #128	; 0x80
     c1c:	0189      	lsls	r1, r1, #6
     c1e:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     c20:	6831      	ldr	r1, [r6, #0]
     c22:	430a      	orrs	r2, r1
     c24:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     c26:	6872      	ldr	r2, [r6, #4]
     c28:	4313      	orrs	r3, r2
     c2a:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     c2c:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     c2e:	b009      	add	sp, #36	; 0x24
     c30:	bc3c      	pop	{r2, r3, r4, r5}
     c32:	4690      	mov	r8, r2
     c34:	4699      	mov	r9, r3
     c36:	46a2      	mov	sl, r4
     c38:	46ab      	mov	fp, r5
     c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3c:	00000749 	.word	0x00000749
     c40:	41004400 	.word	0x41004400
     c44:	00001b1d 	.word	0x00001b1d
     c48:	0000051d 	.word	0x0000051d
     c4c:	000008d1 	.word	0x000008d1
     c50:	40000400 	.word	0x40000400
     c54:	00001b01 	.word	0x00001b01
     c58:	00001a75 	.word	0x00001a75
     c5c:	000006f9 	.word	0x000006f9
     c60:	00001bdd 	.word	0x00001bdd
     c64:	41002000 	.word	0x41002000

00000c68 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c68:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c6a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     c6c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c6e:	2c01      	cmp	r4, #1
     c70:	d16c      	bne.n	d4c <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c72:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     c74:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c76:	2c00      	cmp	r4, #0
     c78:	d168      	bne.n	d4c <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     c7a:	2a00      	cmp	r2, #0
     c7c:	d057      	beq.n	d2e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     c7e:	784b      	ldrb	r3, [r1, #1]
     c80:	2b00      	cmp	r3, #0
     c82:	d044      	beq.n	d0e <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c84:	6802      	ldr	r2, [r0, #0]
     c86:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     c88:	07dc      	lsls	r4, r3, #31
     c8a:	d40f      	bmi.n	cac <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     c8c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c8e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c90:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c92:	2900      	cmp	r1, #0
     c94:	d103      	bne.n	c9e <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     c96:	095a      	lsrs	r2, r3, #5
     c98:	01d2      	lsls	r2, r2, #7
     c9a:	492d      	ldr	r1, [pc, #180]	; (d50 <spi_select_slave+0xe8>)
     c9c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c9e:	211f      	movs	r1, #31
     ca0:	400b      	ands	r3, r1
     ca2:	2101      	movs	r1, #1
     ca4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ca6:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     ca8:	2305      	movs	r3, #5
     caa:	e04f      	b.n	d4c <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     cac:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cae:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cb0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cb2:	2c00      	cmp	r4, #0
     cb4:	d103      	bne.n	cbe <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     cb6:	095a      	lsrs	r2, r3, #5
     cb8:	01d2      	lsls	r2, r2, #7
     cba:	4c25      	ldr	r4, [pc, #148]	; (d50 <spi_select_slave+0xe8>)
     cbc:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cbe:	241f      	movs	r4, #31
     cc0:	4023      	ands	r3, r4
     cc2:	2401      	movs	r4, #1
     cc4:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cc6:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     cc8:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cca:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ccc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cce:	07d4      	lsls	r4, r2, #31
     cd0:	d500      	bpl.n	cd4 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cd2:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     cd4:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cd6:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     cd8:	2a00      	cmp	r2, #0
     cda:	d137      	bne.n	d4c <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cdc:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cde:	2104      	movs	r1, #4
     ce0:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     ce2:	420b      	tst	r3, r1
     ce4:	d0fc      	beq.n	ce0 <spi_select_slave+0x78>
     ce6:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     ce8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     cea:	074c      	lsls	r4, r1, #29
     cec:	d52e      	bpl.n	d4c <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cee:	8b53      	ldrh	r3, [r2, #26]
     cf0:	0759      	lsls	r1, r3, #29
     cf2:	d503      	bpl.n	cfc <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     cf4:	8b51      	ldrh	r1, [r2, #26]
     cf6:	2304      	movs	r3, #4
     cf8:	430b      	orrs	r3, r1
     cfa:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cfc:	7983      	ldrb	r3, [r0, #6]
     cfe:	2b01      	cmp	r3, #1
     d00:	d102      	bne.n	d08 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d02:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d04:	2300      	movs	r3, #0
     d06:	e021      	b.n	d4c <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d08:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d0a:	2300      	movs	r3, #0
     d0c:	e01e      	b.n	d4c <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     d0e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d10:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d12:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d14:	2900      	cmp	r1, #0
     d16:	d103      	bne.n	d20 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     d18:	095a      	lsrs	r2, r3, #5
     d1a:	01d2      	lsls	r2, r2, #7
     d1c:	4c0c      	ldr	r4, [pc, #48]	; (d50 <spi_select_slave+0xe8>)
     d1e:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d20:	211f      	movs	r1, #31
     d22:	400b      	ands	r3, r1
     d24:	2101      	movs	r1, #1
     d26:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d28:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d2a:	2300      	movs	r3, #0
     d2c:	e00e      	b.n	d4c <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     d2e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d30:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d32:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d34:	2900      	cmp	r1, #0
     d36:	d103      	bne.n	d40 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     d38:	095a      	lsrs	r2, r3, #5
     d3a:	01d2      	lsls	r2, r2, #7
     d3c:	4904      	ldr	r1, [pc, #16]	; (d50 <spi_select_slave+0xe8>)
     d3e:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d40:	211f      	movs	r1, #31
     d42:	400b      	ands	r3, r1
     d44:	2101      	movs	r1, #1
     d46:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d48:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     d4a:	2300      	movs	r3, #0
}
     d4c:	1c18      	adds	r0, r3, #0
     d4e:	bd10      	pop	{r4, pc}
     d50:	41004400 	.word	0x41004400

00000d54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
     d56:	465f      	mov	r7, fp
     d58:	4656      	mov	r6, sl
     d5a:	464d      	mov	r5, r9
     d5c:	4644      	mov	r4, r8
     d5e:	b4f0      	push	{r4, r5, r6, r7}
     d60:	b091      	sub	sp, #68	; 0x44
     d62:	1c05      	adds	r5, r0, #0
     d64:	1c0c      	adds	r4, r1, #0
     d66:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d68:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d6a:	1c08      	adds	r0, r1, #0
     d6c:	4bad      	ldr	r3, [pc, #692]	; (1024 <usart_init+0x2d0>)
     d6e:	4798      	blx	r3
     d70:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d72:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d74:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d76:	07d9      	lsls	r1, r3, #31
     d78:	d500      	bpl.n	d7c <usart_init+0x28>
     d7a:	e14b      	b.n	1014 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d7c:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     d7e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d80:	079f      	lsls	r7, r3, #30
     d82:	d500      	bpl.n	d86 <usart_init+0x32>
     d84:	e146      	b.n	1014 <usart_init+0x2c0>
     d86:	4ba8      	ldr	r3, [pc, #672]	; (1028 <usart_init+0x2d4>)
     d88:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d8a:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d8c:	2701      	movs	r7, #1
     d8e:	408f      	lsls	r7, r1
     d90:	1c39      	adds	r1, r7, #0
     d92:	4301      	orrs	r1, r0
     d94:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d96:	a90f      	add	r1, sp, #60	; 0x3c
     d98:	272d      	movs	r7, #45	; 0x2d
     d9a:	5df3      	ldrb	r3, [r6, r7]
     d9c:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d9e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     da0:	b2d2      	uxtb	r2, r2
     da2:	4690      	mov	r8, r2
     da4:	1c10      	adds	r0, r2, #0
     da6:	4ba1      	ldr	r3, [pc, #644]	; (102c <usart_init+0x2d8>)
     da8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     daa:	4640      	mov	r0, r8
     dac:	4ba0      	ldr	r3, [pc, #640]	; (1030 <usart_init+0x2dc>)
     dae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     db0:	5df0      	ldrb	r0, [r6, r7]
     db2:	2100      	movs	r1, #0
     db4:	4b9f      	ldr	r3, [pc, #636]	; (1034 <usart_init+0x2e0>)
     db6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     db8:	7af3      	ldrb	r3, [r6, #11]
     dba:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     dbc:	2324      	movs	r3, #36	; 0x24
     dbe:	5cf3      	ldrb	r3, [r6, r3]
     dc0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     dc2:	2325      	movs	r3, #37	; 0x25
     dc4:	5cf3      	ldrb	r3, [r6, r3]
     dc6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     dc8:	7ef3      	ldrb	r3, [r6, #27]
     dca:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     dcc:	7f33      	ldrb	r3, [r6, #28]
     dce:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dd0:	6829      	ldr	r1, [r5, #0]
     dd2:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     dd4:	1c08      	adds	r0, r1, #0
     dd6:	4b93      	ldr	r3, [pc, #588]	; (1024 <usart_init+0x2d0>)
     dd8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dda:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     ddc:	2200      	movs	r2, #0
     dde:	466b      	mov	r3, sp
     de0:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     de2:	8a32      	ldrh	r2, [r6, #16]
     de4:	9202      	str	r2, [sp, #8]
     de6:	2380      	movs	r3, #128	; 0x80
     de8:	01db      	lsls	r3, r3, #7
     dea:	429a      	cmp	r2, r3
     dec:	d021      	beq.n	e32 <usart_init+0xde>
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	01db      	lsls	r3, r3, #7
     df2:	429a      	cmp	r2, r3
     df4:	d804      	bhi.n	e00 <usart_init+0xac>
     df6:	2380      	movs	r3, #128	; 0x80
     df8:	019b      	lsls	r3, r3, #6
     dfa:	429a      	cmp	r2, r3
     dfc:	d011      	beq.n	e22 <usart_init+0xce>
     dfe:	e008      	b.n	e12 <usart_init+0xbe>
     e00:	23c0      	movs	r3, #192	; 0xc0
     e02:	01db      	lsls	r3, r3, #7
     e04:	9f02      	ldr	r7, [sp, #8]
     e06:	429f      	cmp	r7, r3
     e08:	d00f      	beq.n	e2a <usart_init+0xd6>
     e0a:	2380      	movs	r3, #128	; 0x80
     e0c:	021b      	lsls	r3, r3, #8
     e0e:	429f      	cmp	r7, r3
     e10:	d003      	beq.n	e1a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e12:	2710      	movs	r7, #16
     e14:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e16:	2700      	movs	r7, #0
     e18:	e00e      	b.n	e38 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e1a:	2703      	movs	r7, #3
     e1c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e1e:	2700      	movs	r7, #0
     e20:	e00a      	b.n	e38 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e22:	2710      	movs	r7, #16
     e24:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e26:	2701      	movs	r7, #1
     e28:	e006      	b.n	e38 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e2a:	2708      	movs	r7, #8
     e2c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e2e:	2701      	movs	r7, #1
     e30:	e002      	b.n	e38 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e32:	2708      	movs	r7, #8
     e34:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e36:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e38:	6831      	ldr	r1, [r6, #0]
     e3a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     e3c:	68f2      	ldr	r2, [r6, #12]
     e3e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e40:	6973      	ldr	r3, [r6, #20]
     e42:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e44:	7e31      	ldrb	r1, [r6, #24]
     e46:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e48:	2326      	movs	r3, #38	; 0x26
     e4a:	5cf3      	ldrb	r3, [r6, r3]
     e4c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     e4e:	6873      	ldr	r3, [r6, #4]
     e50:	2b00      	cmp	r3, #0
     e52:	d013      	beq.n	e7c <usart_init+0x128>
     e54:	2280      	movs	r2, #128	; 0x80
     e56:	0552      	lsls	r2, r2, #21
     e58:	4293      	cmp	r3, r2
     e5a:	d12e      	bne.n	eba <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e5c:	2327      	movs	r3, #39	; 0x27
     e5e:	5cf3      	ldrb	r3, [r6, r3]
     e60:	2b00      	cmp	r3, #0
     e62:	d12e      	bne.n	ec2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e64:	6a37      	ldr	r7, [r6, #32]
     e66:	b2c0      	uxtb	r0, r0
     e68:	4b73      	ldr	r3, [pc, #460]	; (1038 <usart_init+0x2e4>)
     e6a:	4798      	blx	r3
     e6c:	1c01      	adds	r1, r0, #0
     e6e:	1c38      	adds	r0, r7, #0
     e70:	466a      	mov	r2, sp
     e72:	3226      	adds	r2, #38	; 0x26
     e74:	4b71      	ldr	r3, [pc, #452]	; (103c <usart_init+0x2e8>)
     e76:	4798      	blx	r3
     e78:	1c03      	adds	r3, r0, #0
     e7a:	e01f      	b.n	ebc <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     e7c:	2327      	movs	r3, #39	; 0x27
     e7e:	5cf3      	ldrb	r3, [r6, r3]
     e80:	2b00      	cmp	r3, #0
     e82:	d00a      	beq.n	e9a <usart_init+0x146>
				status_code =
     e84:	9a06      	ldr	r2, [sp, #24]
     e86:	9200      	str	r2, [sp, #0]
     e88:	6a30      	ldr	r0, [r6, #32]
     e8a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e8c:	466a      	mov	r2, sp
     e8e:	3226      	adds	r2, #38	; 0x26
     e90:	1c3b      	adds	r3, r7, #0
     e92:	4f6b      	ldr	r7, [pc, #428]	; (1040 <usart_init+0x2ec>)
     e94:	47b8      	blx	r7
     e96:	1c03      	adds	r3, r0, #0
     e98:	e010      	b.n	ebc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     e9a:	6a31      	ldr	r1, [r6, #32]
     e9c:	9107      	str	r1, [sp, #28]
     e9e:	b2c0      	uxtb	r0, r0
     ea0:	4b65      	ldr	r3, [pc, #404]	; (1038 <usart_init+0x2e4>)
     ea2:	4798      	blx	r3
     ea4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     ea6:	9a06      	ldr	r2, [sp, #24]
     ea8:	9200      	str	r2, [sp, #0]
     eaa:	9807      	ldr	r0, [sp, #28]
     eac:	466a      	mov	r2, sp
     eae:	3226      	adds	r2, #38	; 0x26
     eb0:	1c3b      	adds	r3, r7, #0
     eb2:	4f63      	ldr	r7, [pc, #396]	; (1040 <usart_init+0x2ec>)
     eb4:	47b8      	blx	r7
     eb6:	1c03      	adds	r3, r0, #0
     eb8:	e000      	b.n	ebc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     eba:	2300      	movs	r3, #0
     ebc:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     ebe:	d000      	beq.n	ec2 <usart_init+0x16e>
     ec0:	e0a8      	b.n	1014 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     ec2:	7e73      	ldrb	r3, [r6, #25]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d002      	beq.n	ece <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ec8:	7eb3      	ldrb	r3, [r6, #26]
     eca:	4641      	mov	r1, r8
     ecc:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ece:	682a      	ldr	r2, [r5, #0]
     ed0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ed2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ed4:	2b00      	cmp	r3, #0
     ed6:	d1fc      	bne.n	ed2 <usart_init+0x17e>
     ed8:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eda:	466b      	mov	r3, sp
     edc:	3326      	adds	r3, #38	; 0x26
     ede:	881b      	ldrh	r3, [r3, #0]
     ee0:	4642      	mov	r2, r8
     ee2:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ee4:	464b      	mov	r3, r9
     ee6:	9f03      	ldr	r7, [sp, #12]
     ee8:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     eea:	9f04      	ldr	r7, [sp, #16]
     eec:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     eee:	6871      	ldr	r1, [r6, #4]
     ef0:	430b      	orrs	r3, r1
		config->sample_rate |
     ef2:	9f02      	ldr	r7, [sp, #8]
     ef4:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ef6:	4652      	mov	r2, sl
     ef8:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     efa:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     efc:	4659      	mov	r1, fp
     efe:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     f00:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     f02:	2327      	movs	r3, #39	; 0x27
     f04:	5cf3      	ldrb	r3, [r6, r3]
     f06:	2b00      	cmp	r3, #0
     f08:	d101      	bne.n	f0e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f0a:	2304      	movs	r3, #4
     f0c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f0e:	7e71      	ldrb	r1, [r6, #25]
     f10:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f12:	7f33      	ldrb	r3, [r6, #28]
     f14:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     f16:	4319      	orrs	r1, r3
     f18:	7af2      	ldrb	r2, [r6, #11]
     f1a:	7ab3      	ldrb	r3, [r6, #10]
     f1c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f1e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f20:	7f73      	ldrb	r3, [r6, #29]
     f22:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f24:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f26:	2324      	movs	r3, #36	; 0x24
     f28:	5cf3      	ldrb	r3, [r6, r3]
     f2a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f2c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f2e:	2325      	movs	r3, #37	; 0x25
     f30:	5cf3      	ldrb	r3, [r6, r3]
     f32:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     f34:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f36:	8933      	ldrh	r3, [r6, #8]
     f38:	2bff      	cmp	r3, #255	; 0xff
     f3a:	d00b      	beq.n	f54 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f3c:	7ef2      	ldrb	r2, [r6, #27]
     f3e:	2a00      	cmp	r2, #0
     f40:	d003      	beq.n	f4a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     f42:	22a0      	movs	r2, #160	; 0xa0
     f44:	04d2      	lsls	r2, r2, #19
     f46:	4317      	orrs	r7, r2
     f48:	e002      	b.n	f50 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f4a:	2280      	movs	r2, #128	; 0x80
     f4c:	0452      	lsls	r2, r2, #17
     f4e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     f50:	4319      	orrs	r1, r3
     f52:	e005      	b.n	f60 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f54:	7ef3      	ldrb	r3, [r6, #27]
     f56:	2b00      	cmp	r3, #0
     f58:	d002      	beq.n	f60 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	04db      	lsls	r3, r3, #19
     f5e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f60:	232c      	movs	r3, #44	; 0x2c
     f62:	5cf3      	ldrb	r3, [r6, r3]
     f64:	2b00      	cmp	r3, #0
     f66:	d103      	bne.n	f70 <usart_init+0x21c>
     f68:	4b36      	ldr	r3, [pc, #216]	; (1044 <usart_init+0x2f0>)
     f6a:	789b      	ldrb	r3, [r3, #2]
     f6c:	079a      	lsls	r2, r3, #30
     f6e:	d501      	bpl.n	f74 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f70:	2380      	movs	r3, #128	; 0x80
     f72:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f74:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f76:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f78:	2b00      	cmp	r3, #0
     f7a:	d1fc      	bne.n	f76 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f7c:	4643      	mov	r3, r8
     f7e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f80:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f82:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f84:	2b00      	cmp	r3, #0
     f86:	d1fc      	bne.n	f82 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f88:	4641      	mov	r1, r8
     f8a:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f8c:	ab0e      	add	r3, sp, #56	; 0x38
     f8e:	2280      	movs	r2, #128	; 0x80
     f90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f92:	2200      	movs	r2, #0
     f94:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f96:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f98:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     f9a:	6b32      	ldr	r2, [r6, #48]	; 0x30
     f9c:	920a      	str	r2, [sp, #40]	; 0x28
     f9e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     fa0:	930b      	str	r3, [sp, #44]	; 0x2c
     fa2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     fa4:	970c      	str	r7, [sp, #48]	; 0x30
     fa6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     fa8:	960d      	str	r6, [sp, #52]	; 0x34
     faa:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fac:	ae0e      	add	r6, sp, #56	; 0x38
     fae:	b2f9      	uxtb	r1, r7
     fb0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fb2:	aa0a      	add	r2, sp, #40	; 0x28
     fb4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     fb6:	2800      	cmp	r0, #0
     fb8:	d102      	bne.n	fc0 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fba:	1c20      	adds	r0, r4, #0
     fbc:	4a22      	ldr	r2, [pc, #136]	; (1048 <usart_init+0x2f4>)
     fbe:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     fc0:	1c43      	adds	r3, r0, #1
     fc2:	d005      	beq.n	fd0 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fc4:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fc6:	0c00      	lsrs	r0, r0, #16
     fc8:	b2c0      	uxtb	r0, r0
     fca:	1c31      	adds	r1, r6, #0
     fcc:	4a1f      	ldr	r2, [pc, #124]	; (104c <usart_init+0x2f8>)
     fce:	4790      	blx	r2
     fd0:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fd2:	2f04      	cmp	r7, #4
     fd4:	d1eb      	bne.n	fae <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     fd6:	2300      	movs	r3, #0
     fd8:	60eb      	str	r3, [r5, #12]
     fda:	612b      	str	r3, [r5, #16]
     fdc:	616b      	str	r3, [r5, #20]
     fde:	61ab      	str	r3, [r5, #24]
     fe0:	61eb      	str	r3, [r5, #28]
     fe2:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     fe4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fe6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fe8:	2200      	movs	r2, #0
     fea:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fec:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fee:	2330      	movs	r3, #48	; 0x30
     ff0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ff2:	2331      	movs	r3, #49	; 0x31
     ff4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ff6:	2332      	movs	r3, #50	; 0x32
     ff8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ffa:	2333      	movs	r3, #51	; 0x33
     ffc:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ffe:	6828      	ldr	r0, [r5, #0]
    1000:	4b08      	ldr	r3, [pc, #32]	; (1024 <usart_init+0x2d0>)
    1002:	4798      	blx	r3
    1004:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1006:	4912      	ldr	r1, [pc, #72]	; (1050 <usart_init+0x2fc>)
    1008:	4b12      	ldr	r3, [pc, #72]	; (1054 <usart_init+0x300>)
    100a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    100c:	00a4      	lsls	r4, r4, #2
    100e:	4b12      	ldr	r3, [pc, #72]	; (1058 <usart_init+0x304>)
    1010:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1012:	2000      	movs	r0, #0
}
    1014:	b011      	add	sp, #68	; 0x44
    1016:	bc3c      	pop	{r2, r3, r4, r5}
    1018:	4690      	mov	r8, r2
    101a:	4699      	mov	r9, r3
    101c:	46a2      	mov	sl, r4
    101e:	46ab      	mov	fp, r5
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	000008d1 	.word	0x000008d1
    1028:	40000400 	.word	0x40000400
    102c:	00001b01 	.word	0x00001b01
    1030:	00001a75 	.word	0x00001a75
    1034:	000006f9 	.word	0x000006f9
    1038:	00001b1d 	.word	0x00001b1d
    103c:	0000051d 	.word	0x0000051d
    1040:	00000549 	.word	0x00000549
    1044:	41002000 	.word	0x41002000
    1048:	00000749 	.word	0x00000749
    104c:	00001bdd 	.word	0x00001bdd
    1050:	0000125d 	.word	0x0000125d
    1054:	00000911 	.word	0x00000911
    1058:	20000e84 	.word	0x20000e84

0000105c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    105c:	b510      	push	{r4, lr}
    105e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1060:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1062:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1064:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1066:	2c00      	cmp	r4, #0
    1068:	d00d      	beq.n	1086 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    106a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    106c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    106e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1070:	2a00      	cmp	r2, #0
    1072:	d108      	bne.n	1086 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1074:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1076:	2a00      	cmp	r2, #0
    1078:	d1fc      	bne.n	1074 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    107a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    107c:	2102      	movs	r1, #2
    107e:	7e1a      	ldrb	r2, [r3, #24]
    1080:	420a      	tst	r2, r1
    1082:	d0fc      	beq.n	107e <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1084:	2000      	movs	r0, #0
}
    1086:	bd10      	pop	{r4, pc}

00001088 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1088:	b510      	push	{r4, lr}
    108a:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    108c:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    108e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1090:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1092:	2a00      	cmp	r2, #0
    1094:	d033      	beq.n	10fe <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1096:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1098:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    109a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    109c:	2b00      	cmp	r3, #0
    109e:	d12e      	bne.n	10fe <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10a0:	7e23      	ldrb	r3, [r4, #24]
    10a2:	075a      	lsls	r2, r3, #29
    10a4:	d52b      	bpl.n	10fe <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10a6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    10a8:	2b00      	cmp	r3, #0
    10aa:	d1fc      	bne.n	10a6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10ac:	8b63      	ldrh	r3, [r4, #26]
    10ae:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    10b0:	069a      	lsls	r2, r3, #26
    10b2:	d021      	beq.n	10f8 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10b4:	079a      	lsls	r2, r3, #30
    10b6:	d503      	bpl.n	10c0 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10b8:	2302      	movs	r3, #2
    10ba:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    10bc:	201a      	movs	r0, #26
    10be:	e01e      	b.n	10fe <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10c0:	075a      	lsls	r2, r3, #29
    10c2:	d503      	bpl.n	10cc <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10c4:	2304      	movs	r3, #4
    10c6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    10c8:	201e      	movs	r0, #30
    10ca:	e018      	b.n	10fe <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10cc:	07da      	lsls	r2, r3, #31
    10ce:	d503      	bpl.n	10d8 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10d0:	2301      	movs	r3, #1
    10d2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    10d4:	2013      	movs	r0, #19
    10d6:	e012      	b.n	10fe <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10d8:	06da      	lsls	r2, r3, #27
    10da:	d505      	bpl.n	10e8 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    10dc:	8b62      	ldrh	r2, [r4, #26]
    10de:	2310      	movs	r3, #16
    10e0:	4313      	orrs	r3, r2
    10e2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    10e4:	2042      	movs	r0, #66	; 0x42
    10e6:	e00a      	b.n	10fe <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10e8:	069a      	lsls	r2, r3, #26
    10ea:	d505      	bpl.n	10f8 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    10ec:	8b62      	ldrh	r2, [r4, #26]
    10ee:	2320      	movs	r3, #32
    10f0:	4313      	orrs	r3, r2
    10f2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    10f4:	2041      	movs	r0, #65	; 0x41
    10f6:	e002      	b.n	10fe <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    10f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    10fa:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    10fc:	2000      	movs	r0, #0
}
    10fe:	bd10      	pop	{r4, pc}

00001100 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1100:	b5f0      	push	{r4, r5, r6, r7, lr}
    1102:	4657      	mov	r7, sl
    1104:	464e      	mov	r6, r9
    1106:	4645      	mov	r5, r8
    1108:	b4e0      	push	{r5, r6, r7}
    110a:	1c06      	adds	r6, r0, #0
    110c:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    110e:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    1110:	2a00      	cmp	r2, #0
    1112:	d04a      	beq.n	11aa <usart_write_buffer_wait+0xaa>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1114:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
    1116:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1118:	2b00      	cmp	r3, #0
    111a:	d046      	beq.n	11aa <usart_write_buffer_wait+0xaa>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    111c:	6834      	ldr	r4, [r6, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    111e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1120:	2b00      	cmp	r3, #0
    1122:	d1fc      	bne.n	111e <usart_write_buffer_wait+0x1e>
    1124:	4692      	mov	sl, r2
    1126:	2700      	movs	r7, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1128:	2501      	movs	r5, #1
    112a:	4a22      	ldr	r2, [pc, #136]	; (11b4 <usart_write_buffer_wait+0xb4>)
    112c:	4691      	mov	r9, r2
    112e:	e01f      	b.n	1170 <usart_write_buffer_wait+0x70>
    1130:	7e22      	ldrb	r2, [r4, #24]
    1132:	422a      	tst	r2, r5
    1134:	d104      	bne.n	1140 <usart_write_buffer_wait+0x40>
				break;
			} else if (i == USART_TIMEOUT) {
    1136:	2b01      	cmp	r3, #1
    1138:	d029      	beq.n	118e <usart_write_buffer_wait+0x8e>
    113a:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    113c:	2b00      	cmp	r3, #0
    113e:	d1f7      	bne.n	1130 <usart_write_buffer_wait+0x30>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1140:	1c7b      	adds	r3, r7, #1
    1142:	b29b      	uxth	r3, r3
    1144:	4642      	mov	r2, r8
    1146:	5dd1      	ldrb	r1, [r2, r7]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1148:	7972      	ldrb	r2, [r6, #5]
    114a:	2a01      	cmp	r2, #1
    114c:	d001      	beq.n	1152 <usart_write_buffer_wait+0x52>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    114e:	1c1f      	adds	r7, r3, #0
    1150:	e005      	b.n	115e <usart_write_buffer_wait+0x5e>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1152:	1cba      	adds	r2, r7, #2
    1154:	b297      	uxth	r7, r2
    1156:	4642      	mov	r2, r8
    1158:	5cd3      	ldrb	r3, [r2, r3]
    115a:	021b      	lsls	r3, r3, #8
    115c:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    115e:	1c30      	adds	r0, r6, #0
    1160:	4b15      	ldr	r3, [pc, #84]	; (11b8 <usart_write_buffer_wait+0xb8>)
    1162:	4798      	blx	r3
    1164:	4653      	mov	r3, sl
    1166:	3b01      	subs	r3, #1
    1168:	b29b      	uxth	r3, r3
    116a:	469a      	mov	sl, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    116c:	2b00      	cmp	r3, #0
    116e:	d016      	beq.n	119e <usart_write_buffer_wait+0x9e>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1170:	7e23      	ldrb	r3, [r4, #24]
    1172:	422b      	tst	r3, r5
    1174:	d1e4      	bne.n	1140 <usart_write_buffer_wait+0x40>
    1176:	464b      	mov	r3, r9
    1178:	e7da      	b.n	1130 <usart_write_buffer_wait+0x30>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    117a:	7e22      	ldrb	r2, [r4, #24]
    117c:	420a      	tst	r2, r1
    117e:	d108      	bne.n	1192 <usart_write_buffer_wait+0x92>
			break;
		} else if (i == USART_TIMEOUT) {
    1180:	2b01      	cmp	r3, #1
    1182:	d008      	beq.n	1196 <usart_write_buffer_wait+0x96>
    1184:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1186:	2b00      	cmp	r3, #0
    1188:	d1f7      	bne.n	117a <usart_write_buffer_wait+0x7a>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    118a:	2000      	movs	r0, #0
    118c:	e00d      	b.n	11aa <usart_write_buffer_wait+0xaa>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    118e:	2012      	movs	r0, #18
    1190:	e00b      	b.n	11aa <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    1192:	2000      	movs	r0, #0
    1194:	e009      	b.n	11aa <usart_write_buffer_wait+0xaa>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    1196:	2012      	movs	r0, #18
    1198:	e007      	b.n	11aa <usart_write_buffer_wait+0xaa>
		}
	}

	return STATUS_OK;
    119a:	2000      	movs	r0, #0
    119c:	e005      	b.n	11aa <usart_write_buffer_wait+0xaa>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    119e:	7e23      	ldrb	r3, [r4, #24]
    11a0:	079a      	lsls	r2, r3, #30
    11a2:	d4fa      	bmi.n	119a <usart_write_buffer_wait+0x9a>
    11a4:	4b03      	ldr	r3, [pc, #12]	; (11b4 <usart_write_buffer_wait+0xb4>)
    11a6:	2102      	movs	r1, #2
    11a8:	e7e7      	b.n	117a <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    11aa:	bc1c      	pop	{r2, r3, r4}
    11ac:	4690      	mov	r8, r2
    11ae:	4699      	mov	r9, r3
    11b0:	46a2      	mov	sl, r4
    11b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11b4:	0000ffff 	.word	0x0000ffff
    11b8:	0000105d 	.word	0x0000105d

000011bc <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    11bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11be:	4657      	mov	r7, sl
    11c0:	464e      	mov	r6, r9
    11c2:	4645      	mov	r5, r8
    11c4:	b4e0      	push	{r5, r6, r7}
    11c6:	b082      	sub	sp, #8
    11c8:	1c06      	adds	r6, r0, #0
    11ca:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11cc:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    11ce:	2a00      	cmp	r2, #0
    11d0:	d039      	beq.n	1246 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    11d2:	79b3      	ldrb	r3, [r6, #6]
		return STATUS_ERR_DENIED;
    11d4:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    11d6:	2b00      	cmp	r3, #0
    11d8:	d035      	beq.n	1246 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    11da:	6835      	ldr	r5, [r6, #0]
    11dc:	4692      	mov	sl, r2

	uint16_t rx_pos = 0;
    11de:	2700      	movs	r7, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    11e0:	2404      	movs	r4, #4
    11e2:	481c      	ldr	r0, [pc, #112]	; (1254 <usart_read_buffer_wait+0x98>)
    11e4:	4681      	mov	r9, r0
    11e6:	e029      	b.n	123c <usart_read_buffer_wait+0x80>
    11e8:	7e2a      	ldrb	r2, [r5, #24]
    11ea:	4222      	tst	r2, r4
    11ec:	d104      	bne.n	11f8 <usart_read_buffer_wait+0x3c>
				break;
			} else if (i == USART_TIMEOUT) {
    11ee:	2b01      	cmp	r3, #1
    11f0:	d021      	beq.n	1236 <usart_read_buffer_wait+0x7a>
    11f2:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    11f4:	2b00      	cmp	r3, #0
    11f6:	d1f7      	bne.n	11e8 <usart_read_buffer_wait+0x2c>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    11f8:	4669      	mov	r1, sp
    11fa:	3106      	adds	r1, #6
    11fc:	2300      	movs	r3, #0
    11fe:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
    1200:	1c30      	adds	r0, r6, #0
    1202:	4a15      	ldr	r2, [pc, #84]	; (1258 <usart_read_buffer_wait+0x9c>)
    1204:	4790      	blx	r2

		if (retval != STATUS_OK) {
    1206:	2800      	cmp	r0, #0
    1208:	d11d      	bne.n	1246 <usart_read_buffer_wait+0x8a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    120a:	1c7b      	adds	r3, r7, #1
    120c:	b29b      	uxth	r3, r3
    120e:	466a      	mov	r2, sp
    1210:	3206      	adds	r2, #6
    1212:	8812      	ldrh	r2, [r2, #0]
    1214:	4640      	mov	r0, r8
    1216:	55c2      	strb	r2, [r0, r7]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1218:	7971      	ldrb	r1, [r6, #5]
    121a:	2901      	cmp	r1, #1
    121c:	d103      	bne.n	1226 <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
    121e:	1cb9      	adds	r1, r7, #2
    1220:	0a12      	lsrs	r2, r2, #8
    1222:	54c2      	strb	r2, [r0, r3]
    1224:	b28b      	uxth	r3, r1
    1226:	4652      	mov	r2, sl
    1228:	3a01      	subs	r2, #1
    122a:	b292      	uxth	r2, r2
    122c:	4692      	mov	sl, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    122e:	2a00      	cmp	r2, #0
    1230:	d103      	bne.n	123a <usart_read_buffer_wait+0x7e>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1232:	2000      	movs	r0, #0
    1234:	e007      	b.n	1246 <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1236:	2012      	movs	r0, #18
    1238:	e005      	b.n	1246 <usart_read_buffer_wait+0x8a>
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    123a:	1c1f      	adds	r7, r3, #0
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    123c:	7e2b      	ldrb	r3, [r5, #24]
    123e:	4223      	tst	r3, r4
    1240:	d1da      	bne.n	11f8 <usart_read_buffer_wait+0x3c>
    1242:	464b      	mov	r3, r9
    1244:	e7d0      	b.n	11e8 <usart_read_buffer_wait+0x2c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1246:	b002      	add	sp, #8
    1248:	bc1c      	pop	{r2, r3, r4}
    124a:	4690      	mov	r8, r2
    124c:	4699      	mov	r9, r3
    124e:	46a2      	mov	sl, r4
    1250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	0000ffff 	.word	0x0000ffff
    1258:	00001089 	.word	0x00001089

0000125c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    125e:	0080      	lsls	r0, r0, #2
    1260:	4b64      	ldr	r3, [pc, #400]	; (13f4 <_usart_interrupt_handler+0x198>)
    1262:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1264:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1266:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1268:	2b00      	cmp	r3, #0
    126a:	d1fc      	bne.n	1266 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    126c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    126e:	7da6      	ldrb	r6, [r4, #22]
    1270:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1272:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1274:	5ceb      	ldrb	r3, [r5, r3]
    1276:	2230      	movs	r2, #48	; 0x30
    1278:	5caf      	ldrb	r7, [r5, r2]
    127a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    127c:	07f1      	lsls	r1, r6, #31
    127e:	d520      	bpl.n	12c2 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    1280:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1282:	b29b      	uxth	r3, r3
    1284:	2b00      	cmp	r3, #0
    1286:	d01a      	beq.n	12be <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1288:	6aab      	ldr	r3, [r5, #40]	; 0x28
    128a:	781a      	ldrb	r2, [r3, #0]
    128c:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    128e:	1c59      	adds	r1, r3, #1
    1290:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1292:	7969      	ldrb	r1, [r5, #5]
    1294:	2901      	cmp	r1, #1
    1296:	d104      	bne.n	12a2 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1298:	7859      	ldrb	r1, [r3, #1]
    129a:	0209      	lsls	r1, r1, #8
    129c:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    129e:	3302      	adds	r3, #2
    12a0:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    12a2:	05d3      	lsls	r3, r2, #23
    12a4:	0ddb      	lsrs	r3, r3, #23
    12a6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    12a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12aa:	3b01      	subs	r3, #1
    12ac:	b29b      	uxth	r3, r3
    12ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
    12b0:	2b00      	cmp	r3, #0
    12b2:	d106      	bne.n	12c2 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12b4:	2301      	movs	r3, #1
    12b6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    12b8:	2302      	movs	r3, #2
    12ba:	75a3      	strb	r3, [r4, #22]
    12bc:	e001      	b.n	12c2 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12be:	2301      	movs	r3, #1
    12c0:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12c2:	07b2      	lsls	r2, r6, #30
    12c4:	d509      	bpl.n	12da <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12c6:	2302      	movs	r3, #2
    12c8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    12ca:	2200      	movs	r2, #0
    12cc:	2333      	movs	r3, #51	; 0x33
    12ce:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12d0:	07fb      	lsls	r3, r7, #31
    12d2:	d502      	bpl.n	12da <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12d4:	1c28      	adds	r0, r5, #0
    12d6:	68e9      	ldr	r1, [r5, #12]
    12d8:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12da:	0772      	lsls	r2, r6, #29
    12dc:	d56a      	bpl.n	13b4 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    12de:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12e0:	b29b      	uxth	r3, r3
    12e2:	2b00      	cmp	r3, #0
    12e4:	d064      	beq.n	13b0 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12e6:	8b63      	ldrh	r3, [r4, #26]
    12e8:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12ea:	0719      	lsls	r1, r3, #28
    12ec:	d402      	bmi.n	12f4 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12ee:	223f      	movs	r2, #63	; 0x3f
    12f0:	4013      	ands	r3, r2
    12f2:	e001      	b.n	12f8 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12f4:	2237      	movs	r2, #55	; 0x37
    12f6:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12f8:	2b00      	cmp	r3, #0
    12fa:	d037      	beq.n	136c <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12fc:	079a      	lsls	r2, r3, #30
    12fe:	d507      	bpl.n	1310 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1300:	221a      	movs	r2, #26
    1302:	2332      	movs	r3, #50	; 0x32
    1304:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1306:	8b62      	ldrh	r2, [r4, #26]
    1308:	2302      	movs	r3, #2
    130a:	4313      	orrs	r3, r2
    130c:	8363      	strh	r3, [r4, #26]
    130e:	e027      	b.n	1360 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1310:	0759      	lsls	r1, r3, #29
    1312:	d507      	bpl.n	1324 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1314:	221e      	movs	r2, #30
    1316:	2332      	movs	r3, #50	; 0x32
    1318:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    131a:	8b62      	ldrh	r2, [r4, #26]
    131c:	2304      	movs	r3, #4
    131e:	4313      	orrs	r3, r2
    1320:	8363      	strh	r3, [r4, #26]
    1322:	e01d      	b.n	1360 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1324:	07da      	lsls	r2, r3, #31
    1326:	d507      	bpl.n	1338 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1328:	2213      	movs	r2, #19
    132a:	2332      	movs	r3, #50	; 0x32
    132c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    132e:	8b62      	ldrh	r2, [r4, #26]
    1330:	2301      	movs	r3, #1
    1332:	4313      	orrs	r3, r2
    1334:	8363      	strh	r3, [r4, #26]
    1336:	e013      	b.n	1360 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1338:	06d9      	lsls	r1, r3, #27
    133a:	d507      	bpl.n	134c <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    133c:	2242      	movs	r2, #66	; 0x42
    133e:	2332      	movs	r3, #50	; 0x32
    1340:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1342:	8b62      	ldrh	r2, [r4, #26]
    1344:	2310      	movs	r3, #16
    1346:	4313      	orrs	r3, r2
    1348:	8363      	strh	r3, [r4, #26]
    134a:	e009      	b.n	1360 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    134c:	2220      	movs	r2, #32
    134e:	421a      	tst	r2, r3
    1350:	d006      	beq.n	1360 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1352:	2241      	movs	r2, #65	; 0x41
    1354:	2332      	movs	r3, #50	; 0x32
    1356:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1358:	8b62      	ldrh	r2, [r4, #26]
    135a:	2320      	movs	r3, #32
    135c:	4313      	orrs	r3, r2
    135e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1360:	077a      	lsls	r2, r7, #29
    1362:	d527      	bpl.n	13b4 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1364:	1c28      	adds	r0, r5, #0
    1366:	696b      	ldr	r3, [r5, #20]
    1368:	4798      	blx	r3
    136a:	e023      	b.n	13b4 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    136c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    136e:	05d2      	lsls	r2, r2, #23
    1370:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1372:	b2d3      	uxtb	r3, r2
    1374:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1376:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1378:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    137a:	1c59      	adds	r1, r3, #1
    137c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    137e:	7969      	ldrb	r1, [r5, #5]
    1380:	2901      	cmp	r1, #1
    1382:	d104      	bne.n	138e <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1384:	0a12      	lsrs	r2, r2, #8
    1386:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1388:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    138a:	3301      	adds	r3, #1
    138c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    138e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1390:	3b01      	subs	r3, #1
    1392:	b29b      	uxth	r3, r3
    1394:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1396:	2b00      	cmp	r3, #0
    1398:	d10c      	bne.n	13b4 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    139a:	2304      	movs	r3, #4
    139c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    139e:	2200      	movs	r2, #0
    13a0:	2332      	movs	r3, #50	; 0x32
    13a2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    13a4:	07ba      	lsls	r2, r7, #30
    13a6:	d505      	bpl.n	13b4 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    13a8:	1c28      	adds	r0, r5, #0
    13aa:	692b      	ldr	r3, [r5, #16]
    13ac:	4798      	blx	r3
    13ae:	e001      	b.n	13b4 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13b0:	2304      	movs	r3, #4
    13b2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    13b4:	06f1      	lsls	r1, r6, #27
    13b6:	d507      	bpl.n	13c8 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    13b8:	2310      	movs	r3, #16
    13ba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    13bc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    13be:	06fa      	lsls	r2, r7, #27
    13c0:	d502      	bpl.n	13c8 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13c2:	1c28      	adds	r0, r5, #0
    13c4:	69eb      	ldr	r3, [r5, #28]
    13c6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    13c8:	06b1      	lsls	r1, r6, #26
    13ca:	d507      	bpl.n	13dc <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    13cc:	2320      	movs	r3, #32
    13ce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    13d0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    13d2:	073a      	lsls	r2, r7, #28
    13d4:	d502      	bpl.n	13dc <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13d6:	1c28      	adds	r0, r5, #0
    13d8:	69ab      	ldr	r3, [r5, #24]
    13da:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    13dc:	0731      	lsls	r1, r6, #28
    13de:	d507      	bpl.n	13f0 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    13e0:	2308      	movs	r3, #8
    13e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    13e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    13e6:	06ba      	lsls	r2, r7, #26
    13e8:	d502      	bpl.n	13f0 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13ea:	6a2b      	ldr	r3, [r5, #32]
    13ec:	1c28      	adds	r0, r5, #0
    13ee:	4798      	blx	r3
		}
	}
#endif
}
    13f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	20000e84 	.word	0x20000e84

000013f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13f8:	b508      	push	{r3, lr}
	switch (clock_source) {
    13fa:	2808      	cmp	r0, #8
    13fc:	d834      	bhi.n	1468 <system_clock_source_get_hz+0x70>
    13fe:	0080      	lsls	r0, r0, #2
    1400:	4b1b      	ldr	r3, [pc, #108]	; (1470 <system_clock_source_get_hz+0x78>)
    1402:	581b      	ldr	r3, [r3, r0]
    1404:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1406:	2080      	movs	r0, #128	; 0x80
    1408:	0200      	lsls	r0, r0, #8
    140a:	e030      	b.n	146e <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    140c:	4b19      	ldr	r3, [pc, #100]	; (1474 <system_clock_source_get_hz+0x7c>)
    140e:	6918      	ldr	r0, [r3, #16]
    1410:	e02d      	b.n	146e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1412:	4b19      	ldr	r3, [pc, #100]	; (1478 <system_clock_source_get_hz+0x80>)
    1414:	6a18      	ldr	r0, [r3, #32]
    1416:	0580      	lsls	r0, r0, #22
    1418:	0f80      	lsrs	r0, r0, #30
    141a:	4b18      	ldr	r3, [pc, #96]	; (147c <system_clock_source_get_hz+0x84>)
    141c:	40c3      	lsrs	r3, r0
    141e:	1c18      	adds	r0, r3, #0
    1420:	e025      	b.n	146e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1422:	4b14      	ldr	r3, [pc, #80]	; (1474 <system_clock_source_get_hz+0x7c>)
    1424:	6958      	ldr	r0, [r3, #20]
    1426:	e022      	b.n	146e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1428:	4b12      	ldr	r3, [pc, #72]	; (1474 <system_clock_source_get_hz+0x7c>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	2002      	movs	r0, #2
    142e:	4018      	ands	r0, r3
    1430:	d01d      	beq.n	146e <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1432:	4911      	ldr	r1, [pc, #68]	; (1478 <system_clock_source_get_hz+0x80>)
    1434:	2210      	movs	r2, #16
    1436:	68cb      	ldr	r3, [r1, #12]
    1438:	421a      	tst	r2, r3
    143a:	d0fc      	beq.n	1436 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    143c:	4b0d      	ldr	r3, [pc, #52]	; (1474 <system_clock_source_get_hz+0x7c>)
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	075a      	lsls	r2, r3, #29
    1442:	d513      	bpl.n	146c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1444:	2000      	movs	r0, #0
    1446:	4b0e      	ldr	r3, [pc, #56]	; (1480 <system_clock_source_get_hz+0x88>)
    1448:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    144a:	4b0a      	ldr	r3, [pc, #40]	; (1474 <system_clock_source_get_hz+0x7c>)
    144c:	689b      	ldr	r3, [r3, #8]
    144e:	041b      	lsls	r3, r3, #16
    1450:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1452:	4358      	muls	r0, r3
    1454:	e00b      	b.n	146e <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1456:	2350      	movs	r3, #80	; 0x50
    1458:	4a07      	ldr	r2, [pc, #28]	; (1478 <system_clock_source_get_hz+0x80>)
    145a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    145c:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    145e:	075a      	lsls	r2, r3, #29
    1460:	d505      	bpl.n	146e <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1462:	4b04      	ldr	r3, [pc, #16]	; (1474 <system_clock_source_get_hz+0x7c>)
    1464:	68d8      	ldr	r0, [r3, #12]
    1466:	e002      	b.n	146e <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1468:	2000      	movs	r0, #0
    146a:	e000      	b.n	146e <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    146c:	4805      	ldr	r0, [pc, #20]	; (1484 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    146e:	bd08      	pop	{r3, pc}
    1470:	00006050 	.word	0x00006050
    1474:	200000b4 	.word	0x200000b4
    1478:	40000800 	.word	0x40000800
    147c:	007a1200 	.word	0x007a1200
    1480:	00001b1d 	.word	0x00001b1d
    1484:	02dc6c00 	.word	0x02dc6c00

00001488 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1488:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    148a:	4b0c      	ldr	r3, [pc, #48]	; (14bc <system_clock_source_osc8m_set_config+0x34>)
    148c:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    148e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1490:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1492:	7840      	ldrb	r0, [r0, #1]
    1494:	2201      	movs	r2, #1
    1496:	4010      	ands	r0, r2
    1498:	0180      	lsls	r0, r0, #6
    149a:	2640      	movs	r6, #64	; 0x40
    149c:	43b4      	bics	r4, r6
    149e:	4304      	orrs	r4, r0
    14a0:	402a      	ands	r2, r5
    14a2:	01d0      	lsls	r0, r2, #7
    14a4:	2280      	movs	r2, #128	; 0x80
    14a6:	4394      	bics	r4, r2
    14a8:	1c22      	adds	r2, r4, #0
    14aa:	4302      	orrs	r2, r0
    14ac:	2003      	movs	r0, #3
    14ae:	4001      	ands	r1, r0
    14b0:	0209      	lsls	r1, r1, #8
    14b2:	4803      	ldr	r0, [pc, #12]	; (14c0 <system_clock_source_osc8m_set_config+0x38>)
    14b4:	4002      	ands	r2, r0
    14b6:	430a      	orrs	r2, r1
    14b8:	621a      	str	r2, [r3, #32]
}
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	40000800 	.word	0x40000800
    14c0:	fffffcff 	.word	0xfffffcff

000014c4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    14c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c6:	464f      	mov	r7, r9
    14c8:	4646      	mov	r6, r8
    14ca:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    14cc:	4a19      	ldr	r2, [pc, #100]	; (1534 <system_clock_source_osc32k_set_config+0x70>)
    14ce:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    14d0:	7841      	ldrb	r1, [r0, #1]
    14d2:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    14d4:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    14d6:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14d8:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    14da:	7943      	ldrb	r3, [r0, #5]
    14dc:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    14de:	7880      	ldrb	r0, [r0, #2]
    14e0:	2301      	movs	r3, #1
    14e2:	4018      	ands	r0, r3
    14e4:	0080      	lsls	r0, r0, #2
    14e6:	2104      	movs	r1, #4
    14e8:	438c      	bics	r4, r1
    14ea:	4304      	orrs	r4, r0
    14ec:	4660      	mov	r0, ip
    14ee:	4018      	ands	r0, r3
    14f0:	00c0      	lsls	r0, r0, #3
    14f2:	2108      	movs	r1, #8
    14f4:	438c      	bics	r4, r1
    14f6:	4304      	orrs	r4, r0
    14f8:	1c18      	adds	r0, r3, #0
    14fa:	4038      	ands	r0, r7
    14fc:	0180      	lsls	r0, r0, #6
    14fe:	2740      	movs	r7, #64	; 0x40
    1500:	43bc      	bics	r4, r7
    1502:	4304      	orrs	r4, r0
    1504:	1c18      	adds	r0, r3, #0
    1506:	4030      	ands	r0, r6
    1508:	01c0      	lsls	r0, r0, #7
    150a:	2680      	movs	r6, #128	; 0x80
    150c:	43b4      	bics	r4, r6
    150e:	4304      	orrs	r4, r0
    1510:	2007      	movs	r0, #7
    1512:	4028      	ands	r0, r5
    1514:	0200      	lsls	r0, r0, #8
    1516:	4d08      	ldr	r5, [pc, #32]	; (1538 <system_clock_source_osc32k_set_config+0x74>)
    1518:	402c      	ands	r4, r5
    151a:	4304      	orrs	r4, r0
    151c:	4649      	mov	r1, r9
    151e:	400b      	ands	r3, r1
    1520:	0319      	lsls	r1, r3, #12
    1522:	4806      	ldr	r0, [pc, #24]	; (153c <system_clock_source_osc32k_set_config+0x78>)
    1524:	1c23      	adds	r3, r4, #0
    1526:	4003      	ands	r3, r0
    1528:	430b      	orrs	r3, r1
    152a:	6193      	str	r3, [r2, #24]
}
    152c:	bc0c      	pop	{r2, r3}
    152e:	4690      	mov	r8, r2
    1530:	4699      	mov	r9, r3
    1532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1534:	40000800 	.word	0x40000800
    1538:	fffff8ff 	.word	0xfffff8ff
    153c:	ffffefff 	.word	0xffffefff

00001540 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1540:	b5f0      	push	{r4, r5, r6, r7, lr}
    1542:	465f      	mov	r7, fp
    1544:	4656      	mov	r6, sl
    1546:	464d      	mov	r5, r9
    1548:	4644      	mov	r4, r8
    154a:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    154c:	4a25      	ldr	r2, [pc, #148]	; (15e4 <system_clock_source_xosc32k_set_config+0xa4>)
    154e:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    1550:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1552:	7803      	ldrb	r3, [r0, #0]
    1554:	4259      	negs	r1, r3
    1556:	4159      	adcs	r1, r3
    1558:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    155a:	7883      	ldrb	r3, [r0, #2]
    155c:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    155e:	78c1      	ldrb	r1, [r0, #3]
    1560:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1562:	7903      	ldrb	r3, [r0, #4]
    1564:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    1566:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1568:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    156a:	7b81      	ldrb	r1, [r0, #14]
    156c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    156e:	6880      	ldr	r0, [r0, #8]
    1570:	4b1d      	ldr	r3, [pc, #116]	; (15e8 <system_clock_source_xosc32k_set_config+0xa8>)
    1572:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    1574:	2301      	movs	r3, #1
    1576:	4651      	mov	r1, sl
    1578:	0088      	lsls	r0, r1, #2
    157a:	2104      	movs	r1, #4
    157c:	438c      	bics	r4, r1
    157e:	4304      	orrs	r4, r0
    1580:	4648      	mov	r0, r9
    1582:	4018      	ands	r0, r3
    1584:	00c0      	lsls	r0, r0, #3
    1586:	2108      	movs	r1, #8
    1588:	438c      	bics	r4, r1
    158a:	4304      	orrs	r4, r0
    158c:	4640      	mov	r0, r8
    158e:	4018      	ands	r0, r3
    1590:	0100      	lsls	r0, r0, #4
    1592:	2110      	movs	r1, #16
    1594:	438c      	bics	r4, r1
    1596:	4304      	orrs	r4, r0
    1598:	4660      	mov	r0, ip
    159a:	4018      	ands	r0, r3
    159c:	0140      	lsls	r0, r0, #5
    159e:	2120      	movs	r1, #32
    15a0:	438c      	bics	r4, r1
    15a2:	4304      	orrs	r4, r0
    15a4:	1c18      	adds	r0, r3, #0
    15a6:	4038      	ands	r0, r7
    15a8:	0180      	lsls	r0, r0, #6
    15aa:	2740      	movs	r7, #64	; 0x40
    15ac:	43bc      	bics	r4, r7
    15ae:	4304      	orrs	r4, r0
    15b0:	1c18      	adds	r0, r3, #0
    15b2:	4030      	ands	r0, r6
    15b4:	01c0      	lsls	r0, r0, #7
    15b6:	2680      	movs	r6, #128	; 0x80
    15b8:	43b4      	bics	r4, r6
    15ba:	4304      	orrs	r4, r0
    15bc:	2007      	movs	r0, #7
    15be:	4028      	ands	r0, r5
    15c0:	0200      	lsls	r0, r0, #8
    15c2:	4d0a      	ldr	r5, [pc, #40]	; (15ec <system_clock_source_xosc32k_set_config+0xac>)
    15c4:	402c      	ands	r4, r5
    15c6:	4304      	orrs	r4, r0
    15c8:	4659      	mov	r1, fp
    15ca:	400b      	ands	r3, r1
    15cc:	0319      	lsls	r1, r3, #12
    15ce:	4808      	ldr	r0, [pc, #32]	; (15f0 <system_clock_source_xosc32k_set_config+0xb0>)
    15d0:	1c23      	adds	r3, r4, #0
    15d2:	4003      	ands	r3, r0
    15d4:	430b      	orrs	r3, r1
    15d6:	8293      	strh	r3, [r2, #20]
}
    15d8:	bc3c      	pop	{r2, r3, r4, r5}
    15da:	4690      	mov	r8, r2
    15dc:	4699      	mov	r9, r3
    15de:	46a2      	mov	sl, r4
    15e0:	46ab      	mov	fp, r5
    15e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e4:	40000800 	.word	0x40000800
    15e8:	200000b4 	.word	0x200000b4
    15ec:	fffff8ff 	.word	0xfffff8ff
    15f0:	ffffefff 	.word	0xffffefff

000015f4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    15f4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    15f6:	7a02      	ldrb	r2, [r0, #8]
    15f8:	0692      	lsls	r2, r2, #26
    15fa:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    15fc:	8943      	ldrh	r3, [r0, #10]
    15fe:	059b      	lsls	r3, r3, #22
    1600:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1602:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1604:	4b15      	ldr	r3, [pc, #84]	; (165c <system_clock_source_dfll_set_config+0x68>)
    1606:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    1608:	8881      	ldrh	r1, [r0, #4]
    160a:	8842      	ldrh	r2, [r0, #2]
    160c:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    160e:	79c4      	ldrb	r4, [r0, #7]
    1610:	7982      	ldrb	r2, [r0, #6]
    1612:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1614:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1616:	7841      	ldrb	r1, [r0, #1]
    1618:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    161a:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    161c:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    161e:	7803      	ldrb	r3, [r0, #0]
    1620:	2b04      	cmp	r3, #4
    1622:	d10f      	bne.n	1644 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1624:	7b02      	ldrb	r2, [r0, #12]
    1626:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1628:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    162a:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    162c:	89c3      	ldrh	r3, [r0, #14]
    162e:	041b      	lsls	r3, r3, #16
    1630:	490b      	ldr	r1, [pc, #44]	; (1660 <system_clock_source_dfll_set_config+0x6c>)
    1632:	400b      	ands	r3, r1
    1634:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1636:	4b09      	ldr	r3, [pc, #36]	; (165c <system_clock_source_dfll_set_config+0x68>)
    1638:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    163a:	6819      	ldr	r1, [r3, #0]
    163c:	2204      	movs	r2, #4
    163e:	430a      	orrs	r2, r1
    1640:	601a      	str	r2, [r3, #0]
    1642:	e009      	b.n	1658 <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1644:	2b20      	cmp	r3, #32
    1646:	d107      	bne.n	1658 <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1648:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    164a:	4b04      	ldr	r3, [pc, #16]	; (165c <system_clock_source_dfll_set_config+0x68>)
    164c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    164e:	6819      	ldr	r1, [r3, #0]
    1650:	2284      	movs	r2, #132	; 0x84
    1652:	00d2      	lsls	r2, r2, #3
    1654:	430a      	orrs	r2, r1
    1656:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1658:	bd10      	pop	{r4, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	200000b4 	.word	0x200000b4
    1660:	03ff0000 	.word	0x03ff0000

00001664 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1664:	2808      	cmp	r0, #8
    1666:	d843      	bhi.n	16f0 <system_clock_source_enable+0x8c>
    1668:	0080      	lsls	r0, r0, #2
    166a:	4b22      	ldr	r3, [pc, #136]	; (16f4 <system_clock_source_enable+0x90>)
    166c:	581b      	ldr	r3, [r3, r0]
    166e:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1670:	2000      	movs	r0, #0
    1672:	e03e      	b.n	16f2 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1674:	4b20      	ldr	r3, [pc, #128]	; (16f8 <system_clock_source_enable+0x94>)
    1676:	6a19      	ldr	r1, [r3, #32]
    1678:	2202      	movs	r2, #2
    167a:	430a      	orrs	r2, r1
    167c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    167e:	2000      	movs	r0, #0
    1680:	e037      	b.n	16f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1682:	4b1d      	ldr	r3, [pc, #116]	; (16f8 <system_clock_source_enable+0x94>)
    1684:	6999      	ldr	r1, [r3, #24]
    1686:	2202      	movs	r2, #2
    1688:	430a      	orrs	r2, r1
    168a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    168c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    168e:	e030      	b.n	16f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1690:	4b19      	ldr	r3, [pc, #100]	; (16f8 <system_clock_source_enable+0x94>)
    1692:	8a19      	ldrh	r1, [r3, #16]
    1694:	2202      	movs	r2, #2
    1696:	430a      	orrs	r2, r1
    1698:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    169a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    169c:	e029      	b.n	16f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    169e:	4b16      	ldr	r3, [pc, #88]	; (16f8 <system_clock_source_enable+0x94>)
    16a0:	8a99      	ldrh	r1, [r3, #20]
    16a2:	2202      	movs	r2, #2
    16a4:	430a      	orrs	r2, r1
    16a6:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16a8:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    16aa:	e022      	b.n	16f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16ac:	4b13      	ldr	r3, [pc, #76]	; (16fc <system_clock_source_enable+0x98>)
    16ae:	6819      	ldr	r1, [r3, #0]
    16b0:	2202      	movs	r2, #2
    16b2:	430a      	orrs	r2, r1
    16b4:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    16b6:	681a      	ldr	r2, [r3, #0]
    16b8:	4b11      	ldr	r3, [pc, #68]	; (1700 <system_clock_source_enable+0x9c>)
    16ba:	401a      	ands	r2, r3
    16bc:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <system_clock_source_enable+0x94>)
    16be:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16c0:	1c19      	adds	r1, r3, #0
    16c2:	2210      	movs	r2, #16
    16c4:	68cb      	ldr	r3, [r1, #12]
    16c6:	421a      	tst	r2, r3
    16c8:	d0fc      	beq.n	16c4 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    16ca:	4a0c      	ldr	r2, [pc, #48]	; (16fc <system_clock_source_enable+0x98>)
    16cc:	6891      	ldr	r1, [r2, #8]
    16ce:	4b0a      	ldr	r3, [pc, #40]	; (16f8 <system_clock_source_enable+0x94>)
    16d0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    16d2:	6851      	ldr	r1, [r2, #4]
    16d4:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16d6:	6812      	ldr	r2, [r2, #0]
    16d8:	b292      	uxth	r2, r2
    16da:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16dc:	2000      	movs	r0, #0
    16de:	e008      	b.n	16f2 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16e0:	4a05      	ldr	r2, [pc, #20]	; (16f8 <system_clock_source_enable+0x94>)
    16e2:	2344      	movs	r3, #68	; 0x44
    16e4:	5cd0      	ldrb	r0, [r2, r3]
    16e6:	2102      	movs	r1, #2
    16e8:	4301      	orrs	r1, r0
    16ea:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16ec:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    16ee:	e000      	b.n	16f2 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16f0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    16f2:	4770      	bx	lr
    16f4:	00006074 	.word	0x00006074
    16f8:	40000800 	.word	0x40000800
    16fc:	200000b4 	.word	0x200000b4
    1700:	0000ff7f 	.word	0x0000ff7f

00001704 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1704:	b5f0      	push	{r4, r5, r6, r7, lr}
    1706:	4657      	mov	r7, sl
    1708:	464e      	mov	r6, r9
    170a:	4645      	mov	r5, r8
    170c:	b4e0      	push	{r5, r6, r7}
    170e:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1710:	22c2      	movs	r2, #194	; 0xc2
    1712:	00d2      	lsls	r2, r2, #3
    1714:	4b5e      	ldr	r3, [pc, #376]	; (1890 <system_clock_init+0x18c>)
    1716:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1718:	4b5e      	ldr	r3, [pc, #376]	; (1894 <system_clock_init+0x190>)
    171a:	685a      	ldr	r2, [r3, #4]
    171c:	211e      	movs	r1, #30
    171e:	438a      	bics	r2, r1
    1720:	2104      	movs	r1, #4
    1722:	430a      	orrs	r2, r1
    1724:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1726:	2203      	movs	r2, #3
    1728:	ab01      	add	r3, sp, #4
    172a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    172c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    172e:	4d5a      	ldr	r5, [pc, #360]	; (1898 <system_clock_init+0x194>)
    1730:	b2e0      	uxtb	r0, r4
    1732:	a901      	add	r1, sp, #4
    1734:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1736:	3401      	adds	r4, #1
    1738:	2c25      	cmp	r4, #37	; 0x25
    173a:	d1f9      	bne.n	1730 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    173c:	a80c      	add	r0, sp, #48	; 0x30
    173e:	2300      	movs	r3, #0
    1740:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1742:	2280      	movs	r2, #128	; 0x80
    1744:	0212      	lsls	r2, r2, #8
    1746:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1748:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    174a:	2201      	movs	r2, #1
    174c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    174e:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1750:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1752:	2106      	movs	r1, #6
    1754:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1756:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1758:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    175a:	4b50      	ldr	r3, [pc, #320]	; (189c <system_clock_init+0x198>)
    175c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    175e:	2005      	movs	r0, #5
    1760:	4b4f      	ldr	r3, [pc, #316]	; (18a0 <system_clock_init+0x19c>)
    1762:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1764:	494a      	ldr	r1, [pc, #296]	; (1890 <system_clock_init+0x18c>)
    1766:	2202      	movs	r2, #2
    1768:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    176a:	421a      	tst	r2, r3
    176c:	d0fc      	beq.n	1768 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    176e:	4b48      	ldr	r3, [pc, #288]	; (1890 <system_clock_init+0x18c>)
    1770:	8a99      	ldrh	r1, [r3, #20]
    1772:	2280      	movs	r2, #128	; 0x80
    1774:	430a      	orrs	r2, r1
    1776:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    1778:	4a4a      	ldr	r2, [pc, #296]	; (18a4 <system_clock_init+0x1a0>)
    177a:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    177c:	04c9      	lsls	r1, r1, #19
    177e:	0e49      	lsrs	r1, r1, #25
    1780:	0409      	lsls	r1, r1, #16
    1782:	6998      	ldr	r0, [r3, #24]
    1784:	4a48      	ldr	r2, [pc, #288]	; (18a8 <system_clock_init+0x1a4>)
    1786:	4002      	ands	r2, r0
    1788:	430a      	orrs	r2, r1
    178a:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    178c:	a80a      	add	r0, sp, #40	; 0x28
    178e:	2601      	movs	r6, #1
    1790:	7046      	strb	r6, [r0, #1]
	config->enable_32khz_output = true;
    1792:	7086      	strb	r6, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1794:	7106      	strb	r6, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1796:	2407      	movs	r4, #7
    1798:	7004      	strb	r4, [r0, #0]
	config->write_once          = false;
    179a:	2200      	movs	r2, #0
    179c:	4690      	mov	r8, r2
    179e:	7142      	strb	r2, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    17a0:	70c6      	strb	r6, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    17a2:	4b42      	ldr	r3, [pc, #264]	; (18ac <system_clock_init+0x1a8>)
    17a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    17a6:	2004      	movs	r0, #4
    17a8:	4f3d      	ldr	r7, [pc, #244]	; (18a0 <system_clock_init+0x19c>)
    17aa:	47b8      	blx	r7
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    17ac:	a805      	add	r0, sp, #20
    17ae:	2500      	movs	r5, #0
    17b0:	4642      	mov	r2, r8
    17b2:	8042      	strh	r2, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    17b4:	8082      	strh	r2, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    17b6:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    17b8:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    17ba:	7204      	strb	r4, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    17bc:	233f      	movs	r3, #63	; 0x3f
    17be:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    17c0:	2204      	movs	r2, #4
    17c2:	4691      	mov	r9, r2
    17c4:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
    17c6:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    17c8:	22b7      	movs	r2, #183	; 0xb7
    17ca:	00d2      	lsls	r2, r2, #3
    17cc:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    17ce:	7304      	strb	r4, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17d0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    17d2:	4b37      	ldr	r3, [pc, #220]	; (18b0 <system_clock_init+0x1ac>)
    17d4:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    17d6:	a804      	add	r0, sp, #16
    17d8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17da:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    17dc:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17de:	4b35      	ldr	r3, [pc, #212]	; (18b4 <system_clock_init+0x1b0>)
    17e0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17e2:	2006      	movs	r0, #6
    17e4:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17e6:	4b34      	ldr	r3, [pc, #208]	; (18b8 <system_clock_init+0x1b4>)
    17e8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    17ea:	ac01      	add	r4, sp, #4
    17ec:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    17ee:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    17f0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17f2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    17f4:	2305      	movs	r3, #5
    17f6:	7023      	strb	r3, [r4, #0]
    17f8:	2001      	movs	r0, #1
    17fa:	1c21      	adds	r1, r4, #0
    17fc:	4b2f      	ldr	r3, [pc, #188]	; (18bc <system_clock_init+0x1b8>)
    17fe:	469a      	mov	sl, r3
    1800:	4798      	blx	r3
    1802:	2001      	movs	r0, #1
    1804:	4a2e      	ldr	r2, [pc, #184]	; (18c0 <system_clock_init+0x1bc>)
    1806:	4690      	mov	r8, r2
    1808:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    180a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    180c:	7265      	strb	r5, [r4, #9]
    180e:	464b      	mov	r3, r9
    1810:	7023      	strb	r3, [r4, #0]
    1812:	2220      	movs	r2, #32
    1814:	4691      	mov	r9, r2
    1816:	6062      	str	r2, [r4, #4]
    1818:	7226      	strb	r6, [r4, #8]
    181a:	2002      	movs	r0, #2
    181c:	1c21      	adds	r1, r4, #0
    181e:	47d0      	blx	sl
    1820:	2002      	movs	r0, #2
    1822:	47c0      	blx	r8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1824:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1826:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1828:	7265      	strb	r5, [r4, #9]
    182a:	2303      	movs	r3, #3
    182c:	7023      	strb	r3, [r4, #0]
    182e:	464a      	mov	r2, r9
    1830:	6062      	str	r2, [r4, #4]
    1832:	2004      	movs	r0, #4
    1834:	1c21      	adds	r1, r4, #0
    1836:	47d0      	blx	sl
    1838:	2004      	movs	r0, #4
    183a:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    183c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    183e:	2000      	movs	r0, #0
    1840:	1c21      	adds	r1, r4, #0
    1842:	4b15      	ldr	r3, [pc, #84]	; (1898 <system_clock_init+0x194>)
    1844:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1846:	2000      	movs	r0, #0
    1848:	4b1e      	ldr	r3, [pc, #120]	; (18c4 <system_clock_init+0x1c0>)
    184a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    184c:	2007      	movs	r0, #7
    184e:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1850:	490f      	ldr	r1, [pc, #60]	; (1890 <system_clock_init+0x18c>)
    1852:	22d0      	movs	r2, #208	; 0xd0
    1854:	68cb      	ldr	r3, [r1, #12]
    1856:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1858:	2bd0      	cmp	r3, #208	; 0xd0
    185a:	d1fb      	bne.n	1854 <system_clock_init+0x150>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    185c:	4a1a      	ldr	r2, [pc, #104]	; (18c8 <system_clock_init+0x1c4>)
    185e:	2300      	movs	r3, #0
    1860:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1862:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1864:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1866:	a901      	add	r1, sp, #4
    1868:	2201      	movs	r2, #1
    186a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    186c:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    186e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1870:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1872:	2307      	movs	r3, #7
    1874:	700b      	strb	r3, [r1, #0]
    1876:	2000      	movs	r0, #0
    1878:	4b10      	ldr	r3, [pc, #64]	; (18bc <system_clock_init+0x1b8>)
    187a:	4798      	blx	r3
    187c:	2000      	movs	r0, #0
    187e:	4b10      	ldr	r3, [pc, #64]	; (18c0 <system_clock_init+0x1bc>)
    1880:	4798      	blx	r3
#endif
}
    1882:	b010      	add	sp, #64	; 0x40
    1884:	bc1c      	pop	{r2, r3, r4}
    1886:	4690      	mov	r8, r2
    1888:	4699      	mov	r9, r3
    188a:	46a2      	mov	sl, r4
    188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	40000800 	.word	0x40000800
    1894:	41004000 	.word	0x41004000
    1898:	00001b01 	.word	0x00001b01
    189c:	00001541 	.word	0x00001541
    18a0:	00001665 	.word	0x00001665
    18a4:	00806024 	.word	0x00806024
    18a8:	ff80ffff 	.word	0xff80ffff
    18ac:	000014c5 	.word	0x000014c5
    18b0:	000015f5 	.word	0x000015f5
    18b4:	00001489 	.word	0x00001489
    18b8:	000018cd 	.word	0x000018cd
    18bc:	000018f1 	.word	0x000018f1
    18c0:	000019a5 	.word	0x000019a5
    18c4:	00001a75 	.word	0x00001a75
    18c8:	40000400 	.word	0x40000400

000018cc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <system_gclk_init+0x1c>)
    18ce:	6999      	ldr	r1, [r3, #24]
    18d0:	2208      	movs	r2, #8
    18d2:	430a      	orrs	r2, r1
    18d4:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18d6:	2201      	movs	r2, #1
    18d8:	4b04      	ldr	r3, [pc, #16]	; (18ec <system_gclk_init+0x20>)
    18da:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18dc:	1c19      	adds	r1, r3, #0
    18de:	780b      	ldrb	r3, [r1, #0]
    18e0:	4213      	tst	r3, r2
    18e2:	d1fc      	bne.n	18de <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18e4:	4770      	bx	lr
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	40000400 	.word	0x40000400
    18ec:	40000c00 	.word	0x40000c00

000018f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18f2:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18f4:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18f6:	780d      	ldrb	r5, [r1, #0]
    18f8:	022d      	lsls	r5, r5, #8
    18fa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18fc:	784b      	ldrb	r3, [r1, #1]
    18fe:	2b00      	cmp	r3, #0
    1900:	d002      	beq.n	1908 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1902:	2380      	movs	r3, #128	; 0x80
    1904:	02db      	lsls	r3, r3, #11
    1906:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1908:	7a4b      	ldrb	r3, [r1, #9]
    190a:	2b00      	cmp	r3, #0
    190c:	d002      	beq.n	1914 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    190e:	2380      	movs	r3, #128	; 0x80
    1910:	031b      	lsls	r3, r3, #12
    1912:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1914:	684c      	ldr	r4, [r1, #4]
    1916:	2c01      	cmp	r4, #1
    1918:	d917      	bls.n	194a <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    191a:	1e63      	subs	r3, r4, #1
    191c:	421c      	tst	r4, r3
    191e:	d10f      	bne.n	1940 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1920:	2c02      	cmp	r4, #2
    1922:	d906      	bls.n	1932 <system_gclk_gen_set_config+0x42>
    1924:	2302      	movs	r3, #2
    1926:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1928:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    192a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    192c:	429c      	cmp	r4, r3
    192e:	d8fb      	bhi.n	1928 <system_gclk_gen_set_config+0x38>
    1930:	e000      	b.n	1934 <system_gclk_gen_set_config+0x44>
    1932:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1934:	0217      	lsls	r7, r2, #8
    1936:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1938:	2380      	movs	r3, #128	; 0x80
    193a:	035b      	lsls	r3, r3, #13
    193c:	431d      	orrs	r5, r3
    193e:	e004      	b.n	194a <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1940:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1942:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1944:	2380      	movs	r3, #128	; 0x80
    1946:	029b      	lsls	r3, r3, #10
    1948:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    194a:	7a0b      	ldrb	r3, [r1, #8]
    194c:	2b00      	cmp	r3, #0
    194e:	d002      	beq.n	1956 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1950:	2380      	movs	r3, #128	; 0x80
    1952:	039b      	lsls	r3, r3, #14
    1954:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1956:	4a0f      	ldr	r2, [pc, #60]	; (1994 <system_gclk_gen_set_config+0xa4>)
    1958:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    195a:	b25b      	sxtb	r3, r3
    195c:	2b00      	cmp	r3, #0
    195e:	dbfb      	blt.n	1958 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1960:	4b0d      	ldr	r3, [pc, #52]	; (1998 <system_gclk_gen_set_config+0xa8>)
    1962:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1964:	4b0d      	ldr	r3, [pc, #52]	; (199c <system_gclk_gen_set_config+0xac>)
    1966:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1968:	4a0a      	ldr	r2, [pc, #40]	; (1994 <system_gclk_gen_set_config+0xa4>)
    196a:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    196c:	b25b      	sxtb	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	dbfb      	blt.n	196a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1972:	4b08      	ldr	r3, [pc, #32]	; (1994 <system_gclk_gen_set_config+0xa4>)
    1974:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1976:	1c1a      	adds	r2, r3, #0
    1978:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    197a:	b25b      	sxtb	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	dbfb      	blt.n	1978 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1980:	4b04      	ldr	r3, [pc, #16]	; (1994 <system_gclk_gen_set_config+0xa4>)
    1982:	6859      	ldr	r1, [r3, #4]
    1984:	2280      	movs	r2, #128	; 0x80
    1986:	0252      	lsls	r2, r2, #9
    1988:	400a      	ands	r2, r1
    198a:	4315      	orrs	r5, r2
    198c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    198e:	4b04      	ldr	r3, [pc, #16]	; (19a0 <system_gclk_gen_set_config+0xb0>)
    1990:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1994:	40000c00 	.word	0x40000c00
    1998:	00000179 	.word	0x00000179
    199c:	40000c08 	.word	0x40000c08
    19a0:	000001b9 	.word	0x000001b9

000019a4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    19a4:	b510      	push	{r4, lr}
    19a6:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19a8:	4a0b      	ldr	r2, [pc, #44]	; (19d8 <system_gclk_gen_enable+0x34>)
    19aa:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    19ac:	b25b      	sxtb	r3, r3
    19ae:	2b00      	cmp	r3, #0
    19b0:	dbfb      	blt.n	19aa <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19b2:	4b0a      	ldr	r3, [pc, #40]	; (19dc <system_gclk_gen_enable+0x38>)
    19b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19b6:	4b0a      	ldr	r3, [pc, #40]	; (19e0 <system_gclk_gen_enable+0x3c>)
    19b8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19ba:	4a07      	ldr	r2, [pc, #28]	; (19d8 <system_gclk_gen_enable+0x34>)
    19bc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    19be:	b25b      	sxtb	r3, r3
    19c0:	2b00      	cmp	r3, #0
    19c2:	dbfb      	blt.n	19bc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19c4:	4b04      	ldr	r3, [pc, #16]	; (19d8 <system_gclk_gen_enable+0x34>)
    19c6:	6859      	ldr	r1, [r3, #4]
    19c8:	2280      	movs	r2, #128	; 0x80
    19ca:	0252      	lsls	r2, r2, #9
    19cc:	430a      	orrs	r2, r1
    19ce:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19d0:	4b04      	ldr	r3, [pc, #16]	; (19e4 <system_gclk_gen_enable+0x40>)
    19d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19d4:	bd10      	pop	{r4, pc}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	40000c00 	.word	0x40000c00
    19dc:	00000179 	.word	0x00000179
    19e0:	40000c04 	.word	0x40000c04
    19e4:	000001b9 	.word	0x000001b9

000019e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19e8:	b570      	push	{r4, r5, r6, lr}
    19ea:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19ec:	4a1a      	ldr	r2, [pc, #104]	; (1a58 <system_gclk_gen_get_hz+0x70>)
    19ee:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    19f0:	b25b      	sxtb	r3, r3
    19f2:	2b00      	cmp	r3, #0
    19f4:	dbfb      	blt.n	19ee <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19f6:	4b19      	ldr	r3, [pc, #100]	; (1a5c <system_gclk_gen_get_hz+0x74>)
    19f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19fa:	4b19      	ldr	r3, [pc, #100]	; (1a60 <system_gclk_gen_get_hz+0x78>)
    19fc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19fe:	4a16      	ldr	r2, [pc, #88]	; (1a58 <system_gclk_gen_get_hz+0x70>)
    1a00:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1a02:	b25b      	sxtb	r3, r3
    1a04:	2b00      	cmp	r3, #0
    1a06:	dbfb      	blt.n	1a00 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a08:	4e13      	ldr	r6, [pc, #76]	; (1a58 <system_gclk_gen_get_hz+0x70>)
    1a0a:	6870      	ldr	r0, [r6, #4]
    1a0c:	04c0      	lsls	r0, r0, #19
    1a0e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a10:	4b14      	ldr	r3, [pc, #80]	; (1a64 <system_gclk_gen_get_hz+0x7c>)
    1a12:	4798      	blx	r3
    1a14:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a16:	4b12      	ldr	r3, [pc, #72]	; (1a60 <system_gclk_gen_get_hz+0x78>)
    1a18:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a1a:	6876      	ldr	r6, [r6, #4]
    1a1c:	02f6      	lsls	r6, r6, #11
    1a1e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a20:	4b11      	ldr	r3, [pc, #68]	; (1a68 <system_gclk_gen_get_hz+0x80>)
    1a22:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a24:	4a0c      	ldr	r2, [pc, #48]	; (1a58 <system_gclk_gen_get_hz+0x70>)
    1a26:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1a28:	b25b      	sxtb	r3, r3
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	dbfb      	blt.n	1a26 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a2e:	4b0a      	ldr	r3, [pc, #40]	; (1a58 <system_gclk_gen_get_hz+0x70>)
    1a30:	689c      	ldr	r4, [r3, #8]
    1a32:	0a24      	lsrs	r4, r4, #8
    1a34:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a36:	4b0d      	ldr	r3, [pc, #52]	; (1a6c <system_gclk_gen_get_hz+0x84>)
    1a38:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a3a:	2e00      	cmp	r6, #0
    1a3c:	d107      	bne.n	1a4e <system_gclk_gen_get_hz+0x66>
    1a3e:	2c01      	cmp	r4, #1
    1a40:	d907      	bls.n	1a52 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a42:	1c28      	adds	r0, r5, #0
    1a44:	1c21      	adds	r1, r4, #0
    1a46:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <system_gclk_gen_get_hz+0x88>)
    1a48:	4798      	blx	r3
    1a4a:	1c05      	adds	r5, r0, #0
    1a4c:	e001      	b.n	1a52 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a4e:	3401      	adds	r4, #1
    1a50:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a52:	1c28      	adds	r0, r5, #0
    1a54:	bd70      	pop	{r4, r5, r6, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	40000c00 	.word	0x40000c00
    1a5c:	00000179 	.word	0x00000179
    1a60:	40000c04 	.word	0x40000c04
    1a64:	000013f9 	.word	0x000013f9
    1a68:	40000c08 	.word	0x40000c08
    1a6c:	000001b9 	.word	0x000001b9
    1a70:	00005751 	.word	0x00005751

00001a74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a74:	b510      	push	{r4, lr}
    1a76:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a78:	4b06      	ldr	r3, [pc, #24]	; (1a94 <system_gclk_chan_enable+0x20>)
    1a7a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a7c:	4b06      	ldr	r3, [pc, #24]	; (1a98 <system_gclk_chan_enable+0x24>)
    1a7e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a80:	4b06      	ldr	r3, [pc, #24]	; (1a9c <system_gclk_chan_enable+0x28>)
    1a82:	8859      	ldrh	r1, [r3, #2]
    1a84:	2280      	movs	r2, #128	; 0x80
    1a86:	01d2      	lsls	r2, r2, #7
    1a88:	430a      	orrs	r2, r1
    1a8a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <system_gclk_chan_enable+0x2c>)
    1a8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a90:	bd10      	pop	{r4, pc}
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	00000179 	.word	0x00000179
    1a98:	40000c02 	.word	0x40000c02
    1a9c:	40000c00 	.word	0x40000c00
    1aa0:	000001b9 	.word	0x000001b9

00001aa4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1aa4:	b510      	push	{r4, lr}
    1aa6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1aa8:	4b0f      	ldr	r3, [pc, #60]	; (1ae8 <system_gclk_chan_disable+0x44>)
    1aaa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aac:	4b0f      	ldr	r3, [pc, #60]	; (1aec <system_gclk_chan_disable+0x48>)
    1aae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1ab0:	4b0f      	ldr	r3, [pc, #60]	; (1af0 <system_gclk_chan_disable+0x4c>)
    1ab2:	8858      	ldrh	r0, [r3, #2]
    1ab4:	0500      	lsls	r0, r0, #20
    1ab6:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ab8:	8859      	ldrh	r1, [r3, #2]
    1aba:	4a0e      	ldr	r2, [pc, #56]	; (1af4 <system_gclk_chan_disable+0x50>)
    1abc:	400a      	ands	r2, r1
    1abe:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ac0:	8859      	ldrh	r1, [r3, #2]
    1ac2:	4a0d      	ldr	r2, [pc, #52]	; (1af8 <system_gclk_chan_disable+0x54>)
    1ac4:	400a      	ands	r2, r1
    1ac6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ac8:	1c19      	adds	r1, r3, #0
    1aca:	2280      	movs	r2, #128	; 0x80
    1acc:	01d2      	lsls	r2, r2, #7
    1ace:	884b      	ldrh	r3, [r1, #2]
    1ad0:	4213      	tst	r3, r2
    1ad2:	d1fc      	bne.n	1ace <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ad4:	4b06      	ldr	r3, [pc, #24]	; (1af0 <system_gclk_chan_disable+0x4c>)
    1ad6:	0201      	lsls	r1, r0, #8
    1ad8:	8858      	ldrh	r0, [r3, #2]
    1ada:	4a06      	ldr	r2, [pc, #24]	; (1af4 <system_gclk_chan_disable+0x50>)
    1adc:	4002      	ands	r2, r0
    1ade:	430a      	orrs	r2, r1
    1ae0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ae2:	4b06      	ldr	r3, [pc, #24]	; (1afc <system_gclk_chan_disable+0x58>)
    1ae4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ae6:	bd10      	pop	{r4, pc}
    1ae8:	00000179 	.word	0x00000179
    1aec:	40000c02 	.word	0x40000c02
    1af0:	40000c00 	.word	0x40000c00
    1af4:	fffff0ff 	.word	0xfffff0ff
    1af8:	ffffbfff 	.word	0xffffbfff
    1afc:	000001b9 	.word	0x000001b9

00001b00 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1b00:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1b02:	780c      	ldrb	r4, [r1, #0]
    1b04:	0224      	lsls	r4, r4, #8
    1b06:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1b08:	4b02      	ldr	r3, [pc, #8]	; (1b14 <system_gclk_chan_set_config+0x14>)
    1b0a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b0c:	b2a4      	uxth	r4, r4
    1b0e:	4b02      	ldr	r3, [pc, #8]	; (1b18 <system_gclk_chan_set_config+0x18>)
    1b10:	805c      	strh	r4, [r3, #2]
}
    1b12:	bd10      	pop	{r4, pc}
    1b14:	00001aa5 	.word	0x00001aa5
    1b18:	40000c00 	.word	0x40000c00

00001b1c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b1c:	b510      	push	{r4, lr}
    1b1e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b20:	4b06      	ldr	r3, [pc, #24]	; (1b3c <system_gclk_chan_get_hz+0x20>)
    1b22:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b24:	4b06      	ldr	r3, [pc, #24]	; (1b40 <system_gclk_chan_get_hz+0x24>)
    1b26:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b28:	4b06      	ldr	r3, [pc, #24]	; (1b44 <system_gclk_chan_get_hz+0x28>)
    1b2a:	885c      	ldrh	r4, [r3, #2]
    1b2c:	0524      	lsls	r4, r4, #20
    1b2e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <system_gclk_chan_get_hz+0x2c>)
    1b32:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b34:	1c20      	adds	r0, r4, #0
    1b36:	4b05      	ldr	r3, [pc, #20]	; (1b4c <system_gclk_chan_get_hz+0x30>)
    1b38:	4798      	blx	r3
}
    1b3a:	bd10      	pop	{r4, pc}
    1b3c:	00000179 	.word	0x00000179
    1b40:	40000c02 	.word	0x40000c02
    1b44:	40000c00 	.word	0x40000c00
    1b48:	000001b9 	.word	0x000001b9
    1b4c:	000019e9 	.word	0x000019e9

00001b50 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b50:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b52:	78d3      	ldrb	r3, [r2, #3]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d11e      	bne.n	1b96 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b58:	7813      	ldrb	r3, [r2, #0]
    1b5a:	2b80      	cmp	r3, #128	; 0x80
    1b5c:	d004      	beq.n	1b68 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b5e:	061b      	lsls	r3, r3, #24
    1b60:	2480      	movs	r4, #128	; 0x80
    1b62:	0264      	lsls	r4, r4, #9
    1b64:	4323      	orrs	r3, r4
    1b66:	e000      	b.n	1b6a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1b68:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b6a:	7854      	ldrb	r4, [r2, #1]
    1b6c:	2502      	movs	r5, #2
    1b6e:	43ac      	bics	r4, r5
    1b70:	d10a      	bne.n	1b88 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b72:	7894      	ldrb	r4, [r2, #2]
    1b74:	2c00      	cmp	r4, #0
    1b76:	d103      	bne.n	1b80 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b78:	2480      	movs	r4, #128	; 0x80
    1b7a:	02a4      	lsls	r4, r4, #10
    1b7c:	4323      	orrs	r3, r4
    1b7e:	e002      	b.n	1b86 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b80:	24c0      	movs	r4, #192	; 0xc0
    1b82:	02e4      	lsls	r4, r4, #11
    1b84:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b86:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b88:	7854      	ldrb	r4, [r2, #1]
    1b8a:	3c01      	subs	r4, #1
    1b8c:	2c01      	cmp	r4, #1
    1b8e:	d804      	bhi.n	1b9a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b90:	4c11      	ldr	r4, [pc, #68]	; (1bd8 <_system_pinmux_config+0x88>)
    1b92:	4023      	ands	r3, r4
    1b94:	e001      	b.n	1b9a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1b96:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1b98:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b9a:	040d      	lsls	r5, r1, #16
    1b9c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b9e:	24a0      	movs	r4, #160	; 0xa0
    1ba0:	05e4      	lsls	r4, r4, #23
    1ba2:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ba4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ba6:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ba8:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1baa:	24d0      	movs	r4, #208	; 0xd0
    1bac:	0624      	lsls	r4, r4, #24
    1bae:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1bb0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1bb2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1bb4:	78d4      	ldrb	r4, [r2, #3]
    1bb6:	2c00      	cmp	r4, #0
    1bb8:	d10c      	bne.n	1bd4 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1bba:	035c      	lsls	r4, r3, #13
    1bbc:	d505      	bpl.n	1bca <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1bbe:	7893      	ldrb	r3, [r2, #2]
    1bc0:	2b01      	cmp	r3, #1
    1bc2:	d101      	bne.n	1bc8 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1bc4:	6181      	str	r1, [r0, #24]
    1bc6:	e000      	b.n	1bca <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1bc8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bca:	7853      	ldrb	r3, [r2, #1]
    1bcc:	3b01      	subs	r3, #1
    1bce:	2b01      	cmp	r3, #1
    1bd0:	d800      	bhi.n	1bd4 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1bd2:	6081      	str	r1, [r0, #8]
		}
	}
}
    1bd4:	bd30      	pop	{r4, r5, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	fffbffff 	.word	0xfffbffff

00001bdc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bdc:	b508      	push	{r3, lr}
    1bde:	1c03      	adds	r3, r0, #0
    1be0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1be2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1be4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1be6:	2900      	cmp	r1, #0
    1be8:	d103      	bne.n	1bf2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bea:	0958      	lsrs	r0, r3, #5
    1bec:	01c0      	lsls	r0, r0, #7
    1bee:	4904      	ldr	r1, [pc, #16]	; (1c00 <system_pinmux_pin_set_config+0x24>)
    1bf0:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bf2:	211f      	movs	r1, #31
    1bf4:	400b      	ands	r3, r1
    1bf6:	2101      	movs	r1, #1
    1bf8:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1bfa:	4b02      	ldr	r3, [pc, #8]	; (1c04 <system_pinmux_pin_set_config+0x28>)
    1bfc:	4798      	blx	r3
}
    1bfe:	bd08      	pop	{r3, pc}
    1c00:	41004400 	.word	0x41004400
    1c04:	00001b51 	.word	0x00001b51

00001c08 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1c08:	4770      	bx	lr
    1c0a:	46c0      	nop			; (mov r8, r8)

00001c0c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1c0c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1c0e:	4b04      	ldr	r3, [pc, #16]	; (1c20 <system_init+0x14>)
    1c10:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c12:	4b04      	ldr	r3, [pc, #16]	; (1c24 <system_init+0x18>)
    1c14:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c16:	4b04      	ldr	r3, [pc, #16]	; (1c28 <system_init+0x1c>)
    1c18:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c1a:	4b04      	ldr	r3, [pc, #16]	; (1c2c <system_init+0x20>)
    1c1c:	4798      	blx	r3
}
    1c1e:	bd08      	pop	{r3, pc}
    1c20:	00001705 	.word	0x00001705
    1c24:	000001e9 	.word	0x000001e9
    1c28:	00001c09 	.word	0x00001c09
    1c2c:	000003b1 	.word	0x000003b1

00001c30 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1c30:	1c93      	adds	r3, r2, #2
    1c32:	009b      	lsls	r3, r3, #2
    1c34:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1c36:	2a02      	cmp	r2, #2
    1c38:	d104      	bne.n	1c44 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1c3a:	7e02      	ldrb	r2, [r0, #24]
    1c3c:	2310      	movs	r3, #16
    1c3e:	4313      	orrs	r3, r2
    1c40:	7603      	strb	r3, [r0, #24]
    1c42:	e00c      	b.n	1c5e <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c44:	2a03      	cmp	r2, #3
    1c46:	d104      	bne.n	1c52 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c48:	7e02      	ldrb	r2, [r0, #24]
    1c4a:	2320      	movs	r3, #32
    1c4c:	4313      	orrs	r3, r2
    1c4e:	7603      	strb	r3, [r0, #24]
    1c50:	e005      	b.n	1c5e <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c52:	2301      	movs	r3, #1
    1c54:	4093      	lsls	r3, r2
    1c56:	1c1a      	adds	r2, r3, #0
    1c58:	7e03      	ldrb	r3, [r0, #24]
    1c5a:	431a      	orrs	r2, r3
    1c5c:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1c5e:	2000      	movs	r0, #0
    1c60:	4770      	bx	lr
    1c62:	46c0      	nop			; (mov r8, r8)

00001c64 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c64:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1c66:	0080      	lsls	r0, r0, #2
    1c68:	4b14      	ldr	r3, [pc, #80]	; (1cbc <_tc_interrupt_handler+0x58>)
    1c6a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c6c:	6822      	ldr	r2, [r4, #0]
    1c6e:	7b95      	ldrb	r5, [r2, #14]
    1c70:	7e23      	ldrb	r3, [r4, #24]
    1c72:	401d      	ands	r5, r3
    1c74:	7e63      	ldrb	r3, [r4, #25]
    1c76:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c78:	07eb      	lsls	r3, r5, #31
    1c7a:	d505      	bpl.n	1c88 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c7c:	1c20      	adds	r0, r4, #0
    1c7e:	68a2      	ldr	r2, [r4, #8]
    1c80:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c82:	2301      	movs	r3, #1
    1c84:	6822      	ldr	r2, [r4, #0]
    1c86:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c88:	07ab      	lsls	r3, r5, #30
    1c8a:	d505      	bpl.n	1c98 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c8c:	1c20      	adds	r0, r4, #0
    1c8e:	68e2      	ldr	r2, [r4, #12]
    1c90:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c92:	2302      	movs	r3, #2
    1c94:	6822      	ldr	r2, [r4, #0]
    1c96:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1c98:	06eb      	lsls	r3, r5, #27
    1c9a:	d505      	bpl.n	1ca8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c9c:	1c20      	adds	r0, r4, #0
    1c9e:	6922      	ldr	r2, [r4, #16]
    1ca0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1ca2:	2310      	movs	r3, #16
    1ca4:	6822      	ldr	r2, [r4, #0]
    1ca6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1ca8:	06ab      	lsls	r3, r5, #26
    1caa:	d505      	bpl.n	1cb8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1cac:	1c20      	adds	r0, r4, #0
    1cae:	6962      	ldr	r2, [r4, #20]
    1cb0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1cb2:	6823      	ldr	r3, [r4, #0]
    1cb4:	2220      	movs	r2, #32
    1cb6:	739a      	strb	r2, [r3, #14]
	}
}
    1cb8:	bd38      	pop	{r3, r4, r5, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	20000e9c 	.word	0x20000e9c

00001cc0 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1cc0:	b508      	push	{r3, lr}
    1cc2:	2000      	movs	r0, #0
    1cc4:	4b01      	ldr	r3, [pc, #4]	; (1ccc <TC3_Handler+0xc>)
    1cc6:	4798      	blx	r3
    1cc8:	bd08      	pop	{r3, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	00001c65 	.word	0x00001c65

00001cd0 <TC4_Handler>:
    1cd0:	b508      	push	{r3, lr}
    1cd2:	2001      	movs	r0, #1
    1cd4:	4b01      	ldr	r3, [pc, #4]	; (1cdc <TC4_Handler+0xc>)
    1cd6:	4798      	blx	r3
    1cd8:	bd08      	pop	{r3, pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	00001c65 	.word	0x00001c65

00001ce0 <TC5_Handler>:
    1ce0:	b508      	push	{r3, lr}
    1ce2:	2002      	movs	r0, #2
    1ce4:	4b01      	ldr	r3, [pc, #4]	; (1cec <TC5_Handler+0xc>)
    1ce6:	4798      	blx	r3
    1ce8:	bd08      	pop	{r3, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00001c65 	.word	0x00001c65

00001cf0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1cf0:	b570      	push	{r4, r5, r6, lr}
    1cf2:	b084      	sub	sp, #16
    1cf4:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1cf6:	ab01      	add	r3, sp, #4
    1cf8:	4a0a      	ldr	r2, [pc, #40]	; (1d24 <_tc_get_inst_index+0x34>)
    1cfa:	ca70      	ldmia	r2!, {r4, r5, r6}
    1cfc:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1cfe:	9b01      	ldr	r3, [sp, #4]
    1d00:	4283      	cmp	r3, r0
    1d02:	d00a      	beq.n	1d1a <_tc_get_inst_index+0x2a>
    1d04:	9c02      	ldr	r4, [sp, #8]
    1d06:	4284      	cmp	r4, r0
    1d08:	d005      	beq.n	1d16 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d0a:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d0c:	9d03      	ldr	r5, [sp, #12]
    1d0e:	428d      	cmp	r5, r1
    1d10:	d105      	bne.n	1d1e <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d12:	2002      	movs	r0, #2
    1d14:	e002      	b.n	1d1c <_tc_get_inst_index+0x2c>
    1d16:	2001      	movs	r0, #1
    1d18:	e000      	b.n	1d1c <_tc_get_inst_index+0x2c>
    1d1a:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    1d1c:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1d1e:	b004      	add	sp, #16
    1d20:	bd70      	pop	{r4, r5, r6, pc}
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	00006098 	.word	0x00006098

00001d28 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2a:	464f      	mov	r7, r9
    1d2c:	4646      	mov	r6, r8
    1d2e:	b4c0      	push	{r6, r7}
    1d30:	b087      	sub	sp, #28
    1d32:	1c04      	adds	r4, r0, #0
    1d34:	1c0d      	adds	r5, r1, #0
    1d36:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1d38:	1c08      	adds	r0, r1, #0
    1d3a:	4b90      	ldr	r3, [pc, #576]	; (1f7c <tc_init+0x254>)
    1d3c:	4798      	blx	r3
    1d3e:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1d40:	4f8f      	ldr	r7, [pc, #572]	; (1f80 <tc_init+0x258>)
    1d42:	1c39      	adds	r1, r7, #0
    1d44:	310c      	adds	r1, #12
    1d46:	a805      	add	r0, sp, #20
    1d48:	2203      	movs	r2, #3
    1d4a:	4e8e      	ldr	r6, [pc, #568]	; (1f84 <tc_init+0x25c>)
    1d4c:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1d4e:	1c39      	adds	r1, r7, #0
    1d50:	3110      	adds	r1, #16
    1d52:	a803      	add	r0, sp, #12
    1d54:	2206      	movs	r2, #6
    1d56:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d58:	2300      	movs	r3, #0
    1d5a:	60a3      	str	r3, [r4, #8]
    1d5c:	60e3      	str	r3, [r4, #12]
    1d5e:	6123      	str	r3, [r4, #16]
    1d60:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1d62:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1d64:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1d66:	4648      	mov	r0, r9
    1d68:	0082      	lsls	r2, r0, #2
    1d6a:	4b87      	ldr	r3, [pc, #540]	; (1f88 <tc_init+0x260>)
    1d6c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d6e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d70:	4641      	mov	r1, r8
    1d72:	788b      	ldrb	r3, [r1, #2]
    1d74:	2b08      	cmp	r3, #8
    1d76:	d104      	bne.n	1d82 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d78:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d7a:	464a      	mov	r2, r9
    1d7c:	07d2      	lsls	r2, r2, #31
    1d7e:	d400      	bmi.n	1d82 <tc_init+0x5a>
    1d80:	e0f6      	b.n	1f70 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1d82:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d84:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d86:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d88:	07d9      	lsls	r1, r3, #31
    1d8a:	d500      	bpl.n	1d8e <tc_init+0x66>
    1d8c:	e0f0      	b.n	1f70 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d8e:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1d90:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d92:	06da      	lsls	r2, r3, #27
    1d94:	d500      	bpl.n	1d98 <tc_init+0x70>
    1d96:	e0eb      	b.n	1f70 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1d98:	882b      	ldrh	r3, [r5, #0]
    1d9a:	0799      	lsls	r1, r3, #30
    1d9c:	d500      	bpl.n	1da0 <tc_init+0x78>
    1d9e:	e0e7      	b.n	1f70 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1da0:	4642      	mov	r2, r8
    1da2:	7c13      	ldrb	r3, [r2, #16]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d00c      	beq.n	1dc2 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1da8:	a902      	add	r1, sp, #8
    1daa:	2301      	movs	r3, #1
    1dac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1dae:	2200      	movs	r2, #0
    1db0:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1db2:	4640      	mov	r0, r8
    1db4:	6980      	ldr	r0, [r0, #24]
    1db6:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1db8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1dba:	4642      	mov	r2, r8
    1dbc:	7d10      	ldrb	r0, [r2, #20]
    1dbe:	4b73      	ldr	r3, [pc, #460]	; (1f8c <tc_init+0x264>)
    1dc0:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1dc2:	4640      	mov	r0, r8
    1dc4:	7f03      	ldrb	r3, [r0, #28]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d00b      	beq.n	1de2 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1dca:	a902      	add	r1, sp, #8
    1dcc:	2301      	movs	r3, #1
    1dce:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1dd0:	2200      	movs	r2, #0
    1dd2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1dd4:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1dd6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1dd8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1dda:	6a03      	ldr	r3, [r0, #32]
    1ddc:	b2d8      	uxtb	r0, r3
    1dde:	4b6b      	ldr	r3, [pc, #428]	; (1f8c <tc_init+0x264>)
    1de0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1de2:	4b6b      	ldr	r3, [pc, #428]	; (1f90 <tc_init+0x268>)
    1de4:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1de6:	4648      	mov	r0, r9
    1de8:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1dea:	a803      	add	r0, sp, #12
    1dec:	5a12      	ldrh	r2, [r2, r0]
    1dee:	430a      	orrs	r2, r1
    1df0:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1df2:	4641      	mov	r1, r8
    1df4:	788b      	ldrb	r3, [r1, #2]
    1df6:	2b08      	cmp	r3, #8
    1df8:	d108      	bne.n	1e0c <tc_init+0xe4>
    1dfa:	4b65      	ldr	r3, [pc, #404]	; (1f90 <tc_init+0x268>)
    1dfc:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1dfe:	4648      	mov	r0, r9
    1e00:	3001      	adds	r0, #1
    1e02:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1e04:	a903      	add	r1, sp, #12
    1e06:	5a41      	ldrh	r1, [r0, r1]
    1e08:	430a      	orrs	r2, r1
    1e0a:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1e0c:	a901      	add	r1, sp, #4
    1e0e:	4642      	mov	r2, r8
    1e10:	7813      	ldrb	r3, [r2, #0]
    1e12:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1e14:	ab05      	add	r3, sp, #20
    1e16:	4648      	mov	r0, r9
    1e18:	5c1e      	ldrb	r6, [r3, r0]
    1e1a:	1c30      	adds	r0, r6, #0
    1e1c:	4b5d      	ldr	r3, [pc, #372]	; (1f94 <tc_init+0x26c>)
    1e1e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1e20:	1c30      	adds	r0, r6, #0
    1e22:	4b5d      	ldr	r3, [pc, #372]	; (1f98 <tc_init+0x270>)
    1e24:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1e26:	4641      	mov	r1, r8
    1e28:	8888      	ldrh	r0, [r1, #4]
    1e2a:	890b      	ldrh	r3, [r1, #8]
    1e2c:	4303      	orrs	r3, r0
    1e2e:	7988      	ldrb	r0, [r1, #6]
    1e30:	788a      	ldrb	r2, [r1, #2]
    1e32:	4310      	orrs	r0, r2
    1e34:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1e36:	784b      	ldrb	r3, [r1, #1]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d002      	beq.n	1e42 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1e3c:	2380      	movs	r3, #128	; 0x80
    1e3e:	011b      	lsls	r3, r3, #4
    1e40:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e42:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e44:	227f      	movs	r2, #127	; 0x7f
    1e46:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e48:	4393      	bics	r3, r2
    1e4a:	d1fc      	bne.n	1e46 <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e4c:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1e4e:	4642      	mov	r2, r8
    1e50:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1e52:	1e43      	subs	r3, r0, #1
    1e54:	4198      	sbcs	r0, r3
    1e56:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    1e58:	7b93      	ldrb	r3, [r2, #14]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d001      	beq.n	1e62 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e5e:	2301      	movs	r3, #1
    1e60:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e62:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e64:	227f      	movs	r2, #127	; 0x7f
    1e66:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1e68:	4393      	bics	r3, r2
    1e6a:	d1fc      	bne.n	1e66 <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e6c:	23ff      	movs	r3, #255	; 0xff
    1e6e:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1e70:	2800      	cmp	r0, #0
    1e72:	d005      	beq.n	1e80 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e74:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e76:	227f      	movs	r2, #127	; 0x7f
    1e78:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1e7a:	4393      	bics	r3, r2
    1e7c:	d1fc      	bne.n	1e78 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e7e:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1e80:	4643      	mov	r3, r8
    1e82:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e84:	7adb      	ldrb	r3, [r3, #11]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d001      	beq.n	1e8e <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e8a:	2310      	movs	r3, #16
    1e8c:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e8e:	4641      	mov	r1, r8
    1e90:	7b0b      	ldrb	r3, [r1, #12]
    1e92:	2b00      	cmp	r3, #0
    1e94:	d001      	beq.n	1e9a <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e96:	2320      	movs	r3, #32
    1e98:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e9a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e9c:	227f      	movs	r2, #127	; 0x7f
    1e9e:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1ea0:	4393      	bics	r3, r2
    1ea2:	d1fc      	bne.n	1e9e <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1ea4:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ea6:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ea8:	217f      	movs	r1, #127	; 0x7f
    1eaa:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1eac:	438b      	bics	r3, r1
    1eae:	d1fc      	bne.n	1eaa <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1eb0:	7923      	ldrb	r3, [r4, #4]
    1eb2:	2b04      	cmp	r3, #4
    1eb4:	d005      	beq.n	1ec2 <tc_init+0x19a>
    1eb6:	2b08      	cmp	r3, #8
    1eb8:	d041      	beq.n	1f3e <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1eba:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d157      	bne.n	1f70 <tc_init+0x248>
    1ec0:	e024      	b.n	1f0c <tc_init+0x1e4>
    1ec2:	217f      	movs	r1, #127	; 0x7f
    1ec4:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1ec6:	438b      	bics	r3, r1
    1ec8:	d1fc      	bne.n	1ec4 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1eca:	2328      	movs	r3, #40	; 0x28
    1ecc:	4642      	mov	r2, r8
    1ece:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1ed0:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ed2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ed4:	227f      	movs	r2, #127	; 0x7f
    1ed6:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1ed8:	4393      	bics	r3, r2
    1eda:	d1fc      	bne.n	1ed6 <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1edc:	2329      	movs	r3, #41	; 0x29
    1ede:	4640      	mov	r0, r8
    1ee0:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1ee2:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ee4:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ee6:	227f      	movs	r2, #127	; 0x7f
    1ee8:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1eea:	4393      	bics	r3, r2
    1eec:	d1fc      	bne.n	1ee8 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1eee:	232a      	movs	r3, #42	; 0x2a
    1ef0:	4641      	mov	r1, r8
    1ef2:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1ef4:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ef6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ef8:	227f      	movs	r2, #127	; 0x7f
    1efa:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1efc:	4393      	bics	r3, r2
    1efe:	d1fc      	bne.n	1efa <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1f00:	232b      	movs	r3, #43	; 0x2b
    1f02:	4642      	mov	r2, r8
    1f04:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1f06:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1f08:	2000      	movs	r0, #0
    1f0a:	e031      	b.n	1f70 <tc_init+0x248>
    1f0c:	217f      	movs	r1, #127	; 0x7f
    1f0e:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1f10:	438b      	bics	r3, r1
    1f12:	d1fc      	bne.n	1f0e <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1f14:	4640      	mov	r0, r8
    1f16:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1f18:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f1a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f1c:	227f      	movs	r2, #127	; 0x7f
    1f1e:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1f20:	4393      	bics	r3, r2
    1f22:	d1fc      	bne.n	1f1e <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1f24:	4641      	mov	r1, r8
    1f26:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1f28:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f2a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f2c:	227f      	movs	r2, #127	; 0x7f
    1f2e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1f30:	4393      	bics	r3, r2
    1f32:	d1fc      	bne.n	1f2e <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1f34:	4642      	mov	r2, r8
    1f36:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1f38:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1f3a:	2000      	movs	r0, #0
    1f3c:	e018      	b.n	1f70 <tc_init+0x248>
    1f3e:	217f      	movs	r1, #127	; 0x7f
    1f40:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1f42:	438b      	bics	r3, r1
    1f44:	d1fc      	bne.n	1f40 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1f46:	4643      	mov	r3, r8
    1f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1f4a:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f4c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f4e:	227f      	movs	r2, #127	; 0x7f
    1f50:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1f52:	4393      	bics	r3, r2
    1f54:	d1fc      	bne.n	1f50 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1f56:	4640      	mov	r0, r8
    1f58:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1f5a:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f5c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f5e:	227f      	movs	r2, #127	; 0x7f
    1f60:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1f62:	4393      	bics	r3, r2
    1f64:	d1fc      	bne.n	1f60 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1f66:	4641      	mov	r1, r8
    1f68:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1f6a:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1f6c:	2000      	movs	r0, #0
    1f6e:	e7ff      	b.n	1f70 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1f70:	b007      	add	sp, #28
    1f72:	bc0c      	pop	{r2, r3}
    1f74:	4690      	mov	r8, r2
    1f76:	4699      	mov	r9, r3
    1f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	00001cf1 	.word	0x00001cf1
    1f80:	00006098 	.word	0x00006098
    1f84:	00005881 	.word	0x00005881
    1f88:	20000e9c 	.word	0x20000e9c
    1f8c:	00001bdd 	.word	0x00001bdd
    1f90:	40000400 	.word	0x40000400
    1f94:	00001b01 	.word	0x00001b01
    1f98:	00001a75 	.word	0x00001a75

00001f9c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1f9c:	6802      	ldr	r2, [r0, #0]
    1f9e:	217f      	movs	r1, #127	; 0x7f
    1fa0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1fa2:	438b      	bics	r3, r1
    1fa4:	d1fc      	bne.n	1fa0 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1fa6:	7903      	ldrb	r3, [r0, #4]
    1fa8:	2b04      	cmp	r3, #4
    1faa:	d005      	beq.n	1fb8 <tc_get_count_value+0x1c>
    1fac:	2b08      	cmp	r3, #8
    1fae:	d009      	beq.n	1fc4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1fb0:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d108      	bne.n	1fc8 <tc_get_count_value+0x2c>
    1fb6:	e002      	b.n	1fbe <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1fb8:	7c10      	ldrb	r0, [r2, #16]
    1fba:	b2c0      	uxtb	r0, r0
    1fbc:	e004      	b.n	1fc8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1fbe:	8a10      	ldrh	r0, [r2, #16]
    1fc0:	b280      	uxth	r0, r0
    1fc2:	e001      	b.n	1fc8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    1fc4:	6910      	ldr	r0, [r2, #16]
    1fc6:	e7ff      	b.n	1fc8 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    1fc8:	4770      	bx	lr
    1fca:	46c0      	nop			; (mov r8, r8)

00001fcc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1fcc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1fce:	6804      	ldr	r4, [r0, #0]
    1fd0:	257f      	movs	r5, #127	; 0x7f
    1fd2:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1fd4:	43ab      	bics	r3, r5
    1fd6:	d1fc      	bne.n	1fd2 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1fd8:	7903      	ldrb	r3, [r0, #4]
    1fda:	2b04      	cmp	r3, #4
    1fdc:	d005      	beq.n	1fea <tc_set_compare_value+0x1e>
    1fde:	2b08      	cmp	r3, #8
    1fe0:	d014      	beq.n	200c <STACK_SIZE+0xc>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fe2:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d119      	bne.n	201c <STACK_SIZE+0x1c>
    1fe8:	e007      	b.n	1ffa <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1fea:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    1fec:	2901      	cmp	r1, #1
    1fee:	d815      	bhi.n	201c <STACK_SIZE+0x1c>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1ff0:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1ff2:	1861      	adds	r1, r4, r1
    1ff4:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1ff6:	2000      	movs	r0, #0
    1ff8:	e010      	b.n	201c <STACK_SIZE+0x1c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1ffa:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    1ffc:	2901      	cmp	r1, #1
    1ffe:	d80d      	bhi.n	201c <STACK_SIZE+0x1c>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    2000:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    2002:	310c      	adds	r1, #12
    2004:	0049      	lsls	r1, r1, #1
    2006:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    2008:	2000      	movs	r0, #0
    200a:	e007      	b.n	201c <STACK_SIZE+0x1c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    200c:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    200e:	2901      	cmp	r1, #1
    2010:	d804      	bhi.n	201c <STACK_SIZE+0x1c>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    2012:	3106      	adds	r1, #6
    2014:	0089      	lsls	r1, r1, #2
    2016:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    2018:	2000      	movs	r0, #0
    201a:	e7ff      	b.n	201c <STACK_SIZE+0x1c>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    201c:	bd30      	pop	{r4, r5, pc}
    201e:	46c0      	nop			; (mov r8, r8)

00002020 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2020:	e7fe      	b.n	2020 <Dummy_Handler>
    2022:	46c0      	nop			; (mov r8, r8)

00002024 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2024:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2026:	4b19      	ldr	r3, [pc, #100]	; (208c <Reset_Handler+0x68>)
    2028:	4a19      	ldr	r2, [pc, #100]	; (2090 <Reset_Handler+0x6c>)
    202a:	429a      	cmp	r2, r3
    202c:	d003      	beq.n	2036 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    202e:	4b19      	ldr	r3, [pc, #100]	; (2094 <Reset_Handler+0x70>)
    2030:	4a16      	ldr	r2, [pc, #88]	; (208c <Reset_Handler+0x68>)
    2032:	429a      	cmp	r2, r3
    2034:	d304      	bcc.n	2040 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2036:	4b18      	ldr	r3, [pc, #96]	; (2098 <Reset_Handler+0x74>)
    2038:	4a18      	ldr	r2, [pc, #96]	; (209c <Reset_Handler+0x78>)
    203a:	429a      	cmp	r2, r3
    203c:	d310      	bcc.n	2060 <Reset_Handler+0x3c>
    203e:	e01b      	b.n	2078 <Reset_Handler+0x54>
    2040:	4b17      	ldr	r3, [pc, #92]	; (20a0 <Reset_Handler+0x7c>)
    2042:	4814      	ldr	r0, [pc, #80]	; (2094 <Reset_Handler+0x70>)
    2044:	3003      	adds	r0, #3
    2046:	1ac0      	subs	r0, r0, r3
    2048:	0880      	lsrs	r0, r0, #2
    204a:	3001      	adds	r0, #1
    204c:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    204e:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    2050:	490e      	ldr	r1, [pc, #56]	; (208c <Reset_Handler+0x68>)
    2052:	4a0f      	ldr	r2, [pc, #60]	; (2090 <Reset_Handler+0x6c>)
    2054:	58d4      	ldr	r4, [r2, r3]
    2056:	50cc      	str	r4, [r1, r3]
    2058:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    205a:	4283      	cmp	r3, r0
    205c:	d1fa      	bne.n	2054 <Reset_Handler+0x30>
    205e:	e7ea      	b.n	2036 <Reset_Handler+0x12>
    2060:	4b0e      	ldr	r3, [pc, #56]	; (209c <Reset_Handler+0x78>)
    2062:	1d1a      	adds	r2, r3, #4
    2064:	490c      	ldr	r1, [pc, #48]	; (2098 <Reset_Handler+0x74>)
    2066:	3103      	adds	r1, #3
    2068:	1a89      	subs	r1, r1, r2
    206a:	0889      	lsrs	r1, r1, #2
    206c:	0089      	lsls	r1, r1, #2
    206e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    2070:	2100      	movs	r1, #0
    2072:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2074:	4293      	cmp	r3, r2
    2076:	d1fc      	bne.n	2072 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2078:	4b0a      	ldr	r3, [pc, #40]	; (20a4 <Reset_Handler+0x80>)
    207a:	217f      	movs	r1, #127	; 0x7f
    207c:	4a0a      	ldr	r2, [pc, #40]	; (20a8 <Reset_Handler+0x84>)
    207e:	438a      	bics	r2, r1
    2080:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    2082:	4b0a      	ldr	r3, [pc, #40]	; (20ac <Reset_Handler+0x88>)
    2084:	4798      	blx	r3

        /* Branch to main function */
        main();
    2086:	4b0a      	ldr	r3, [pc, #40]	; (20b0 <Reset_Handler+0x8c>)
    2088:	4798      	blx	r3
    208a:	e7fe      	b.n	208a <Reset_Handler+0x66>
    208c:	20000000 	.word	0x20000000
    2090:	000061a0 	.word	0x000061a0
    2094:	20000070 	.word	0x20000070
    2098:	20000fd0 	.word	0x20000fd0
    209c:	20000070 	.word	0x20000070
    20a0:	20000004 	.word	0x20000004
    20a4:	e000ed00 	.word	0xe000ed00
    20a8:	00000000 	.word	0x00000000
    20ac:	00005835 	.word	0x00005835
    20b0:	00005621 	.word	0x00005621

000020b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    20b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20b6:	4647      	mov	r7, r8
    20b8:	b480      	push	{r7}
    20ba:	1c0c      	adds	r4, r1, #0
    20bc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    20be:	2800      	cmp	r0, #0
    20c0:	d10c      	bne.n	20dc <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    20c2:	2a00      	cmp	r2, #0
    20c4:	dd0d      	ble.n	20e2 <_read+0x2e>
    20c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    20c8:	4e09      	ldr	r6, [pc, #36]	; (20f0 <_read+0x3c>)
    20ca:	4d0a      	ldr	r5, [pc, #40]	; (20f4 <_read+0x40>)
    20cc:	6830      	ldr	r0, [r6, #0]
    20ce:	1c21      	adds	r1, r4, #0
    20d0:	682b      	ldr	r3, [r5, #0]
    20d2:	4798      	blx	r3
		ptr++;
    20d4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    20d6:	42bc      	cmp	r4, r7
    20d8:	d1f8      	bne.n	20cc <_read+0x18>
    20da:	e004      	b.n	20e6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    20dc:	2001      	movs	r0, #1
    20de:	4240      	negs	r0, r0
    20e0:	e002      	b.n	20e8 <_read+0x34>
	}

	for (; len > 0; --len) {
    20e2:	2000      	movs	r0, #0
    20e4:	e000      	b.n	20e8 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    20e6:	4640      	mov	r0, r8
	}
	return nChars;
}
    20e8:	bc04      	pop	{r2}
    20ea:	4690      	mov	r8, r2
    20ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	20000eb0 	.word	0x20000eb0
    20f4:	20000ea8 	.word	0x20000ea8

000020f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	4647      	mov	r7, r8
    20fc:	b480      	push	{r7}
    20fe:	1c0e      	adds	r6, r1, #0
    2100:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2102:	3801      	subs	r0, #1
    2104:	2802      	cmp	r0, #2
    2106:	d810      	bhi.n	212a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2108:	2a00      	cmp	r2, #0
    210a:	d011      	beq.n	2130 <_write+0x38>
    210c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    210e:	4b0d      	ldr	r3, [pc, #52]	; (2144 <_write+0x4c>)
    2110:	4698      	mov	r8, r3
    2112:	4f0d      	ldr	r7, [pc, #52]	; (2148 <_write+0x50>)
    2114:	4643      	mov	r3, r8
    2116:	6818      	ldr	r0, [r3, #0]
    2118:	5d31      	ldrb	r1, [r6, r4]
    211a:	683b      	ldr	r3, [r7, #0]
    211c:	4798      	blx	r3
    211e:	2800      	cmp	r0, #0
    2120:	db08      	blt.n	2134 <_write+0x3c>
			return -1;
		}
		++nChars;
    2122:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    2124:	42a5      	cmp	r5, r4
    2126:	d1f5      	bne.n	2114 <_write+0x1c>
    2128:	e007      	b.n	213a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    212a:	2001      	movs	r0, #1
    212c:	4240      	negs	r0, r0
    212e:	e005      	b.n	213c <_write+0x44>
	}

	for (; len != 0; --len) {
    2130:	2000      	movs	r0, #0
    2132:	e003      	b.n	213c <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    2134:	2001      	movs	r0, #1
    2136:	4240      	negs	r0, r0
    2138:	e000      	b.n	213c <_write+0x44>
		}
		++nChars;
    213a:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    213c:	bc04      	pop	{r2}
    213e:	4690      	mov	r8, r2
    2140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	20000eb0 	.word	0x20000eb0
    2148:	20000eac 	.word	0x20000eac

0000214c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    214c:	4b06      	ldr	r3, [pc, #24]	; (2168 <_sbrk+0x1c>)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d102      	bne.n	215a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2154:	4a05      	ldr	r2, [pc, #20]	; (216c <_sbrk+0x20>)
    2156:	4b04      	ldr	r3, [pc, #16]	; (2168 <_sbrk+0x1c>)
    2158:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    215a:	4a03      	ldr	r2, [pc, #12]	; (2168 <_sbrk+0x1c>)
    215c:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    215e:	1818      	adds	r0, r3, r0
    2160:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    2162:	1c18      	adds	r0, r3, #0
    2164:	4770      	bx	lr
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	200000cc 	.word	0x200000cc
    216c:	20002fd0 	.word	0x20002fd0

00002170 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    2170:	2001      	movs	r0, #1
}
    2172:	4240      	negs	r0, r0
    2174:	4770      	bx	lr
    2176:	46c0      	nop			; (mov r8, r8)

00002178 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2178:	2000      	movs	r0, #0
    217a:	4770      	bx	lr

0000217c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    217c:	b570      	push	{r4, r5, r6, lr}
    217e:	b082      	sub	sp, #8
    2180:	1c05      	adds	r5, r0, #0
    2182:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    2184:	2200      	movs	r2, #0
    2186:	466b      	mov	r3, sp
    2188:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    218a:	4c06      	ldr	r4, [pc, #24]	; (21a4 <usart_serial_getchar+0x28>)
    218c:	1c28      	adds	r0, r5, #0
    218e:	4669      	mov	r1, sp
    2190:	3106      	adds	r1, #6
    2192:	47a0      	blx	r4
    2194:	2800      	cmp	r0, #0
    2196:	d1f9      	bne.n	218c <usart_serial_getchar+0x10>

	*c = temp;
    2198:	466b      	mov	r3, sp
    219a:	3306      	adds	r3, #6
    219c:	881b      	ldrh	r3, [r3, #0]
    219e:	7033      	strb	r3, [r6, #0]
}
    21a0:	b002      	add	sp, #8
    21a2:	bd70      	pop	{r4, r5, r6, pc}
    21a4:	00001089 	.word	0x00001089

000021a8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    21a8:	b570      	push	{r4, r5, r6, lr}
    21aa:	1c06      	adds	r6, r0, #0
    21ac:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    21ae:	4c03      	ldr	r4, [pc, #12]	; (21bc <usart_serial_putchar+0x14>)
    21b0:	1c30      	adds	r0, r6, #0
    21b2:	1c29      	adds	r1, r5, #0
    21b4:	47a0      	blx	r4
    21b6:	2800      	cmp	r0, #0
    21b8:	d1fa      	bne.n	21b0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    21ba:	bd70      	pop	{r4, r5, r6, pc}
    21bc:	0000105d 	.word	0x0000105d

000021c0 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    21c0:	b510      	push	{r4, lr}
    21c2:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    21c4:	466c      	mov	r4, sp
    21c6:	3407      	adds	r4, #7
    21c8:	4812      	ldr	r0, [pc, #72]	; (2214 <USART_HOST_ISR_VECT+0x54>)
    21ca:	1c21      	adds	r1, r4, #0
    21cc:	2201      	movs	r2, #1
    21ce:	4b12      	ldr	r3, [pc, #72]	; (2218 <USART_HOST_ISR_VECT+0x58>)
    21d0:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    21d2:	b672      	cpsid	i
    21d4:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    21d8:	2200      	movs	r2, #0
    21da:	4b10      	ldr	r3, [pc, #64]	; (221c <USART_HOST_ISR_VECT+0x5c>)
    21dc:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
    21de:	4b10      	ldr	r3, [pc, #64]	; (2220 <USART_HOST_ISR_VECT+0x60>)
    21e0:	781a      	ldrb	r2, [r3, #0]
    21e2:	3201      	adds	r2, #1
    21e4:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
    21e6:	4b0f      	ldr	r3, [pc, #60]	; (2224 <USART_HOST_ISR_VECT+0x64>)
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	7821      	ldrb	r1, [r4, #0]
    21ec:	4a0e      	ldr	r2, [pc, #56]	; (2228 <USART_HOST_ISR_VECT+0x68>)
    21ee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    21f0:	2b9b      	cmp	r3, #155	; 0x9b
    21f2:	d103      	bne.n	21fc <USART_HOST_ISR_VECT+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    21f4:	2200      	movs	r2, #0
    21f6:	4b0b      	ldr	r3, [pc, #44]	; (2224 <USART_HOST_ISR_VECT+0x64>)
    21f8:	701a      	strb	r2, [r3, #0]
    21fa:	e002      	b.n	2202 <USART_HOST_ISR_VECT+0x42>
	} else {
		serial_rx_buf_tail++;
    21fc:	3301      	adds	r3, #1
    21fe:	4a09      	ldr	r2, [pc, #36]	; (2224 <USART_HOST_ISR_VECT+0x64>)
    2200:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    2202:	2201      	movs	r2, #1
    2204:	4b05      	ldr	r3, [pc, #20]	; (221c <USART_HOST_ISR_VECT+0x5c>)
    2206:	701a      	strb	r2, [r3, #0]
    2208:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    220c:	b662      	cpsie	i
}
    220e:	b002      	add	sp, #8
    2210:	bd10      	pop	{r4, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	20000170 	.word	0x20000170
    2218:	000011bd 	.word	0x000011bd
    221c:	20000008 	.word	0x20000008
    2220:	200001a5 	.word	0x200001a5
    2224:	200001a4 	.word	0x200001a4
    2228:	200000d4 	.word	0x200000d4

0000222c <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    222c:	b5f0      	push	{r4, r5, r6, r7, lr}
    222e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2230:	2380      	movs	r3, #128	; 0x80
    2232:	05db      	lsls	r3, r3, #23
    2234:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2236:	2300      	movs	r3, #0
    2238:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    223a:	22ff      	movs	r2, #255	; 0xff
    223c:	4668      	mov	r0, sp
    223e:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    2240:	2200      	movs	r2, #0
    2242:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2244:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2246:	2601      	movs	r6, #1
    2248:	2124      	movs	r1, #36	; 0x24
    224a:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    224c:	2125      	movs	r1, #37	; 0x25
    224e:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    2250:	2126      	movs	r1, #38	; 0x26
    2252:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2254:	2127      	movs	r1, #39	; 0x27
    2256:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2258:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    225a:	212c      	movs	r1, #44	; 0x2c
    225c:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    225e:	212d      	movs	r1, #45	; 0x2d
    2260:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2262:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2264:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2266:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    2268:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    226a:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    226c:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    226e:	2313      	movs	r3, #19
    2270:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    2272:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    2274:	2380      	movs	r3, #128	; 0x80
    2276:	035b      	lsls	r3, r3, #13
    2278:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    227a:	4b2c      	ldr	r3, [pc, #176]	; (232c <sio2host_init+0x100>)
    227c:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    227e:	4b2c      	ldr	r3, [pc, #176]	; (2330 <sio2host_init+0x104>)
    2280:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    2282:	2301      	movs	r3, #1
    2284:	425b      	negs	r3, r3
    2286:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    2288:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    228a:	2396      	movs	r3, #150	; 0x96
    228c:	021b      	lsls	r3, r3, #8
    228e:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2290:	4c28      	ldr	r4, [pc, #160]	; (2334 <sio2host_init+0x108>)
    2292:	4b29      	ldr	r3, [pc, #164]	; (2338 <sio2host_init+0x10c>)
    2294:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2296:	4a29      	ldr	r2, [pc, #164]	; (233c <sio2host_init+0x110>)
    2298:	4b29      	ldr	r3, [pc, #164]	; (2340 <sio2host_init+0x114>)
    229a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    229c:	4a29      	ldr	r2, [pc, #164]	; (2344 <sio2host_init+0x118>)
    229e:	4b2a      	ldr	r3, [pc, #168]	; (2348 <sio2host_init+0x11c>)
    22a0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    22a2:	1c20      	adds	r0, r4, #0
    22a4:	4929      	ldr	r1, [pc, #164]	; (234c <sio2host_init+0x120>)
    22a6:	466a      	mov	r2, sp
    22a8:	4b29      	ldr	r3, [pc, #164]	; (2350 <sio2host_init+0x124>)
    22aa:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    22ac:	4f29      	ldr	r7, [pc, #164]	; (2354 <sio2host_init+0x128>)
    22ae:	683b      	ldr	r3, [r7, #0]
    22b0:	6898      	ldr	r0, [r3, #8]
    22b2:	2100      	movs	r1, #0
    22b4:	4d28      	ldr	r5, [pc, #160]	; (2358 <sio2host_init+0x12c>)
    22b6:	47a8      	blx	r5
	setbuf(stdin, NULL);
    22b8:	683b      	ldr	r3, [r7, #0]
    22ba:	6858      	ldr	r0, [r3, #4]
    22bc:	2100      	movs	r1, #0
    22be:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    22c0:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22c2:	1c28      	adds	r0, r5, #0
    22c4:	4b25      	ldr	r3, [pc, #148]	; (235c <sio2host_init+0x130>)
    22c6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    22c8:	231f      	movs	r3, #31
    22ca:	4018      	ands	r0, r3
    22cc:	4086      	lsls	r6, r0
    22ce:	4b24      	ldr	r3, [pc, #144]	; (2360 <sio2host_init+0x134>)
    22d0:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    22d2:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    22d4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    22d6:	2b00      	cmp	r3, #0
    22d8:	d1fc      	bne.n	22d4 <sio2host_init+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    22da:	682a      	ldr	r2, [r5, #0]
    22dc:	2302      	movs	r3, #2
    22de:	4313      	orrs	r3, r2
    22e0:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    22e2:	4b14      	ldr	r3, [pc, #80]	; (2334 <sio2host_init+0x108>)
    22e4:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    22e6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    22e8:	2a00      	cmp	r2, #0
    22ea:	d1fc      	bne.n	22e6 <sio2host_init+0xba>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    22ec:	6859      	ldr	r1, [r3, #4]
    22ee:	2280      	movs	r2, #128	; 0x80
    22f0:	0252      	lsls	r2, r2, #9
    22f2:	430a      	orrs	r2, r1
    22f4:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    22f6:	2101      	movs	r1, #1
    22f8:	4a0e      	ldr	r2, [pc, #56]	; (2334 <sio2host_init+0x108>)
    22fa:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    22fc:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    22fe:	2a00      	cmp	r2, #0
    2300:	d1fc      	bne.n	22fc <sio2host_init+0xd0>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    2302:	6859      	ldr	r1, [r3, #4]
    2304:	2280      	movs	r2, #128	; 0x80
    2306:	0292      	lsls	r2, r2, #10
    2308:	430a      	orrs	r2, r1
    230a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    230c:	2201      	movs	r2, #1
    230e:	4b09      	ldr	r3, [pc, #36]	; (2334 <sio2host_init+0x108>)
    2310:	719a      	strb	r2, [r3, #6]
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    2312:	2000      	movs	r0, #0
    2314:	4913      	ldr	r1, [pc, #76]	; (2364 <sio2host_init+0x138>)
    2316:	4b14      	ldr	r3, [pc, #80]	; (2368 <sio2host_init+0x13c>)
    2318:	4798      	blx	r3
    231a:	2204      	movs	r2, #4
    231c:	4b0b      	ldr	r3, [pc, #44]	; (234c <sio2host_init+0x120>)
    231e:	759a      	strb	r2, [r3, #22]
    2320:	2280      	movs	r2, #128	; 0x80
    2322:	0092      	lsls	r2, r2, #2
    2324:	4b0e      	ldr	r3, [pc, #56]	; (2360 <sio2host_init+0x134>)
    2326:	601a      	str	r2, [r3, #0]
}
    2328:	b011      	add	sp, #68	; 0x44
    232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    232c:	00040003 	.word	0x00040003
    2330:	00050003 	.word	0x00050003
    2334:	20000170 	.word	0x20000170
    2338:	20000eb0 	.word	0x20000eb0
    233c:	000021a9 	.word	0x000021a9
    2340:	20000eac 	.word	0x20000eac
    2344:	0000217d 	.word	0x0000217d
    2348:	20000ea8 	.word	0x20000ea8
    234c:	42000800 	.word	0x42000800
    2350:	00000d55 	.word	0x00000d55
    2354:	2000006c 	.word	0x2000006c
    2358:	00005979 	.word	0x00005979
    235c:	0000094d 	.word	0x0000094d
    2360:	e000e100 	.word	0xe000e100
    2364:	000021c1 	.word	0x000021c1
    2368:	00000911 	.word	0x00000911

0000236c <sio2host_tx>:

uint8_t sio2host_tx(uint8_t *data, uint8_t length)
{
    236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236e:	1c07      	adds	r7, r0, #0
    2370:	1c0c      	adds	r4, r1, #0
static inline enum status_code usart_serial_write_packet(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
	return usart_write_buffer_wait(module, tx_data, length);
    2372:	4e05      	ldr	r6, [pc, #20]	; (2388 <sio2host_tx+0x1c>)
    2374:	4d05      	ldr	r5, [pc, #20]	; (238c <sio2host_tx+0x20>)
    2376:	1c30      	adds	r0, r6, #0
    2378:	1c39      	adds	r1, r7, #0
    237a:	1c22      	adds	r2, r4, #0
    237c:	47a8      	blx	r5
#else
		status = usart_serial_write_packet(USART_HOST,
				(const uint8_t *)data,
				length);
#endif
	} while (status != STATUS_OK);
    237e:	2800      	cmp	r0, #0
    2380:	d1f9      	bne.n	2376 <sio2host_tx+0xa>
	return length;
}
    2382:	1c20      	adds	r0, r4, #0
    2384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	20000170 	.word	0x20000170
    238c:	00001101 	.word	0x00001101

00002390 <sio2host_rx>:

uint8_t sio2host_rx(uint8_t *data, uint8_t max_length)
{
    2390:	b5f0      	push	{r4, r5, r6, r7, lr}
    2392:	1c03      	adds	r3, r0, #0
	uint8_t data_received = 0;
	if (0 == serial_rx_count) {
    2394:	4a1b      	ldr	r2, [pc, #108]	; (2404 <sio2host_rx+0x74>)
    2396:	7812      	ldrb	r2, [r2, #0]
		return 0;
    2398:	2000      	movs	r0, #0
}

uint8_t sio2host_rx(uint8_t *data, uint8_t max_length)
{
	uint8_t data_received = 0;
	if (0 == serial_rx_count) {
    239a:	2a00      	cmp	r2, #0
    239c:	d030      	beq.n	2400 <sio2host_rx+0x70>
		return 0;
	}

	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    239e:	2a9b      	cmp	r2, #155	; 0x9b
    23a0:	d913      	bls.n	23ca <sio2host_rx+0x3a>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		serial_rx_buf_head = serial_rx_buf_tail;
    23a2:	4a19      	ldr	r2, [pc, #100]	; (2408 <sio2host_rx+0x78>)
    23a4:	7810      	ldrb	r0, [r2, #0]
    23a6:	4a19      	ldr	r2, [pc, #100]	; (240c <sio2host_rx+0x7c>)
    23a8:	7010      	strb	r0, [r2, #0]
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    23aa:	209c      	movs	r0, #156	; 0x9c
    23ac:	4a15      	ldr	r2, [pc, #84]	; (2404 <sio2host_rx+0x74>)
    23ae:	7010      	strb	r0, [r2, #0]

		/* Bytes received is more than or equal to buffer. */
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    23b0:	299b      	cmp	r1, #155	; 0x9b
    23b2:	d90f      	bls.n	23d4 <sio2host_rx+0x44>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    23b4:	219c      	movs	r1, #156	; 0x9c
    23b6:	4a15      	ldr	r2, [pc, #84]	; (240c <sio2host_rx+0x7c>)
    23b8:	7812      	ldrb	r2, [r2, #0]
    23ba:	4812      	ldr	r0, [pc, #72]	; (2404 <sio2host_rx+0x74>)
    23bc:	7807      	ldrb	r7, [r0, #0]
    23be:	1e4d      	subs	r5, r1, #1
    23c0:	b2ed      	uxtb	r5, r5
    23c2:	3501      	adds	r5, #1
    23c4:	195d      	adds	r5, r3, r5
	}

	data_received = max_length;
	while (max_length > 0) {
		/* Start to copy from head. */
		*data = serial_rx_buf[serial_rx_buf_head];
    23c6:	4c12      	ldr	r4, [pc, #72]	; (2410 <sio2host_rx+0x80>)
    23c8:	e007      	b.n	23da <sio2host_rx+0x4a>
    23ca:	1c08      	adds	r0, r1, #0
    23cc:	4291      	cmp	r1, r2
    23ce:	d900      	bls.n	23d2 <sio2host_rx+0x42>
    23d0:	1c10      	adds	r0, r2, #0
    23d2:	b2c1      	uxtb	r1, r0
			max_length = serial_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    23d4:	1e08      	subs	r0, r1, #0
    23d6:	d013      	beq.n	2400 <sio2host_rx+0x70>
    23d8:	e7ed      	b.n	23b6 <sio2host_rx+0x26>
		/* Start to copy from head. */
		*data = serial_rx_buf[serial_rx_buf_head];
    23da:	5ca0      	ldrb	r0, [r4, r2]
    23dc:	7018      	strb	r0, [r3, #0]
		serial_rx_buf_head++;
    23de:	3201      	adds	r2, #1
    23e0:	b2d0      	uxtb	r0, r2
		serial_rx_count--;
		data++;
    23e2:	3301      	adds	r3, #1
		max_length--;
		if ((SERIAL_RX_BUF_SIZE_HOST) == serial_rx_buf_head) {
			serial_rx_buf_head = 0;
    23e4:	1c02      	adds	r2, r0, #0
    23e6:	3a9c      	subs	r2, #156	; 0x9c
    23e8:	1e56      	subs	r6, r2, #1
    23ea:	41b2      	sbcs	r2, r6
    23ec:	4252      	negs	r2, r2
    23ee:	4002      	ands	r2, r0
			max_length = serial_rx_count;
		}
	}

	data_received = max_length;
	while (max_length > 0) {
    23f0:	42ab      	cmp	r3, r5
    23f2:	d1f2      	bne.n	23da <sio2host_rx+0x4a>
    23f4:	4b05      	ldr	r3, [pc, #20]	; (240c <sio2host_rx+0x7c>)
    23f6:	701a      	strb	r2, [r3, #0]
    23f8:	1a7a      	subs	r2, r7, r1
    23fa:	4b02      	ldr	r3, [pc, #8]	; (2404 <sio2host_rx+0x74>)
    23fc:	701a      	strb	r2, [r3, #0]
    23fe:	1c08      	adds	r0, r1, #0
		if ((SERIAL_RX_BUF_SIZE_HOST) == serial_rx_buf_head) {
			serial_rx_buf_head = 0;
		}
	}
	return data_received;
}
    2400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	200001a5 	.word	0x200001a5
    2408:	200001a4 	.word	0x200001a4
    240c:	200000d0 	.word	0x200000d0
    2410:	200000d4 	.word	0x200000d4

00002414 <sio2host_putchar>:
	}
	return c;
}

void sio2host_putchar(uint8_t ch)
{
    2414:	b500      	push	{lr}
    2416:	b083      	sub	sp, #12
    2418:	466b      	mov	r3, sp
    241a:	71d8      	strb	r0, [r3, #7]
    241c:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    241e:	1c18      	adds	r0, r3, #0
    2420:	2101      	movs	r1, #1
    2422:	4b02      	ldr	r3, [pc, #8]	; (242c <sio2host_putchar+0x18>)
    2424:	4798      	blx	r3
}
    2426:	b003      	add	sp, #12
    2428:	bd00      	pop	{pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	0000236d 	.word	0x0000236d

00002430 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    2430:	2280      	movs	r2, #128	; 0x80
    2432:	0312      	lsls	r2, r2, #12
    2434:	4b01      	ldr	r3, [pc, #4]	; (243c <appCmdIdentifyPeriodTimerHandler+0xc>)
    2436:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    2438:	4770      	bx	lr
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	41004400 	.word	0x41004400

00002440 <appCmdHandle>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
    2440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2442:	1c04      	adds	r4, r0, #0
	AppCmdHeader_t *header = (AppCmdHeader_t *)data;

	if (size < sizeof(AppCmdHeader_t)) {
		return false;
    2444:	2000      	movs	r0, #0
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
	AppCmdHeader_t *header = (AppCmdHeader_t *)data;

	if (size < sizeof(AppCmdHeader_t)) {
    2446:	2900      	cmp	r1, #0
    2448:	d029      	beq.n	249e <appCmdHandle+0x5e>
		return false;
	}

	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    244a:	7822      	ldrb	r2, [r4, #0]
    244c:	2a10      	cmp	r2, #16
    244e:	d126      	bne.n	249e <appCmdHandle+0x5e>
		AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;

		if (sizeof(AppCmdIdentify_t) != size) {
    2450:	2905      	cmp	r1, #5
    2452:	d124      	bne.n	249e <appCmdHandle+0x5e>
			return false;
		}

		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    2454:	4e12      	ldr	r6, [pc, #72]	; (24a0 <appCmdHandle+0x60>)
    2456:	1c30      	adds	r0, r6, #0
    2458:	4f12      	ldr	r7, [pc, #72]	; (24a4 <appCmdHandle+0x64>)
    245a:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    245c:	4d12      	ldr	r5, [pc, #72]	; (24a8 <appCmdHandle+0x68>)
    245e:	1c28      	adds	r0, r5, #0
    2460:	47b8      	blx	r7

		appCmdIdentifyDurationTimer.interval = req->duration;
    2462:	7862      	ldrb	r2, [r4, #1]
    2464:	78a3      	ldrb	r3, [r4, #2]
    2466:	021b      	lsls	r3, r3, #8
    2468:	4313      	orrs	r3, r2
    246a:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    246c:	2300      	movs	r3, #0
    246e:	7333      	strb	r3, [r6, #12]
		appCmdIdentifyDurationTimer.handler
			= appCmdIdentifyDurationTimerHandler;
    2470:	4b0e      	ldr	r3, [pc, #56]	; (24ac <appCmdHandle+0x6c>)
    2472:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    2474:	1c30      	adds	r0, r6, #0
    2476:	4e0e      	ldr	r6, [pc, #56]	; (24b0 <appCmdHandle+0x70>)
    2478:	47b0      	blx	r6

		appCmdIdentifyPeriodTimer.interval = req->period;
    247a:	78e2      	ldrb	r2, [r4, #3]
    247c:	7923      	ldrb	r3, [r4, #4]
    247e:	021b      	lsls	r3, r3, #8
    2480:	4313      	orrs	r3, r2
    2482:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    2484:	2301      	movs	r3, #1
    2486:	732b      	strb	r3, [r5, #12]
		appCmdIdentifyPeriodTimer.handler
			= appCmdIdentifyPeriodTimerHandler;
    2488:	4b0a      	ldr	r3, [pc, #40]	; (24b4 <appCmdHandle+0x74>)
    248a:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    248c:	1c28      	adds	r0, r5, #0
    248e:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2490:	2280      	movs	r2, #128	; 0x80
    2492:	0312      	lsls	r2, r2, #12
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <appCmdHandle+0x78>)
    2496:	615a      	str	r2, [r3, #20]
#if (LED_COUNT > 0)
		LED_On(LED_IDENTIFY);
#endif
		NWK_Lock();
    2498:	4b08      	ldr	r3, [pc, #32]	; (24bc <appCmdHandle+0x7c>)
    249a:	4798      	blx	r3

		return true;
    249c:	2001      	movs	r0, #1
	}

	return false;
}
    249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24a0:	200001b0 	.word	0x200001b0
    24a4:	000046c9 	.word	0x000046c9
    24a8:	200001f4 	.word	0x200001f4
    24ac:	00002549 	.word	0x00002549
    24b0:	0000473d 	.word	0x0000473d
    24b4:	00002431 	.word	0x00002431
    24b8:	41004400 	.word	0x41004400
    24bc:	00002cd1 	.word	0x00002cd1

000024c0 <appCmdDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appCmdDataInd(NWK_DataInd_t *ind)
{
    24c0:	b508      	push	{r3, lr}
    24c2:	1c03      	adds	r3, r0, #0
	return appCmdHandle(ind->data, ind->size);
    24c4:	6880      	ldr	r0, [r0, #8]
    24c6:	7b19      	ldrb	r1, [r3, #12]
    24c8:	4b01      	ldr	r3, [pc, #4]	; (24d0 <appCmdDataInd+0x10>)
    24ca:	4798      	blx	r3
}
    24cc:	bd08      	pop	{r3, pc}
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	00002441 	.word	0x00002441

000024d4 <appCmdCheckPendingTable>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
    24d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (appCmdInProgress) {
    24d6:	4b0f      	ldr	r3, [pc, #60]	; (2514 <appCmdCheckPendingTable+0x40>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	2b00      	cmp	r3, #0
    24dc:	d119      	bne.n	2512 <appCmdCheckPendingTable+0x3e>
    24de:	4f0e      	ldr	r7, [pc, #56]	; (2518 <appCmdCheckPendingTable+0x44>)
    24e0:	1cfc      	adds	r4, r7, #3
    24e2:	3730      	adds	r7, #48	; 0x30

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
	appCmdInProgress = entry;
    24e4:	4e0b      	ldr	r6, [pc, #44]	; (2514 <appCmdCheckPendingTable+0x40>)

	appCmdDataReq.dstAddr = entry->addr;
    24e6:	4d0d      	ldr	r5, [pc, #52]	; (251c <appCmdCheckPendingTable+0x48>)
	if (appCmdInProgress) {
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		if (appCmdPendingTable[i].ready) {
    24e8:	7823      	ldrb	r3, [r4, #0]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d00e      	beq.n	250c <appCmdCheckPendingTable+0x38>
    24ee:	1ee3      	subs	r3, r4, #3

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
	appCmdInProgress = entry;
    24f0:	6033      	str	r3, [r6, #0]

	appCmdDataReq.dstAddr = entry->addr;
    24f2:	781a      	ldrb	r2, [r3, #0]
    24f4:	785b      	ldrb	r3, [r3, #1]
    24f6:	021b      	lsls	r3, r3, #8
    24f8:	4313      	orrs	r3, r2
    24fa:	816b      	strh	r3, [r5, #10]
    24fc:	1c63      	adds	r3, r4, #1
	appCmdDataReq.data = &entry->payload;
    24fe:	612b      	str	r3, [r5, #16]
    2500:	1e63      	subs	r3, r4, #1
	appCmdDataReq.size = entry->size;
    2502:	781b      	ldrb	r3, [r3, #0]
    2504:	752b      	strb	r3, [r5, #20]
	NWK_DataReq(&appCmdDataReq);
    2506:	1c28      	adds	r0, r5, #0
    2508:	4b05      	ldr	r3, [pc, #20]	; (2520 <appCmdCheckPendingTable+0x4c>)
    250a:	4798      	blx	r3
    250c:	3409      	adds	r4, #9
{
	if (appCmdInProgress) {
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    250e:	42bc      	cmp	r4, r7
    2510:	d1ea      	bne.n	24e8 <appCmdCheckPendingTable+0x14>
		if (appCmdPendingTable[i].ready) {
			appCmdDataRequest(&appCmdPendingTable[i]);
		}
	}
}
    2512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2514:	200001a8 	.word	0x200001a8
    2518:	2000020c 	.word	0x2000020c
    251c:	200001d4 	.word	0x200001d4
    2520:	00002d61 	.word	0x00002d61

00002524 <appCmdDataConf>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(NWK_DataReq_t *req)
{
    2524:	b508      	push	{r3, lr}
	appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
    2526:	4a06      	ldr	r2, [pc, #24]	; (2540 <appCmdDataConf+0x1c>)
    2528:	6813      	ldr	r3, [r2, #0]
    252a:	2101      	movs	r1, #1
    252c:	4249      	negs	r1, r1
    252e:	7019      	strb	r1, [r3, #0]
    2530:	7059      	strb	r1, [r3, #1]
	appCmdInProgress->ready = false;
    2532:	2100      	movs	r1, #0
    2534:	70d9      	strb	r1, [r3, #3]
	appCmdInProgress = NULL;
    2536:	6011      	str	r1, [r2, #0]

	appCmdCheckPendingTable();
    2538:	4b02      	ldr	r3, [pc, #8]	; (2544 <appCmdDataConf+0x20>)
    253a:	4798      	blx	r3

	(void)req;
}
    253c:	bd08      	pop	{r3, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	200001a8 	.word	0x200001a8
    2544:	000024d5 	.word	0x000024d5

00002548 <appCmdIdentifyDurationTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyDurationTimerHandler(SYS_Timer_t *timer)
{
    2548:	b508      	push	{r3, lr}
	NWK_Unlock();
    254a:	4b05      	ldr	r3, [pc, #20]	; (2560 <appCmdIdentifyDurationTimerHandler+0x18>)
    254c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    254e:	2280      	movs	r2, #128	; 0x80
    2550:	0312      	lsls	r2, r2, #12
    2552:	4b04      	ldr	r3, [pc, #16]	; (2564 <appCmdIdentifyDurationTimerHandler+0x1c>)
    2554:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
	LED_Off(LED_IDENTIFY);
#endif
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    2556:	4804      	ldr	r0, [pc, #16]	; (2568 <appCmdIdentifyDurationTimerHandler+0x20>)
    2558:	4b04      	ldr	r3, [pc, #16]	; (256c <appCmdIdentifyDurationTimerHandler+0x24>)
    255a:	4798      	blx	r3
	(void)timer;
}
    255c:	bd08      	pop	{r3, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	00002ce1 	.word	0x00002ce1
    2564:	41004400 	.word	0x41004400
    2568:	200001f4 	.word	0x200001f4
    256c:	000046c9 	.word	0x000046c9

00002570 <APP_CommandsInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsInit(void)
{
    2570:	b510      	push	{r4, lr}
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2572:	4b13      	ldr	r3, [pc, #76]	; (25c0 <APP_CommandsInit+0x50>)
    2574:	2200      	movs	r2, #0
    2576:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler
		= appCmdIdentifyDurationTimerHandler;
    2578:	4912      	ldr	r1, [pc, #72]	; (25c4 <APP_CommandsInit+0x54>)
    257a:	6119      	str	r1, [r3, #16]

	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    257c:	4b12      	ldr	r3, [pc, #72]	; (25c8 <APP_CommandsInit+0x58>)
    257e:	2101      	movs	r1, #1
    2580:	7319      	strb	r1, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    2582:	4912      	ldr	r1, [pc, #72]	; (25cc <APP_CommandsInit+0x5c>)
    2584:	6119      	str	r1, [r3, #16]

	appCmdInProgress = NULL;
    2586:	4b12      	ldr	r3, [pc, #72]	; (25d0 <APP_CommandsInit+0x60>)
    2588:	601a      	str	r2, [r3, #0]
	appCmdDataReq.dstAddr = 0;
    258a:	4b12      	ldr	r3, [pc, #72]	; (25d4 <APP_CommandsInit+0x64>)
    258c:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
    258e:	2202      	movs	r2, #2
    2590:	731a      	strb	r2, [r3, #12]
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
    2592:	735a      	strb	r2, [r3, #13]
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2594:	739a      	strb	r2, [r3, #14]
	appCmdDataReq.confirm = appCmdDataConf;
    2596:	4a10      	ldr	r2, [pc, #64]	; (25d8 <APP_CommandsInit+0x68>)
    2598:	619a      	str	r2, [r3, #24]
    259a:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    259c:	480f      	ldr	r0, [pc, #60]	; (25dc <APP_CommandsInit+0x6c>)
    259e:	2101      	movs	r1, #1
    25a0:	4249      	negs	r1, r1
		appCmdPendingTable[i].ready = false;
    25a2:	2400      	movs	r4, #0
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appCmdDataReq.confirm = appCmdDataConf;

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    25a4:	00da      	lsls	r2, r3, #3
    25a6:	18d2      	adds	r2, r2, r3
    25a8:	5411      	strb	r1, [r2, r0]
    25aa:	1882      	adds	r2, r0, r2
    25ac:	7051      	strb	r1, [r2, #1]
		appCmdPendingTable[i].ready = false;
    25ae:	70d4      	strb	r4, [r2, #3]
    25b0:	3301      	adds	r3, #1
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appCmdDataReq.confirm = appCmdDataConf;

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    25b2:	2b05      	cmp	r3, #5
    25b4:	d1f6      	bne.n	25a4 <APP_CommandsInit+0x34>
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
		appCmdPendingTable[i].ready = false;
	}

	NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
    25b6:	2002      	movs	r0, #2
    25b8:	4909      	ldr	r1, [pc, #36]	; (25e0 <APP_CommandsInit+0x70>)
    25ba:	4b0a      	ldr	r3, [pc, #40]	; (25e4 <APP_CommandsInit+0x74>)
    25bc:	4798      	blx	r3
}
    25be:	bd10      	pop	{r4, pc}
    25c0:	200001b0 	.word	0x200001b0
    25c4:	00002549 	.word	0x00002549
    25c8:	200001f4 	.word	0x200001f4
    25cc:	00002431 	.word	0x00002431
    25d0:	200001a8 	.word	0x200001a8
    25d4:	200001d4 	.word	0x200001d4
    25d8:	00002525 	.word	0x00002525
    25dc:	2000020c 	.word	0x2000020c
    25e0:	000024c1 	.word	0x000024c1
    25e4:	00002cc1 	.word	0x00002cc1

000025e8 <APP_CommandsPending>:

/*************************************************************************//**
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
    25e8:	b508      	push	{r3, lr}
    25ea:	1c03      	adds	r3, r0, #0
	for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		if (addr == appCmdPendingTable[i].addr) {
    25ec:	4a13      	ldr	r2, [pc, #76]	; (263c <APP_CommandsPending+0x54>)
    25ee:	6892      	ldr	r2, [r2, #8]
    25f0:	0212      	lsls	r2, r2, #8
    25f2:	0c12      	lsrs	r2, r2, #16
    25f4:	4282      	cmp	r2, r0
    25f6:	d015      	beq.n	2624 <APP_CommandsPending+0x3c>
    25f8:	4a10      	ldr	r2, [pc, #64]	; (263c <APP_CommandsPending+0x54>)
    25fa:	8a52      	ldrh	r2, [r2, #18]
    25fc:	4282      	cmp	r2, r0
    25fe:	d00d      	beq.n	261c <APP_CommandsPending+0x34>
    2600:	4a0e      	ldr	r2, [pc, #56]	; (263c <APP_CommandsPending+0x54>)
    2602:	7ed1      	ldrb	r1, [r2, #27]
    2604:	7f12      	ldrb	r2, [r2, #28]
    2606:	0212      	lsls	r2, r2, #8
    2608:	430a      	orrs	r2, r1
    260a:	4282      	cmp	r2, r0
    260c:	d008      	beq.n	2620 <APP_CommandsPending+0x38>
    260e:	4a0b      	ldr	r2, [pc, #44]	; (263c <APP_CommandsPending+0x54>)
    2610:	8c92      	ldrh	r2, [r2, #36]	; 0x24
			appCmdCheckPendingTable();
			return true;
		}
	}

	return false;
    2612:	2000      	movs	r0, #0
/*************************************************************************//**
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
	for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		if (addr == appCmdPendingTable[i].addr) {
    2614:	429a      	cmp	r2, r3
    2616:	d10f      	bne.n	2638 <APP_CommandsPending+0x50>
    2618:	2304      	movs	r3, #4
    261a:	e004      	b.n	2626 <APP_CommandsPending+0x3e>
    261c:	2302      	movs	r3, #2
    261e:	e002      	b.n	2626 <APP_CommandsPending+0x3e>
    2620:	2303      	movs	r3, #3
    2622:	e000      	b.n	2626 <APP_CommandsPending+0x3e>
    2624:	2301      	movs	r3, #1
			appCmdPendingTable[i].ready = true;
    2626:	00da      	lsls	r2, r3, #3
    2628:	18d3      	adds	r3, r2, r3
    262a:	4a04      	ldr	r2, [pc, #16]	; (263c <APP_CommandsPending+0x54>)
    262c:	18d3      	adds	r3, r2, r3
    262e:	2201      	movs	r2, #1
    2630:	70da      	strb	r2, [r3, #3]
			appCmdCheckPendingTable();
    2632:	4b03      	ldr	r3, [pc, #12]	; (2640 <APP_CommandsPending+0x58>)
    2634:	4798      	blx	r3
			return true;
    2636:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2638:	bd08      	pop	{r3, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	2000020c 	.word	0x2000020c
    2640:	000024d5 	.word	0x000024d5

00002644 <APP_CommandsByteReceived>:

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsByteReceived(uint8_t byte)
{
    2644:	b500      	push	{lr}
    2646:	b083      	sub	sp, #12
	switch (appCmdUartState) {
    2648:	4b66      	ldr	r3, [pc, #408]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    264a:	781a      	ldrb	r2, [r3, #0]
    264c:	2a04      	cmp	r2, #4
    264e:	d900      	bls.n	2652 <APP_CommandsByteReceived+0xe>
    2650:	e0c5      	b.n	27de <APP_CommandsByteReceived+0x19a>
    2652:	0093      	lsls	r3, r2, #2
    2654:	4a64      	ldr	r2, [pc, #400]	; (27e8 <APP_CommandsByteReceived+0x1a4>)
    2656:	58d3      	ldr	r3, [r2, r3]
    2658:	469f      	mov	pc, r3
	case APP_CMD_UART_STATE_IDLE:
	{
		if (0x10 == byte) {   //data link escape (DLE)
    265a:	2810      	cmp	r0, #16
    265c:	d000      	beq.n	2660 <APP_CommandsByteReceived+0x1c>
    265e:	e0be      	b.n	27de <APP_CommandsByteReceived+0x19a>
			appCmdUartPtr = 0;
    2660:	2200      	movs	r2, #0
    2662:	4b62      	ldr	r3, [pc, #392]	; (27ec <APP_CommandsByteReceived+0x1a8>)
    2664:	701a      	strb	r2, [r3, #0]
			appCmdUartCsum = byte;
    2666:	2210      	movs	r2, #16
    2668:	4b61      	ldr	r3, [pc, #388]	; (27f0 <APP_CommandsByteReceived+0x1ac>)
    266a:	701a      	strb	r2, [r3, #0]
			appCmdUartState = APP_CMD_UART_STATE_SYNC;
    266c:	2201      	movs	r2, #1
    266e:	4b5d      	ldr	r3, [pc, #372]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    2670:	701a      	strb	r2, [r3, #0]
    2672:	e0b4      	b.n	27de <APP_CommandsByteReceived+0x19a>
	}
	break;

	case APP_CMD_UART_STATE_SYNC:
	{
		appCmdUartCsum += byte;
    2674:	4b5e      	ldr	r3, [pc, #376]	; (27f0 <APP_CommandsByteReceived+0x1ac>)
    2676:	781a      	ldrb	r2, [r3, #0]
    2678:	1882      	adds	r2, r0, r2
    267a:	701a      	strb	r2, [r3, #0]

		if (0x02 == byte) {  //start of text (STX)
    267c:	2802      	cmp	r0, #2
    267e:	d103      	bne.n	2688 <APP_CommandsByteReceived+0x44>
			appCmdUartState = APP_CMD_UART_STATE_DATA;
    2680:	2202      	movs	r2, #2
    2682:	4b58      	ldr	r3, [pc, #352]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    2684:	701a      	strb	r2, [r3, #0]
    2686:	e0aa      	b.n	27de <APP_CommandsByteReceived+0x19a>
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    2688:	2200      	movs	r2, #0
    268a:	4b56      	ldr	r3, [pc, #344]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    268c:	701a      	strb	r2, [r3, #0]
    268e:	e0a6      	b.n	27de <APP_CommandsByteReceived+0x19a>
	}
	break;

	case APP_CMD_UART_STATE_DATA:
	{
		appCmdUartCsum += byte;
    2690:	4b57      	ldr	r3, [pc, #348]	; (27f0 <APP_CommandsByteReceived+0x1ac>)
    2692:	781a      	ldrb	r2, [r3, #0]
    2694:	1882      	adds	r2, r0, r2
    2696:	701a      	strb	r2, [r3, #0]

		if (0x10 == byte) {  //Data Link Escape (DLE)
    2698:	2810      	cmp	r0, #16
    269a:	d103      	bne.n	26a4 <APP_CommandsByteReceived+0x60>
			appCmdUartState = APP_CMD_UART_STATE_MARK;
    269c:	2203      	movs	r2, #3
    269e:	4b51      	ldr	r3, [pc, #324]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    26a0:	701a      	strb	r2, [r3, #0]
    26a2:	e005      	b.n	26b0 <APP_CommandsByteReceived+0x6c>
		} else {
			appCmdUartBuf[appCmdUartPtr++] = byte;
    26a4:	4a51      	ldr	r2, [pc, #324]	; (27ec <APP_CommandsByteReceived+0x1a8>)
    26a6:	7813      	ldrb	r3, [r2, #0]
    26a8:	1c59      	adds	r1, r3, #1
    26aa:	7011      	strb	r1, [r2, #0]
    26ac:	4a51      	ldr	r2, [pc, #324]	; (27f4 <APP_CommandsByteReceived+0x1b0>)
    26ae:	54d0      	strb	r0, [r2, r3]
		}

		if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    26b0:	4b4e      	ldr	r3, [pc, #312]	; (27ec <APP_CommandsByteReceived+0x1a8>)
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	2b10      	cmp	r3, #16
    26b6:	d000      	beq.n	26ba <APP_CommandsByteReceived+0x76>
    26b8:	e091      	b.n	27de <APP_CommandsByteReceived+0x19a>
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    26ba:	2200      	movs	r2, #0
    26bc:	4b49      	ldr	r3, [pc, #292]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    26be:	701a      	strb	r2, [r3, #0]
    26c0:	e08d      	b.n	27de <APP_CommandsByteReceived+0x19a>
	}
	break;

	case APP_CMD_UART_STATE_MARK:
	{
		appCmdUartCsum += byte;
    26c2:	4b4b      	ldr	r3, [pc, #300]	; (27f0 <APP_CommandsByteReceived+0x1ac>)
    26c4:	781a      	ldrb	r2, [r3, #0]
    26c6:	1882      	adds	r2, r0, r2
    26c8:	701a      	strb	r2, [r3, #0]

		if (0x10 == byte) {  //Data Link Escape
    26ca:	2810      	cmp	r0, #16
    26cc:	d110      	bne.n	26f0 <APP_CommandsByteReceived+0xac>
			appCmdUartBuf[appCmdUartPtr++] = byte;
    26ce:	4947      	ldr	r1, [pc, #284]	; (27ec <APP_CommandsByteReceived+0x1a8>)
    26d0:	780a      	ldrb	r2, [r1, #0]
    26d2:	1c53      	adds	r3, r2, #1
    26d4:	b2db      	uxtb	r3, r3
    26d6:	700b      	strb	r3, [r1, #0]
    26d8:	4946      	ldr	r1, [pc, #280]	; (27f4 <APP_CommandsByteReceived+0x1b0>)
    26da:	5488      	strb	r0, [r1, r2]

			if (appCmdUartPtr == APP_CMD_UART_BUFFER_SIZE) {
    26dc:	2b10      	cmp	r3, #16
    26de:	d103      	bne.n	26e8 <APP_CommandsByteReceived+0xa4>
				appCmdUartState = APP_CMD_UART_STATE_IDLE;
    26e0:	2200      	movs	r2, #0
    26e2:	4b40      	ldr	r3, [pc, #256]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    26e4:	701a      	strb	r2, [r3, #0]
    26e6:	e07a      	b.n	27de <APP_CommandsByteReceived+0x19a>
			} else {
				appCmdUartState = APP_CMD_UART_STATE_DATA;
    26e8:	2202      	movs	r2, #2
    26ea:	4b3e      	ldr	r3, [pc, #248]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    26ec:	701a      	strb	r2, [r3, #0]
    26ee:	e076      	b.n	27de <APP_CommandsByteReceived+0x19a>
			}
		} else if (0x03 == byte) {  //End of text
    26f0:	2803      	cmp	r0, #3
    26f2:	d103      	bne.n	26fc <APP_CommandsByteReceived+0xb8>
			appCmdUartState = APP_CMD_UART_STATE_CSUM;
    26f4:	2204      	movs	r2, #4
    26f6:	4b3b      	ldr	r3, [pc, #236]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    26f8:	701a      	strb	r2, [r3, #0]
    26fa:	e070      	b.n	27de <APP_CommandsByteReceived+0x19a>
		} else {
			appCmdUartState = APP_CMD_UART_STATE_IDLE;
    26fc:	2200      	movs	r2, #0
    26fe:	4b39      	ldr	r3, [pc, #228]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    2700:	701a      	strb	r2, [r3, #0]
    2702:	e06c      	b.n	27de <APP_CommandsByteReceived+0x19a>
	}
	break;

	case APP_CMD_UART_STATE_CSUM:
	{
		if (byte == appCmdUartCsum) {
    2704:	4b3a      	ldr	r3, [pc, #232]	; (27f0 <APP_CommandsByteReceived+0x1ac>)
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	4283      	cmp	r3, r0
    270a:	d165      	bne.n	27d8 <APP_CommandsByteReceived+0x194>
			appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);
    270c:	4b37      	ldr	r3, [pc, #220]	; (27ec <APP_CommandsByteReceived+0x1a8>)
*****************************************************************************/
static void appCmdUartProcess(uint8_t *data, uint8_t size)
{
	AppCmdUartHeader_t *header = (AppCmdUartHeader_t *)data;

	if (size < sizeof(AppCmdUartHeader_t)) {
    270e:	781b      	ldrb	r3, [r3, #0]
    2710:	2b08      	cmp	r3, #8
    2712:	d961      	bls.n	27d8 <APP_CommandsByteReceived+0x194>
		return;
	}

	if (APP_COMMAND_ID_IDENTIFY == header->commandId) {
    2714:	4b37      	ldr	r3, [pc, #220]	; (27f4 <APP_CommandsByteReceived+0x1b0>)
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	2b10      	cmp	r3, #16
    271a:	d15d      	bne.n	27d8 <APP_CommandsByteReceived+0x194>
		AppCmdUartIdentify_t *uartCmd = (AppCmdUartIdentify_t *)data;
		AppCmdIdentify_t cmd;

		cmd.id = APP_COMMAND_ID_IDENTIFY;
    271c:	4668      	mov	r0, sp
    271e:	7003      	strb	r3, [r0, #0]
		cmd.duration = uartCmd->duration;
    2720:	4b34      	ldr	r3, [pc, #208]	; (27f4 <APP_CommandsByteReceived+0x1b0>)
    2722:	6899      	ldr	r1, [r3, #8]
    2724:	020a      	lsls	r2, r1, #8
    2726:	0c12      	lsrs	r2, r2, #16
    2728:	7042      	strb	r2, [r0, #1]
    272a:	0a12      	lsrs	r2, r2, #8
    272c:	7082      	strb	r2, [r0, #2]
		cmd.period = uartCmd->period;
    272e:	7ad9      	ldrb	r1, [r3, #11]
    2730:	7b1a      	ldrb	r2, [r3, #12]
    2732:	70c1      	strb	r1, [r0, #3]
    2734:	7102      	strb	r2, [r0, #4]

		appCmdBuffer(header->dstAddr, (uint8_t *)&cmd,
    2736:	681a      	ldr	r2, [r3, #0]
    2738:	0a11      	lsrs	r1, r2, #8
    273a:	791a      	ldrb	r2, [r3, #4]
    273c:	0612      	lsls	r2, r2, #24
    273e:	430a      	orrs	r2, r1
    2740:	b293      	uxth	r3, r2

/*************************************************************************//**
*****************************************************************************/
static void appCmdBuffer(uint16_t addr, uint8_t *data, uint8_t size)
{
	if (APP_ADDR == addr) {
    2742:	492d      	ldr	r1, [pc, #180]	; (27f8 <APP_CommandsByteReceived+0x1b4>)
    2744:	428b      	cmp	r3, r1
    2746:	d103      	bne.n	2750 <APP_CommandsByteReceived+0x10c>
		appCmdHandle(data, size);
    2748:	2105      	movs	r1, #5
    274a:	4b2c      	ldr	r3, [pc, #176]	; (27fc <APP_CommandsByteReceived+0x1b8>)
    274c:	4798      	blx	r3
    274e:	e043      	b.n	27d8 <APP_CommandsByteReceived+0x194>
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
    2750:	0410      	lsls	r0, r2, #16
    2752:	d52f      	bpl.n	27b4 <APP_CommandsByteReceived+0x170>
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
			if (APP_CMD_INVALID_ADDR ==
					appCmdPendingTable[i].addr) {
    2754:	4a2a      	ldr	r2, [pc, #168]	; (2800 <APP_CommandsByteReceived+0x1bc>)
    2756:	6891      	ldr	r1, [r2, #8]
    2758:	0209      	lsls	r1, r1, #8
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
			if (APP_CMD_INVALID_ADDR ==
    275a:	0c09      	lsrs	r1, r1, #16
    275c:	4a29      	ldr	r2, [pc, #164]	; (2804 <APP_CommandsByteReceived+0x1c0>)
    275e:	4291      	cmp	r1, r2
    2760:	d017      	beq.n	2792 <APP_CommandsByteReceived+0x14e>
					appCmdPendingTable[i].addr) {
    2762:	4a27      	ldr	r2, [pc, #156]	; (2800 <APP_CommandsByteReceived+0x1bc>)
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
			if (APP_CMD_INVALID_ADDR ==
    2764:	8a51      	ldrh	r1, [r2, #18]
    2766:	4a27      	ldr	r2, [pc, #156]	; (2804 <APP_CommandsByteReceived+0x1c0>)
    2768:	4291      	cmp	r1, r2
    276a:	d00e      	beq.n	278a <APP_CommandsByteReceived+0x146>
					appCmdPendingTable[i].addr) {
    276c:	4a24      	ldr	r2, [pc, #144]	; (2800 <APP_CommandsByteReceived+0x1bc>)
    276e:	7ed0      	ldrb	r0, [r2, #27]
    2770:	7f11      	ldrb	r1, [r2, #28]
    2772:	0209      	lsls	r1, r1, #8
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
			if (APP_CMD_INVALID_ADDR ==
    2774:	4301      	orrs	r1, r0
    2776:	4a23      	ldr	r2, [pc, #140]	; (2804 <APP_CommandsByteReceived+0x1c0>)
    2778:	4291      	cmp	r1, r2
    277a:	d008      	beq.n	278e <APP_CommandsByteReceived+0x14a>
					appCmdPendingTable[i].addr) {
    277c:	4a20      	ldr	r2, [pc, #128]	; (2800 <APP_CommandsByteReceived+0x1bc>)
{
	if (APP_ADDR == addr) {
		appCmdHandle(data, size);
	} else if (addr & NWK_ROUTE_NON_ROUTING) {
		for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
			if (APP_CMD_INVALID_ADDR ==
    277e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2780:	4a20      	ldr	r2, [pc, #128]	; (2804 <APP_CommandsByteReceived+0x1c0>)
    2782:	4291      	cmp	r1, r2
    2784:	d128      	bne.n	27d8 <APP_CommandsByteReceived+0x194>
					appCmdPendingTable[i].addr) {
    2786:	2204      	movs	r2, #4
    2788:	e004      	b.n	2794 <APP_CommandsByteReceived+0x150>
    278a:	2202      	movs	r2, #2
    278c:	e002      	b.n	2794 <APP_CommandsByteReceived+0x150>
    278e:	2203      	movs	r2, #3
    2790:	e000      	b.n	2794 <APP_CommandsByteReceived+0x150>
    2792:	2201      	movs	r2, #1
				appCmdPendingTable[i].addr = addr;
    2794:	481a      	ldr	r0, [pc, #104]	; (2800 <APP_CommandsByteReceived+0x1bc>)
    2796:	2109      	movs	r1, #9
    2798:	434a      	muls	r2, r1
    279a:	5483      	strb	r3, [r0, r2]
    279c:	1880      	adds	r0, r0, r2
    279e:	0a1b      	lsrs	r3, r3, #8
    27a0:	7043      	strb	r3, [r0, #1]
				appCmdPendingTable[i].size = size;
    27a2:	2205      	movs	r2, #5
    27a4:	7082      	strb	r2, [r0, #2]
				appCmdPendingTable[i].ready = false;
    27a6:	2300      	movs	r3, #0
    27a8:	70c3      	strb	r3, [r0, #3]
				memcpy(&appCmdPendingTable[i].payload, data,
    27aa:	3004      	adds	r0, #4
    27ac:	4669      	mov	r1, sp
    27ae:	4b16      	ldr	r3, [pc, #88]	; (2808 <APP_CommandsByteReceived+0x1c4>)
    27b0:	4798      	blx	r3
    27b2:	e011      	b.n	27d8 <APP_CommandsByteReceived+0x194>
				break;
			}
		}
	} else {
		/* Entry 0 in the table is reserved for non-sleeping devices */
		if (APP_CMD_INVALID_ADDR == appCmdPendingTable[0].addr) {
    27b4:	4a12      	ldr	r2, [pc, #72]	; (2800 <APP_CommandsByteReceived+0x1bc>)
    27b6:	8811      	ldrh	r1, [r2, #0]
    27b8:	4a12      	ldr	r2, [pc, #72]	; (2804 <APP_CommandsByteReceived+0x1c0>)
    27ba:	4291      	cmp	r1, r2
    27bc:	d10c      	bne.n	27d8 <APP_CommandsByteReceived+0x194>
			appCmdPendingTable[0].addr = addr;
    27be:	4a10      	ldr	r2, [pc, #64]	; (2800 <APP_CommandsByteReceived+0x1bc>)
    27c0:	8013      	strh	r3, [r2, #0]
			appCmdPendingTable[0].size = size;
    27c2:	2305      	movs	r3, #5
    27c4:	7093      	strb	r3, [r2, #2]
			appCmdPendingTable[0].ready = true;
    27c6:	2301      	movs	r3, #1
    27c8:	70d3      	strb	r3, [r2, #3]
			memcpy(&appCmdPendingTable[0].payload, data, size);
    27ca:	9900      	ldr	r1, [sp, #0]
    27cc:	6051      	str	r1, [r2, #4]
    27ce:	4668      	mov	r0, sp
    27d0:	7903      	ldrb	r3, [r0, #4]
    27d2:	7213      	strb	r3, [r2, #8]
			appCmdCheckPendingTable();
    27d4:	4b0d      	ldr	r3, [pc, #52]	; (280c <APP_CommandsByteReceived+0x1c8>)
    27d6:	4798      	blx	r3
	{
		if (byte == appCmdUartCsum) {
			appCmdUartProcess(appCmdUartBuf, appCmdUartPtr);
		}

		appCmdUartState = APP_CMD_UART_STATE_IDLE;
    27d8:	2200      	movs	r2, #0
    27da:	4b02      	ldr	r3, [pc, #8]	; (27e4 <APP_CommandsByteReceived+0x1a0>)
    27dc:	701a      	strb	r2, [r3, #0]
	break;

	default:
		break;
	}
}
    27de:	b003      	add	sp, #12
    27e0:	bd00      	pop	{pc}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	20000208 	.word	0x20000208
    27e8:	000060b0 	.word	0x000060b0
    27ec:	200001a6 	.word	0x200001a6
    27f0:	200001ac 	.word	0x200001ac
    27f4:	200001c4 	.word	0x200001c4
    27f8:	00007999 	.word	0x00007999
    27fc:	00002441 	.word	0x00002441
    2800:	2000020c 	.word	0x2000020c
    2804:	0000ffff 	.word	0x0000ffff
    2808:	00005881 	.word	0x00005881
    280c:	000024d5 	.word	0x000024d5

00002810 <appNetworkStatusTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    2810:	2280      	movs	r2, #128	; 0x80
    2812:	0312      	lsls	r2, r2, #12
    2814:	4b01      	ldr	r3, [pc, #4]	; (281c <appNetworkStatusTimerHandler+0xc>)
    2816:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_NETWORK);
#endif
	(void)timer;
}
    2818:	4770      	bx	lr
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	41004400 	.word	0x41004400

00002820 <appCommandWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCommandWaitTimerHandler(SYS_Timer_t *timer)
{
	appState = APP_STATE_SENDING_DONE;
    2820:	2203      	movs	r2, #3
    2822:	4b01      	ldr	r3, [pc, #4]	; (2828 <appCommandWaitTimerHandler+0x8>)
    2824:	701a      	strb	r2, [r3, #0]
	(void)timer;
}
    2826:	4770      	bx	lr
    2828:	20000288 	.word	0x20000288

0000282c <appDataSendingTimerHandler>:
}

/*****************************************************************************
*****************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
    282c:	b508      	push	{r3, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    282e:	4b06      	ldr	r3, [pc, #24]	; (2848 <appDataSendingTimerHandler+0x1c>)
    2830:	781b      	ldrb	r3, [r3, #0]
    2832:	2b04      	cmp	r3, #4
    2834:	d103      	bne.n	283e <appDataSendingTimerHandler+0x12>
		appState = APP_STATE_SEND;
    2836:	2201      	movs	r2, #1
    2838:	4b03      	ldr	r3, [pc, #12]	; (2848 <appDataSendingTimerHandler+0x1c>)
    283a:	701a      	strb	r2, [r3, #0]
    283c:	e002      	b.n	2844 <appDataSendingTimerHandler+0x18>
	} else {
		SYS_TimerStart(&appDataSendingTimer);
    283e:	4803      	ldr	r0, [pc, #12]	; (284c <appDataSendingTimerHandler+0x20>)
    2840:	4b03      	ldr	r3, [pc, #12]	; (2850 <appDataSendingTimerHandler+0x24>)
    2842:	4798      	blx	r3
	}

	(void)timer;
}
    2844:	bd08      	pop	{r3, pc}
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	20000288 	.word	0x20000288
    284c:	2000028c 	.word	0x2000028c
    2850:	0000473d 	.word	0x0000473d

00002854 <appUartSendMessage>:
		APP_CommandsByteReceived(byte[i]);
	}
}

static void appUartSendMessage(uint8_t *data, uint8_t size)
{
    2854:	b5f0      	push	{r4, r5, r6, r7, lr}
    2856:	4647      	mov	r7, r8
    2858:	b480      	push	{r7}
    285a:	1c06      	adds	r6, r0, #0
    285c:	1c0d      	adds	r5, r1, #0
	uint8_t cs = 0;   //some kind of checksum probably  

	sio2host_putchar(0x10);
    285e:	2010      	movs	r0, #16
    2860:	4c15      	ldr	r4, [pc, #84]	; (28b8 <appUartSendMessage+0x64>)
    2862:	47a0      	blx	r4
	sio2host_putchar(0x02);
    2864:	2002      	movs	r0, #2
    2866:	47a0      	blx	r4

	for (uint8_t i = 0; i < size; i++) {
    2868:	2d00      	cmp	r5, #0
    286a:	d019      	beq.n	28a0 <appUartSendMessage+0x4c>
    286c:	1c34      	adds	r4, r6, #0
    286e:	3601      	adds	r6, #1
    2870:	3d01      	subs	r5, #1
    2872:	b2ed      	uxtb	r5, r5
    2874:	1976      	adds	r6, r6, r5
    2876:	46b0      	mov	r8, r6
	}
}

static void appUartSendMessage(uint8_t *data, uint8_t size)
{
	uint8_t cs = 0;   //some kind of checksum probably  
    2878:	2600      	movs	r6, #0
		if (data[i] == 0x10) {
			sio2host_putchar(0x10);
			cs += 0x10;
		}

		sio2host_putchar(data[i]);
    287a:	4f0f      	ldr	r7, [pc, #60]	; (28b8 <appUartSendMessage+0x64>)
    287c:	1c25      	adds	r5, r4, #0

	sio2host_putchar(0x10);
	sio2host_putchar(0x02);

	for (uint8_t i = 0; i < size; i++) {
		if (data[i] == 0x10) {
    287e:	7823      	ldrb	r3, [r4, #0]
    2880:	2b10      	cmp	r3, #16
    2882:	d104      	bne.n	288e <appUartSendMessage+0x3a>
			sio2host_putchar(0x10);
    2884:	2010      	movs	r0, #16
    2886:	4b0c      	ldr	r3, [pc, #48]	; (28b8 <appUartSendMessage+0x64>)
    2888:	4798      	blx	r3
			cs += 0x10;
    288a:	3610      	adds	r6, #16
    288c:	b2f6      	uxtb	r6, r6
		}

		sio2host_putchar(data[i]);
    288e:	7828      	ldrb	r0, [r5, #0]
    2890:	47b8      	blx	r7
		cs += data[i];
    2892:	782b      	ldrb	r3, [r5, #0]
    2894:	18f6      	adds	r6, r6, r3
    2896:	b2f6      	uxtb	r6, r6
    2898:	3401      	adds	r4, #1
	uint8_t cs = 0;   //some kind of checksum probably  

	sio2host_putchar(0x10);
	sio2host_putchar(0x02);

	for (uint8_t i = 0; i < size; i++) {
    289a:	4544      	cmp	r4, r8
    289c:	d1ee      	bne.n	287c <appUartSendMessage+0x28>
    289e:	e000      	b.n	28a2 <appUartSendMessage+0x4e>
	}
}

static void appUartSendMessage(uint8_t *data, uint8_t size)
{
	uint8_t cs = 0;   //some kind of checksum probably  
    28a0:	2600      	movs	r6, #0

		sio2host_putchar(data[i]);
		cs += data[i];
	}

	sio2host_putchar(0x10);
    28a2:	2010      	movs	r0, #16
    28a4:	4c04      	ldr	r4, [pc, #16]	; (28b8 <appUartSendMessage+0x64>)
    28a6:	47a0      	blx	r4
	sio2host_putchar(0x03);
    28a8:	2003      	movs	r0, #3
    28aa:	47a0      	blx	r4
	cs += 0x10 + 0x02 + 0x10 + 0x03;  //escape character + 
    28ac:	3625      	adds	r6, #37	; 0x25

	sio2host_putchar(cs); //we append this big number to the end, possible checksum value for error detection on the other side of UART
    28ae:	b2f0      	uxtb	r0, r6
    28b0:	47a0      	blx	r4
}
    28b2:	bc04      	pop	{r2}
    28b4:	4690      	mov	r8, r2
    28b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b8:	00002415 	.word	0x00002415

000028bc <appDataInd>:
#endif

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    28bc:	b510      	push	{r4, lr}
    28be:	1c04      	adds	r4, r0, #0
	AppMessage_t *msg = (AppMessage_t *)ind->data;
    28c0:	6883      	ldr	r3, [r0, #8]
    28c2:	2180      	movs	r1, #128	; 0x80
    28c4:	0309      	lsls	r1, r1, #12
    28c6:	4a0a      	ldr	r2, [pc, #40]	; (28f0 <appDataInd+0x34>)
    28c8:	61d1      	str	r1, [r2, #28]
#if (LED_COUNT > 0)
	LED_Toggle(LED_DATA);
#endif
	msg->lqi = ind->lqi;
    28ca:	7b42      	ldrb	r2, [r0, #13]
    28cc:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->rssi;
    28ce:	7b82      	ldrb	r2, [r0, #14]
    28d0:	769a      	strb	r2, [r3, #26]
#if APP_COORDINATOR || APP_ROUTER  //I added this or router
	appUartSendMessage(ind->data, ind->size);
    28d2:	7b01      	ldrb	r1, [r0, #12]
    28d4:	6880      	ldr	r0, [r0, #8]
    28d6:	4b07      	ldr	r3, [pc, #28]	; (28f4 <appDataInd+0x38>)
    28d8:	4798      	blx	r3

	if (APP_CommandsPending(ind->srcAddr)) {  //investigate
    28da:	8820      	ldrh	r0, [r4, #0]
    28dc:	4b06      	ldr	r3, [pc, #24]	; (28f8 <appDataInd+0x3c>)
    28de:	4798      	blx	r3
    28e0:	2800      	cmp	r0, #0
    28e2:	d002      	beq.n	28ea <appDataInd+0x2e>
		NWK_SetAckControl(APP_COMMAND_PENDING);
    28e4:	2001      	movs	r0, #1
    28e6:	4b05      	ldr	r3, [pc, #20]	; (28fc <appDataInd+0x40>)
    28e8:	4798      	blx	r3
	}
#endif
	return true;
}
    28ea:	2001      	movs	r0, #1
    28ec:	bd10      	pop	{r4, pc}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	41004400 	.word	0x41004400
    28f4:	00002855 	.word	0x00002855
    28f8:	000025e9 	.word	0x000025e9
    28fc:	000038bd 	.word	0x000038bd

00002900 <appDataConf>:

/*****************************************************************************
*****************************************************************************/
#if APP_ROUTER || APP_ENDDEVICE
static void appDataConf(NWK_DataReq_t *req)
{
    2900:	b510      	push	{r4, lr}
    2902:	1c04      	adds	r4, r0, #0
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2904:	2280      	movs	r2, #128	; 0x80
    2906:	0312      	lsls	r2, r2, #12
    2908:	4b19      	ldr	r3, [pc, #100]	; (2970 <appDataConf+0x70>)
    290a:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
	LED_Off(LED_DATA);
#endif

	if (NWK_SUCCESS_STATUS == req->status) {
    290c:	7f03      	ldrb	r3, [r0, #28]
    290e:	2b00      	cmp	r3, #0
    2910:	d10e      	bne.n	2930 <appDataConf+0x30>
		if (!appNetworkStatus) {
    2912:	4b18      	ldr	r3, [pc, #96]	; (2974 <appDataConf+0x74>)
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	2b00      	cmp	r3, #0
    2918:	d118      	bne.n	294c <appDataConf+0x4c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    291a:	2280      	movs	r2, #128	; 0x80
    291c:	0312      	lsls	r2, r2, #12
    291e:	4b14      	ldr	r3, [pc, #80]	; (2970 <appDataConf+0x70>)
    2920:	615a      	str	r2, [r3, #20]
#if (LED_COUNT > 0)
			LED_On(LED_NETWORK);
#endif
			SYS_TimerStop(&appNetworkStatusTimer);
    2922:	4815      	ldr	r0, [pc, #84]	; (2978 <appDataConf+0x78>)
    2924:	4b15      	ldr	r3, [pc, #84]	; (297c <appDataConf+0x7c>)
    2926:	4798      	blx	r3
			appNetworkStatus = true;
    2928:	2201      	movs	r2, #1
    292a:	4b12      	ldr	r3, [pc, #72]	; (2974 <appDataConf+0x74>)
    292c:	701a      	strb	r2, [r3, #0]
    292e:	e00d      	b.n	294c <appDataConf+0x4c>
		}
	} else {
		if (appNetworkStatus) {
    2930:	4b10      	ldr	r3, [pc, #64]	; (2974 <appDataConf+0x74>)
    2932:	781b      	ldrb	r3, [r3, #0]
    2934:	2b00      	cmp	r3, #0
    2936:	d009      	beq.n	294c <appDataConf+0x4c>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2938:	2280      	movs	r2, #128	; 0x80
    293a:	0312      	lsls	r2, r2, #12
    293c:	4b0c      	ldr	r3, [pc, #48]	; (2970 <appDataConf+0x70>)
    293e:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
			LED_Off(LED_NETWORK);
#endif
			SYS_TimerStart(&appNetworkStatusTimer);
    2940:	480d      	ldr	r0, [pc, #52]	; (2978 <appDataConf+0x78>)
    2942:	4b0f      	ldr	r3, [pc, #60]	; (2980 <appDataConf+0x80>)
    2944:	4798      	blx	r3
			appNetworkStatus = false;
    2946:	2200      	movs	r2, #0
    2948:	4b0a      	ldr	r3, [pc, #40]	; (2974 <appDataConf+0x74>)
    294a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (APP_COMMAND_PENDING == req->control) {
    294c:	7f63      	ldrb	r3, [r4, #29]
    294e:	2b01      	cmp	r3, #1
    2950:	d10a      	bne.n	2968 <appDataConf+0x68>
		SYS_TimerStart(&appCommandWaitTimer);
    2952:	480c      	ldr	r0, [pc, #48]	; (2984 <appDataConf+0x84>)
    2954:	4b0a      	ldr	r3, [pc, #40]	; (2980 <appDataConf+0x80>)
    2956:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    2958:	2280      	movs	r2, #128	; 0x80
    295a:	0312      	lsls	r2, r2, #12
    295c:	4b04      	ldr	r3, [pc, #16]	; (2970 <appDataConf+0x70>)
    295e:	61da      	str	r2, [r3, #28]
#if (LED_COUNT > 0)
		LED_Toggle(LED_NETWORK);
#endif
		appState = APP_STATE_WAIT_COMMAND_TIMER;
    2960:	2205      	movs	r2, #5
    2962:	4b09      	ldr	r3, [pc, #36]	; (2988 <appDataConf+0x88>)
    2964:	701a      	strb	r2, [r3, #0]
    2966:	e002      	b.n	296e <appDataConf+0x6e>
	} else {
		appState = APP_STATE_SENDING_DONE;
    2968:	2203      	movs	r2, #3
    296a:	4b07      	ldr	r3, [pc, #28]	; (2988 <appDataConf+0x88>)
    296c:	701a      	strb	r2, [r3, #0]
	}
}
    296e:	bd10      	pop	{r4, pc}
    2970:	41004400 	.word	0x41004400
    2974:	20000270 	.word	0x20000270
    2978:	2000025c 	.word	0x2000025c
    297c:	000046c9 	.word	0x000046c9
    2980:	0000473d 	.word	0x0000473d
    2984:	20000274 	.word	0x20000274
    2988:	20000288 	.word	0x20000288

0000298c <UartBytesReceived>:
#if APP_COORDINATOR || APP_ROUTER  //I added this or router

/*****************************************************************************
*****************************************************************************/
void UartBytesReceived(uint16_t bytes, uint8_t *byte )
{
    298c:	b570      	push	{r4, r5, r6, lr}
	for (uint16_t i = 0; i < bytes; i++) {
    298e:	2800      	cmp	r0, #0
    2990:	d00a      	beq.n	29a8 <UartBytesReceived+0x1c>
    2992:	1c0c      	adds	r4, r1, #0
    2994:	3101      	adds	r1, #1
    2996:	3801      	subs	r0, #1
    2998:	b280      	uxth	r0, r0
    299a:	180e      	adds	r6, r1, r0
		APP_CommandsByteReceived(byte[i]);
    299c:	4d03      	ldr	r5, [pc, #12]	; (29ac <UartBytesReceived+0x20>)
    299e:	7820      	ldrb	r0, [r4, #0]
    29a0:	47a8      	blx	r5
    29a2:	3401      	adds	r4, #1

/*****************************************************************************
*****************************************************************************/
void UartBytesReceived(uint16_t bytes, uint8_t *byte )
{
	for (uint16_t i = 0; i < bytes; i++) {
    29a4:	42b4      	cmp	r4, r6
    29a6:	d1fa      	bne.n	299e <UartBytesReceived+0x12>
		APP_CommandsByteReceived(byte[i]);
	}
}
    29a8:	bd70      	pop	{r4, r5, r6, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	00002645 	.word	0x00002645

000029b0 <wsndemo_init>:

/**
 * Init function of the WSNDemo application
 */
void wsndemo_init(void) 
{
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	b082      	sub	sp, #8
	SYS_Init();
    29b4:	4b09      	ldr	r3, [pc, #36]	; (29dc <wsndemo_init+0x2c>)
    29b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    29b8:	ac01      	add	r4, sp, #4
    29ba:	2300      	movs	r3, #0
    29bc:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    29be:	2601      	movs	r6, #1
    29c0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    29c2:	70a3      	strb	r3, [r4, #2]
	//my init stuff for pins 
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    29c4:	201c      	movs	r0, #28
    29c6:	1c21      	adds	r1, r4, #0
    29c8:	4d05      	ldr	r5, [pc, #20]	; (29e0 <wsndemo_init+0x30>)
    29ca:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    29cc:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    29ce:	2013      	movs	r0, #19
    29d0:	1c21      	adds	r1, r4, #0
    29d2:	47a8      	blx	r5
	
#if APP_ENDDEVICE 
	sm_init();
#endif
#if APP_COORDINATOR || APP_ROUTER  //added ROUTER
	sio2host_init();
    29d4:	4b03      	ldr	r3, [pc, #12]	; (29e4 <wsndemo_init+0x34>)
    29d6:	4798      	blx	r3
#endif
	
}
    29d8:	b002      	add	sp, #8
    29da:	bd70      	pop	{r4, r5, r6, pc}
    29dc:	000045bd 	.word	0x000045bd
    29e0:	000004a9 	.word	0x000004a9
    29e4:	0000222d 	.word	0x0000222d

000029e8 <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    29e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ea:	464f      	mov	r7, r9
    29ec:	4646      	mov	r6, r8
    29ee:	b4c0      	push	{r6, r7}
	SYS_TaskHandler();
    29f0:	4b6e      	ldr	r3, [pc, #440]	; (2bac <wsndemo_task+0x1c4>)
    29f2:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState) {
    29f4:	4b6e      	ldr	r3, [pc, #440]	; (2bb0 <wsndemo_task+0x1c8>)
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	2b01      	cmp	r3, #1
    29fa:	d079      	beq.n	2af0 <wsndemo_task+0x108>
    29fc:	2b00      	cmp	r3, #0
    29fe:	d003      	beq.n	2a08 <wsndemo_task+0x20>
    2a00:	2b03      	cmp	r3, #3
    2a02:	d100      	bne.n	2a06 <wsndemo_task+0x1e>
    2a04:	e0bf      	b.n	2b86 <wsndemo_task+0x19e>
    2a06:	e0c4      	b.n	2b92 <wsndemo_task+0x1aa>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    2a08:	4b6a      	ldr	r3, [pc, #424]	; (2bb4 <wsndemo_task+0x1cc>)
    2a0a:	2401      	movs	r4, #1
    2a0c:	701c      	strb	r4, [r3, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    2a0e:	705c      	strb	r4, [r3, #1]
	appMsg.extAddr              = APP_ADDR;
    2a10:	2500      	movs	r5, #0
    2a12:	4e69      	ldr	r6, [pc, #420]	; (2bb8 <wsndemo_task+0x1d0>)
    2a14:	805e      	strh	r6, [r3, #2]
    2a16:	2200      	movs	r2, #0
    2a18:	809a      	strh	r2, [r3, #4]
    2a1a:	80da      	strh	r2, [r3, #6]
    2a1c:	811a      	strh	r2, [r3, #8]
	appMsg.shortAddr            = APP_ADDR;
    2a1e:	815e      	strh	r6, [r3, #10]
	appMsg.softVersion          = 0x01010100;
    2a20:	4a66      	ldr	r2, [pc, #408]	; (2bbc <wsndemo_task+0x1d4>)
    2a22:	60da      	str	r2, [r3, #12]
	appMsg.channelMask          = (1L << APP_CHANNEL);
    2a24:	2280      	movs	r2, #128	; 0x80
    2a26:	0212      	lsls	r2, r2, #8
    2a28:	611a      	str	r2, [r3, #16]
	appMsg.panId                = APP_PANID;
    2a2a:	4f65      	ldr	r7, [pc, #404]	; (2bc0 <wsndemo_task+0x1d8>)
    2a2c:	829f      	strh	r7, [r3, #20]
	appMsg.workingChannel       = APP_CHANNEL;
    2a2e:	220f      	movs	r2, #15
    2a30:	759a      	strb	r2, [r3, #22]
	appMsg.parentShortAddr      = 0;
    2a32:	2200      	movs	r2, #0
    2a34:	75da      	strb	r2, [r3, #23]
    2a36:	761a      	strb	r2, [r3, #24]
	appMsg.lqi                  = 0;
    2a38:	765d      	strb	r5, [r3, #25]
	appMsg.rssi                 = 0;
    2a3a:	769d      	strb	r5, [r3, #26]

	appMsg.sensors.type        = 1;
    2a3c:	76dc      	strb	r4, [r3, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    2a3e:	220c      	movs	r2, #12
	appMsg.sensors.battery     = 0;
    2a40:	21ff      	movs	r1, #255	; 0xff
    2a42:	b2d2      	uxtb	r2, r2
    2a44:	61da      	str	r2, [r3, #28]
    2a46:	2020      	movs	r0, #32
    2a48:	4681      	mov	r9, r0
    2a4a:	2000      	movs	r0, #0
    2a4c:	464a      	mov	r2, r9
    2a4e:	5498      	strb	r0, [r3, r2]
	appMsg.sensors.temperature = 0;
    2a50:	6a18      	ldr	r0, [r3, #32]
    2a52:	4008      	ands	r0, r1
    2a54:	6218      	str	r0, [r3, #32]
    2a56:	2000      	movs	r0, #0
    2a58:	2224      	movs	r2, #36	; 0x24
    2a5a:	4690      	mov	r8, r2
    2a5c:	1c02      	adds	r2, r0, #0
    2a5e:	4640      	mov	r0, r8
    2a60:	541a      	strb	r2, [r3, r0]
	appMsg.sensors.light       = 0;
    2a62:	6a58      	ldr	r0, [r3, #36]	; 0x24
    2a64:	4001      	ands	r1, r0
    2a66:	6259      	str	r1, [r3, #36]	; 0x24
    2a68:	2000      	movs	r0, #0
    2a6a:	2128      	movs	r1, #40	; 0x28
    2a6c:	5458      	strb	r0, [r3, r1]

	appMsg.caption.type         = 32;
    2a6e:	2129      	movs	r1, #41	; 0x29
    2a70:	464a      	mov	r2, r9
    2a72:	545a      	strb	r2, [r3, r1]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    2a74:	2107      	movs	r1, #7
    2a76:	222a      	movs	r2, #42	; 0x2a
    2a78:	5499      	strb	r1, [r3, r2]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    2a7a:	1c18      	adds	r0, r3, #0
    2a7c:	302b      	adds	r0, #43	; 0x2b
    2a7e:	4951      	ldr	r1, [pc, #324]	; (2bc4 <wsndemo_task+0x1dc>)
    2a80:	2207      	movs	r2, #7
    2a82:	4b51      	ldr	r3, [pc, #324]	; (2bc8 <wsndemo_task+0x1e0>)
    2a84:	4798      	blx	r3

	NWK_SetAddr(APP_ADDR);
    2a86:	1c30      	adds	r0, r6, #0
    2a88:	4b50      	ldr	r3, [pc, #320]	; (2bcc <wsndemo_task+0x1e4>)
    2a8a:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    2a8c:	1c38      	adds	r0, r7, #0
    2a8e:	4b50      	ldr	r3, [pc, #320]	; (2bd0 <wsndemo_task+0x1e8>)
    2a90:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    2a92:	200f      	movs	r0, #15
    2a94:	4b4f      	ldr	r3, [pc, #316]	; (2bd4 <wsndemo_task+0x1ec>)
    2a96:	4798      	blx	r3
#if (defined(PHY_AT86RF212B) || defined(PHY_AT86RF212))
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);  
    2a98:	2001      	movs	r0, #1
    2a9a:	4b4f      	ldr	r3, [pc, #316]	; (2bd8 <wsndemo_task+0x1f0>)
    2a9c:	4798      	blx	r3

#ifdef NWK_ENABLE_SECURITY
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    2a9e:	484f      	ldr	r0, [pc, #316]	; (2bdc <wsndemo_task+0x1f4>)
    2aa0:	4b4f      	ldr	r3, [pc, #316]	; (2be0 <wsndemo_task+0x1f8>)
    2aa2:	4798      	blx	r3
#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    2aa4:	2001      	movs	r0, #1
    2aa6:	494f      	ldr	r1, [pc, #316]	; (2be4 <wsndemo_task+0x1fc>)
    2aa8:	4b4f      	ldr	r3, [pc, #316]	; (2be8 <wsndemo_task+0x200>)
    2aaa:	4798      	blx	r3

	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    2aac:	4b4f      	ldr	r3, [pc, #316]	; (2bec <wsndemo_task+0x204>)
    2aae:	22fa      	movs	r2, #250	; 0xfa
    2ab0:	00d2      	lsls	r2, r2, #3
    2ab2:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2ab4:	731d      	strb	r5, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    2ab6:	4a4e      	ldr	r2, [pc, #312]	; (2bf0 <wsndemo_task+0x208>)
    2ab8:	611a      	str	r2, [r3, #16]

#if APP_ROUTER || APP_ENDDEVICE
	appNetworkStatus = false;
    2aba:	4b4e      	ldr	r3, [pc, #312]	; (2bf4 <wsndemo_task+0x20c>)
    2abc:	701d      	strb	r5, [r3, #0]
	appNetworkStatusTimer.interval = 500;
    2abe:	484e      	ldr	r0, [pc, #312]	; (2bf8 <wsndemo_task+0x210>)
    2ac0:	23fa      	movs	r3, #250	; 0xfa
    2ac2:	005b      	lsls	r3, r3, #1
    2ac4:	6083      	str	r3, [r0, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    2ac6:	7304      	strb	r4, [r0, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    2ac8:	4b4c      	ldr	r3, [pc, #304]	; (2bfc <wsndemo_task+0x214>)
    2aca:	6103      	str	r3, [r0, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    2acc:	4b4c      	ldr	r3, [pc, #304]	; (2c00 <wsndemo_task+0x218>)
    2ace:	4798      	blx	r3

	appCommandWaitTimer.interval = NWK_ACK_WAIT_TIME;
    2ad0:	4b4c      	ldr	r3, [pc, #304]	; (2c04 <wsndemo_task+0x21c>)
    2ad2:	22fa      	movs	r2, #250	; 0xfa
    2ad4:	0092      	lsls	r2, r2, #2
    2ad6:	609a      	str	r2, [r3, #8]
	appCommandWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2ad8:	731d      	strb	r5, [r3, #12]
	appCommandWaitTimer.handler = appCommandWaitTimerHandler;
    2ada:	4a4b      	ldr	r2, [pc, #300]	; (2c08 <wsndemo_task+0x220>)
    2adc:	611a      	str	r2, [r3, #16]
	LED_On(LED_NETWORK);
#endif
#endif

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
	srand(PHY_RandomReq());
    2ade:	4b4b      	ldr	r3, [pc, #300]	; (2c0c <wsndemo_task+0x224>)
    2ae0:	4798      	blx	r3
    2ae2:	4b4b      	ldr	r3, [pc, #300]	; (2c10 <wsndemo_task+0x228>)
    2ae4:	4798      	blx	r3
#endif

	APP_CommandsInit();
    2ae6:	4b4b      	ldr	r3, [pc, #300]	; (2c14 <wsndemo_task+0x22c>)
    2ae8:	4798      	blx	r3

	appState = APP_STATE_SEND;
    2aea:	4b31      	ldr	r3, [pc, #196]	; (2bb0 <wsndemo_task+0x1c8>)
    2aec:	701c      	strb	r4, [r3, #0]
    2aee:	e050      	b.n	2b92 <wsndemo_task+0x1aa>
/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
	appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
    2af0:	2000      	movs	r0, #0
    2af2:	2100      	movs	r1, #0
    2af4:	4b48      	ldr	r3, [pc, #288]	; (2c18 <wsndemo_task+0x230>)
    2af6:	4798      	blx	r3
    2af8:	4b2e      	ldr	r3, [pc, #184]	; (2bb4 <wsndemo_task+0x1cc>)
    2afa:	75d8      	strb	r0, [r3, #23]
    2afc:	0a00      	lsrs	r0, r0, #8
    2afe:	7618      	strb	r0, [r3, #24]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    2b00:	4b46      	ldr	r3, [pc, #280]	; (2c1c <wsndemo_task+0x234>)
    2b02:	6a1b      	ldr	r3, [r3, #32]
  //Get state of the on board switch SW0
  uint8_t thisData = 0x46;
  bool pinRead;
  pinRead = port_pin_get_input_level(BUTTON_0_PIN);
  if(pinRead==false){
	  thisData = 0x54;
    2b04:	2254      	movs	r2, #84	; 0x54
  
  //Get state of the on board switch SW0
  uint8_t thisData = 0x46;
  bool pinRead;
  pinRead = port_pin_get_input_level(BUTTON_0_PIN);
  if(pinRead==false){
    2b06:	00dc      	lsls	r4, r3, #3
    2b08:	d500      	bpl.n	2b0c <wsndemo_task+0x124>
	appMsg.parentShortAddr = 0;
#endif
//$$$ change this to alter data sent to network $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ //
  
  //Get state of the on board switch SW0
  uint8_t thisData = 0x46;
    2b0a:	2246      	movs	r2, #70	; 0x46
  //uint8_t temperatureData;  //not used on imaging node (probably)
  
  //sio2host_rx(uint8_t *data, uint8_t max_length)  //function in sio2host.c that returns data

  
  appMsg.sensors.battery     =	thisData; //thisData;		//0x42;//B for battery //rand() & 0xffff;
    2b0c:	4b29      	ldr	r3, [pc, #164]	; (2bb4 <wsndemo_task+0x1cc>)
    2b0e:	0210      	lsls	r0, r2, #8
    2b10:	21ff      	movs	r1, #255	; 0xff
    2b12:	7f1c      	ldrb	r4, [r3, #28]
    2b14:	4320      	orrs	r0, r4
    2b16:	61d8      	str	r0, [r3, #28]
    2b18:	0e12      	lsrs	r2, r2, #24
    2b1a:	2020      	movs	r0, #32
    2b1c:	541a      	strb	r2, [r3, r0]
  appMsg.sensors.temperature =	*rx_data; //T for temp is 0x54 //rand() & 0x7f;
    2b1e:	4a40      	ldr	r2, [pc, #256]	; (2c20 <wsndemo_task+0x238>)
    2b20:	7812      	ldrb	r2, [r2, #0]
    2b22:	0210      	lsls	r0, r2, #8
    2b24:	6a1c      	ldr	r4, [r3, #32]
    2b26:	400c      	ands	r4, r1
    2b28:	4320      	orrs	r0, r4
    2b2a:	6218      	str	r0, [r3, #32]
    2b2c:	0e12      	lsrs	r2, r2, #24
    2b2e:	2024      	movs	r0, #36	; 0x24
    2b30:	541a      	strb	r2, [r3, r0]
  appMsg.sensors.light       =	0x4c;	//L for light //rand() & 0xff;
    2b32:	6a58      	ldr	r0, [r3, #36]	; 0x24
    2b34:	4001      	ands	r1, r0
    2b36:	2298      	movs	r2, #152	; 0x98
    2b38:	01d2      	lsls	r2, r2, #7
    2b3a:	4311      	orrs	r1, r2
    2b3c:	6259      	str	r1, [r3, #36]	; 0x24
    2b3e:	2100      	movs	r1, #0
    2b40:	2228      	movs	r2, #40	; 0x28
    2b42:	5499      	strb	r1, [r3, r2]
#if APP_COORDINATOR //|| APP_ROUTER  //I added this or router 
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
	SYS_TimerStart(&appDataSendingTimer);
	appState = APP_STATE_WAIT_SEND_TIMER;
#else
	appNwkDataReq.dstAddr = 0;
    2b44:	4c37      	ldr	r4, [pc, #220]	; (2c24 <wsndemo_task+0x23c>)
    2b46:	2200      	movs	r2, #0
    2b48:	8162      	strh	r2, [r4, #10]
	appNwkDataReq.dstEndpoint = APP_ENDPOINT;
    2b4a:	2201      	movs	r2, #1
    2b4c:	7322      	strb	r2, [r4, #12]
	appNwkDataReq.srcEndpoint = APP_ENDPOINT;
    2b4e:	7362      	strb	r2, [r4, #13]
	appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    2b50:	2203      	movs	r2, #3
    2b52:	73a2      	strb	r2, [r4, #14]
	appNwkDataReq.data = (uint8_t *)&appMsg;
    2b54:	6123      	str	r3, [r4, #16]
	appNwkDataReq.size = sizeof(appMsg);
    2b56:	2232      	movs	r2, #50	; 0x32
    2b58:	7522      	strb	r2, [r4, #20]
	appNwkDataReq.confirm = appDataConf;
    2b5a:	4a33      	ldr	r2, [pc, #204]	; (2c28 <wsndemo_task+0x240>)
    2b5c:	61a2      	str	r2, [r4, #24]
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));  //putting this stuff after the above fixed the no networking problem
    2b5e:	1c18      	adds	r0, r3, #0
    2b60:	2132      	movs	r1, #50	; 0x32
    2b62:	4b32      	ldr	r3, [pc, #200]	; (2c2c <wsndemo_task+0x244>)
    2b64:	4798      	blx	r3
	SYS_TimerStart(&appDataSendingTimer);
    2b66:	4821      	ldr	r0, [pc, #132]	; (2bec <wsndemo_task+0x204>)
    2b68:	4b25      	ldr	r3, [pc, #148]	; (2c00 <wsndemo_task+0x218>)
    2b6a:	4798      	blx	r3
	appState = APP_STATE_WAIT_SEND_TIMER;
    2b6c:	4d10      	ldr	r5, [pc, #64]	; (2bb0 <wsndemo_task+0x1c8>)
    2b6e:	2304      	movs	r3, #4
    2b70:	702b      	strb	r3, [r5, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b72:	2280      	movs	r2, #128	; 0x80
    2b74:	0312      	lsls	r2, r2, #12
    2b76:	4b29      	ldr	r3, [pc, #164]	; (2c1c <wsndemo_task+0x234>)
    2b78:	615a      	str	r2, [r3, #20]

#if (LED_COUNT > 0)
	LED_On(LED_DATA);
#endif
	NWK_DataReq(&appNwkDataReq);
    2b7a:	1c20      	adds	r0, r4, #0
    2b7c:	4b2c      	ldr	r3, [pc, #176]	; (2c30 <wsndemo_task+0x248>)
    2b7e:	4798      	blx	r3

	appState = APP_STATE_WAIT_CONF;
    2b80:	2302      	movs	r3, #2
    2b82:	702b      	strb	r3, [r5, #0]
    2b84:	e005      	b.n	2b92 <wsndemo_task+0x1aa>
	case APP_STATE_SENDING_DONE:
	{
#if APP_ENDDEVICE
		appState = APP_STATE_PREPARE_TO_SLEEP;
#else
		SYS_TimerStart(&appDataSendingTimer);
    2b86:	4819      	ldr	r0, [pc, #100]	; (2bec <wsndemo_task+0x204>)
    2b88:	4b1d      	ldr	r3, [pc, #116]	; (2c00 <wsndemo_task+0x218>)
    2b8a:	4798      	blx	r3
		appState = APP_STATE_WAIT_SEND_TIMER;
    2b8c:	2204      	movs	r2, #4
    2b8e:	4b08      	ldr	r3, [pc, #32]	; (2bb0 <wsndemo_task+0x1c8>)
    2b90:	701a      	strb	r2, [r3, #0]
		break;
	}

#if (APP_COORDINATOR||APP_ROUTER)   //ADDED ROUTER
	uint16_t bytes;
	if ((bytes = sio2host_rx(rx_data, APP_RX_BUF_SIZE)) > 0) {
    2b92:	4823      	ldr	r0, [pc, #140]	; (2c20 <wsndemo_task+0x238>)
    2b94:	2114      	movs	r1, #20
    2b96:	4b27      	ldr	r3, [pc, #156]	; (2c34 <wsndemo_task+0x24c>)
    2b98:	4798      	blx	r3
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d002      	beq.n	2ba4 <wsndemo_task+0x1bc>
		UartBytesReceived(bytes, (uint8_t *)&rx_data);
    2b9e:	4920      	ldr	r1, [pc, #128]	; (2c20 <wsndemo_task+0x238>)
    2ba0:	4b25      	ldr	r3, [pc, #148]	; (2c38 <wsndemo_task+0x250>)
    2ba2:	4798      	blx	r3
 */
void wsndemo_task(void)
{
	SYS_TaskHandler();
	APP_TaskHandler();
    2ba4:	bc0c      	pop	{r2, r3}
    2ba6:	4690      	mov	r8, r2
    2ba8:	4699      	mov	r9, r3
    2baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bac:	000045e1 	.word	0x000045e1
    2bb0:	20000288 	.word	0x20000288
    2bb4:	200002a0 	.word	0x200002a0
    2bb8:	00007999 	.word	0x00007999
    2bbc:	01010100 	.word	0x01010100
    2bc0:	00001234 	.word	0x00001234
    2bc4:	000060c4 	.word	0x000060c4
    2bc8:	00005881 	.word	0x00005881
    2bcc:	00002c99 	.word	0x00002c99
    2bd0:	00002cad 	.word	0x00002cad
    2bd4:	000043cd 	.word	0x000043cd
    2bd8:	000043b9 	.word	0x000043b9
    2bdc:	000060cc 	.word	0x000060cc
    2be0:	00003cbd 	.word	0x00003cbd
    2be4:	000028bd 	.word	0x000028bd
    2be8:	00002cc1 	.word	0x00002cc1
    2bec:	2000028c 	.word	0x2000028c
    2bf0:	0000282d 	.word	0x0000282d
    2bf4:	20000270 	.word	0x20000270
    2bf8:	2000025c 	.word	0x2000025c
    2bfc:	00002811 	.word	0x00002811
    2c00:	0000473d 	.word	0x0000473d
    2c04:	20000274 	.word	0x20000274
    2c08:	00002821 	.word	0x00002821
    2c0c:	00004489 	.word	0x00004489
    2c10:	000058a5 	.word	0x000058a5
    2c14:	00002571 	.word	0x00002571
    2c18:	00003099 	.word	0x00003099
    2c1c:	41004400 	.word	0x41004400
    2c20:	20000eb4 	.word	0x20000eb4
    2c24:	2000023c 	.word	0x2000023c
    2c28:	00002901 	.word	0x00002901
    2c2c:	00002855 	.word	0x00002855
    2c30:	00002d61 	.word	0x00002d61
    2c34:	00002391 	.word	0x00002391
    2c38:	0000298d 	.word	0x0000298d

00002c3c <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2c3c:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    2c3e:	490e      	ldr	r1, [pc, #56]	; (2c78 <NWK_Init+0x3c>)
    2c40:	2300      	movs	r3, #0
    2c42:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    2c44:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    2c46:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    2c48:	2258      	movs	r2, #88	; 0x58
    2c4a:	528b      	strh	r3, [r1, r2]
    2c4c:	1c0b      	adds	r3, r1, #0
    2c4e:	3308      	adds	r3, #8
    2c50:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2c52:	2200      	movs	r2, #0
    2c54:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2c56:	428b      	cmp	r3, r1
    2c58:	d1fc      	bne.n	2c54 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2c5a:	4b08      	ldr	r3, [pc, #32]	; (2c7c <NWK_Init+0x40>)
    2c5c:	4798      	blx	r3
	nwkRxInit();
    2c5e:	4b08      	ldr	r3, [pc, #32]	; (2c80 <NWK_Init+0x44>)
    2c60:	4798      	blx	r3
	nwkFrameInit();
    2c62:	4b08      	ldr	r3, [pc, #32]	; (2c84 <NWK_Init+0x48>)
    2c64:	4798      	blx	r3
	nwkDataReqInit();
    2c66:	4b08      	ldr	r3, [pc, #32]	; (2c88 <NWK_Init+0x4c>)
    2c68:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2c6a:	4b08      	ldr	r3, [pc, #32]	; (2c8c <NWK_Init+0x50>)
    2c6c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2c6e:	4b08      	ldr	r3, [pc, #32]	; (2c90 <NWK_Init+0x54>)
    2c70:	4798      	blx	r3
#ifdef NWK_ENABLE_MULTICAST
	nwkGroupInit();
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
    2c72:	4b08      	ldr	r3, [pc, #32]	; (2c94 <NWK_Init+0x58>)
    2c74:	4798      	blx	r3
#endif
}
    2c76:	bd08      	pop	{r3, pc}
    2c78:	20000ec8 	.word	0x20000ec8
    2c7c:	00003fdd 	.word	0x00003fdd
    2c80:	00003831 	.word	0x00003831
    2c84:	00002ed9 	.word	0x00002ed9
    2c88:	00002d55 	.word	0x00002d55
    2c8c:	00002fd9 	.word	0x00002fd9
    2c90:	00003ca9 	.word	0x00003ca9
    2c94:	00003555 	.word	0x00003555

00002c98 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    2c98:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    2c9a:	4b02      	ldr	r3, [pc, #8]	; (2ca4 <NWK_SetAddr+0xc>)
    2c9c:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    2c9e:	4b02      	ldr	r3, [pc, #8]	; (2ca8 <NWK_SetAddr+0x10>)
    2ca0:	4798      	blx	r3
}
    2ca2:	bd08      	pop	{r3, pc}
    2ca4:	20000ec8 	.word	0x20000ec8
    2ca8:	00004411 	.word	0x00004411

00002cac <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    2cac:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    2cae:	4b02      	ldr	r3, [pc, #8]	; (2cb8 <NWK_SetPanId+0xc>)
    2cb0:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    2cb2:	4b02      	ldr	r3, [pc, #8]	; (2cbc <NWK_SetPanId+0x10>)
    2cb4:	4798      	blx	r3
}
    2cb6:	bd08      	pop	{r3, pc}
    2cb8:	20000ec8 	.word	0x20000ec8
    2cbc:	000043f1 	.word	0x000043f1

00002cc0 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2cc0:	3002      	adds	r0, #2
    2cc2:	0080      	lsls	r0, r0, #2
    2cc4:	4b01      	ldr	r3, [pc, #4]	; (2ccc <NWK_OpenEndpoint+0xc>)
    2cc6:	50c1      	str	r1, [r0, r3]
}
    2cc8:	4770      	bx	lr
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	20000ec8 	.word	0x20000ec8

00002cd0 <NWK_Lock>:
/*************************************************************************//**
*  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
	nwkIb.lock++;
    2cd0:	4a02      	ldr	r2, [pc, #8]	; (2cdc <NWK_Lock+0xc>)
    2cd2:	2358      	movs	r3, #88	; 0x58
    2cd4:	5ad1      	ldrh	r1, [r2, r3]
    2cd6:	3101      	adds	r1, #1
    2cd8:	52d1      	strh	r1, [r2, r3]
}
    2cda:	4770      	bx	lr
    2cdc:	20000ec8 	.word	0x20000ec8

00002ce0 <NWK_Unlock>:
/*************************************************************************//**
*  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
	nwkIb.lock--;
    2ce0:	4a02      	ldr	r2, [pc, #8]	; (2cec <NWK_Unlock+0xc>)
    2ce2:	2358      	movs	r3, #88	; 0x58
    2ce4:	5ad1      	ldrh	r1, [r2, r3]
    2ce6:	3901      	subs	r1, #1
    2ce8:	52d1      	strh	r1, [r2, r3]
}
    2cea:	4770      	bx	lr
    2cec:	20000ec8 	.word	0x20000ec8

00002cf0 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    2cf0:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    2cf2:	4b04      	ldr	r3, [pc, #16]	; (2d04 <NWK_TaskHandler+0x14>)
    2cf4:	4798      	blx	r3
	nwkTxTaskHandler();
    2cf6:	4b04      	ldr	r3, [pc, #16]	; (2d08 <NWK_TaskHandler+0x18>)
    2cf8:	4798      	blx	r3
	nwkDataReqTaskHandler();
    2cfa:	4b04      	ldr	r3, [pc, #16]	; (2d0c <NWK_TaskHandler+0x1c>)
    2cfc:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    2cfe:	4b04      	ldr	r3, [pc, #16]	; (2d10 <NWK_TaskHandler+0x20>)
    2d00:	4798      	blx	r3
#endif
}
    2d02:	bd08      	pop	{r3, pc}
    2d04:	000038d9 	.word	0x000038d9
    2d08:	000041ed 	.word	0x000041ed
    2d0c:	00002d95 	.word	0x00002d95
    2d10:	00003d9d 	.word	0x00003d9d

00002d14 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    2d14:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2d16:	4b0d      	ldr	r3, [pc, #52]	; (2d4c <nwkDataReqTxConf+0x38>)
    2d18:	681b      	ldr	r3, [r3, #0]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d012      	beq.n	2d44 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    2d1e:	685a      	ldr	r2, [r3, #4]
    2d20:	4282      	cmp	r2, r0
    2d22:	d10c      	bne.n	2d3e <nwkDataReqTxConf+0x2a>
    2d24:	e002      	b.n	2d2c <nwkDataReqTxConf+0x18>
    2d26:	685a      	ldr	r2, [r3, #4]
    2d28:	4282      	cmp	r2, r0
    2d2a:	d108      	bne.n	2d3e <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    2d2c:	2285      	movs	r2, #133	; 0x85
    2d2e:	5c82      	ldrb	r2, [r0, r2]
    2d30:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    2d32:	2288      	movs	r2, #136	; 0x88
    2d34:	5c82      	ldrb	r2, [r0, r2]
    2d36:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2d38:	2202      	movs	r2, #2
    2d3a:	721a      	strb	r2, [r3, #8]
			break;
    2d3c:	e002      	b.n	2d44 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d1f0      	bne.n	2d26 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    2d44:	4b02      	ldr	r3, [pc, #8]	; (2d50 <nwkDataReqTxConf+0x3c>)
    2d46:	4798      	blx	r3
}
    2d48:	bd08      	pop	{r3, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	200002d4 	.word	0x200002d4
    2d50:	00002f65 	.word	0x00002f65

00002d54 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2d54:	2200      	movs	r2, #0
    2d56:	4b01      	ldr	r3, [pc, #4]	; (2d5c <nwkDataReqInit+0x8>)
    2d58:	601a      	str	r2, [r3, #0]
}
    2d5a:	4770      	bx	lr
    2d5c:	200002d4 	.word	0x200002d4

00002d60 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    2d60:	2300      	movs	r3, #0
    2d62:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2d64:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    2d66:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    2d68:	4a08      	ldr	r2, [pc, #32]	; (2d8c <NWK_DataReq+0x2c>)
    2d6a:	2358      	movs	r3, #88	; 0x58
    2d6c:	5ad1      	ldrh	r1, [r2, r3]
    2d6e:	3101      	adds	r1, #1
    2d70:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    2d72:	4b07      	ldr	r3, [pc, #28]	; (2d90 <NWK_DataReq+0x30>)
    2d74:	681b      	ldr	r3, [r3, #0]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d103      	bne.n	2d82 <NWK_DataReq+0x22>
		req->next = NULL;
    2d7a:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2d7c:	4b04      	ldr	r3, [pc, #16]	; (2d90 <NWK_DataReq+0x30>)
    2d7e:	6018      	str	r0, [r3, #0]
    2d80:	e002      	b.n	2d88 <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    2d82:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2d84:	4b02      	ldr	r3, [pc, #8]	; (2d90 <NWK_DataReq+0x30>)
    2d86:	6018      	str	r0, [r3, #0]
	}
}
    2d88:	4770      	bx	lr
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	20000ec8 	.word	0x20000ec8
    2d90:	200002d4 	.word	0x200002d4

00002d94 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2d94:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2d96:	4b4a      	ldr	r3, [pc, #296]	; (2ec0 <nwkDataReqTaskHandler+0x12c>)
    2d98:	681a      	ldr	r2, [r3, #0]
    2d9a:	2a00      	cmp	r2, #0
    2d9c:	d100      	bne.n	2da0 <nwkDataReqTaskHandler+0xc>
    2d9e:	e08d      	b.n	2ebc <nwkDataReqTaskHandler+0x128>
    2da0:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    2da2:	7a23      	ldrb	r3, [r4, #8]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d002      	beq.n	2dae <nwkDataReqTaskHandler+0x1a>
    2da8:	2b02      	cmp	r3, #2
    2daa:	d06d      	beq.n	2e88 <nwkDataReqTaskHandler+0xf4>
    2dac:	e082      	b.n	2eb4 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    2dae:	4b45      	ldr	r3, [pc, #276]	; (2ec4 <nwkDataReqTaskHandler+0x130>)
    2db0:	4798      	blx	r3
    2db2:	1e05      	subs	r5, r0, #0
    2db4:	d103      	bne.n	2dbe <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2db6:	2302      	movs	r3, #2
    2db8:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    2dba:	7723      	strb	r3, [r4, #28]
    2dbc:	e07e      	b.n	2ebc <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    2dbe:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    2dc0:	2201      	movs	r2, #1
    2dc2:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    2dc4:	4b40      	ldr	r3, [pc, #256]	; (2ec8 <nwkDataReqTaskHandler+0x134>)
    2dc6:	2189      	movs	r1, #137	; 0x89
    2dc8:	5443      	strb	r3, [r0, r1]
    2dca:	0a18      	lsrs	r0, r3, #8
    2dcc:	218a      	movs	r1, #138	; 0x8a
    2dce:	5468      	strb	r0, [r5, r1]
    2dd0:	0c18      	lsrs	r0, r3, #16
    2dd2:	218b      	movs	r1, #139	; 0x8b
    2dd4:	5468      	strb	r0, [r5, r1]
    2dd6:	0e1b      	lsrs	r3, r3, #24
    2dd8:	218c      	movs	r1, #140	; 0x8c
    2dda:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    2ddc:	7ba0      	ldrb	r0, [r4, #14]
    2dde:	0880      	lsrs	r0, r0, #2
    2de0:	2301      	movs	r3, #1
    2de2:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    2de4:	2188      	movs	r1, #136	; 0x88
    2de6:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    2de8:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    2dea:	4019      	ands	r1, r3
    2dec:	7ae8      	ldrb	r0, [r5, #11]
    2dee:	4390      	bics	r0, r2
    2df0:	1c02      	adds	r2, r0, #0
    2df2:	430a      	orrs	r2, r1
    2df4:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    2df6:	7ba1      	ldrb	r1, [r4, #14]
    2df8:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    2dfa:	4019      	ands	r1, r3
    2dfc:	0089      	lsls	r1, r1, #2
    2dfe:	b2d2      	uxtb	r2, r2
    2e00:	2004      	movs	r0, #4
    2e02:	4382      	bics	r2, r0
    2e04:	430a      	orrs	r2, r1
    2e06:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    2e08:	7ba2      	ldrb	r2, [r4, #14]
    2e0a:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    2e0c:	4013      	ands	r3, r2
    2e0e:	005a      	lsls	r2, r3, #1
    2e10:	7aeb      	ldrb	r3, [r5, #11]
    2e12:	2102      	movs	r1, #2
    2e14:	438b      	bics	r3, r1
    2e16:	4313      	orrs	r3, r2
    2e18:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2e1a:	4b2c      	ldr	r3, [pc, #176]	; (2ecc <nwkDataReqTaskHandler+0x138>)
    2e1c:	791a      	ldrb	r2, [r3, #4]
    2e1e:	3201      	adds	r2, #1
    2e20:	b2d2      	uxtb	r2, r2
    2e22:	711a      	strb	r2, [r3, #4]
    2e24:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2e26:	781a      	ldrb	r2, [r3, #0]
    2e28:	736a      	strb	r2, [r5, #13]
    2e2a:	785b      	ldrb	r3, [r3, #1]
    2e2c:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    2e2e:	8963      	ldrh	r3, [r4, #10]
    2e30:	7aa2      	ldrb	r2, [r4, #10]
    2e32:	73ea      	strb	r2, [r5, #15]
    2e34:	0a1b      	lsrs	r3, r3, #8
    2e36:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    2e38:	7b61      	ldrb	r1, [r4, #13]
    2e3a:	230f      	movs	r3, #15
    2e3c:	4019      	ands	r1, r3
    2e3e:	7c6a      	ldrb	r2, [r5, #17]
    2e40:	200f      	movs	r0, #15
    2e42:	4382      	bics	r2, r0
    2e44:	430a      	orrs	r2, r1
    2e46:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    2e48:	7b22      	ldrb	r2, [r4, #12]
    2e4a:	0112      	lsls	r2, r2, #4
    2e4c:	7c69      	ldrb	r1, [r5, #17]
    2e4e:	400b      	ands	r3, r1
    2e50:	4313      	orrs	r3, r2
    2e52:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2e54:	2381      	movs	r3, #129	; 0x81
    2e56:	5ceb      	ldrb	r3, [r5, r3]
    2e58:	2282      	movs	r2, #130	; 0x82
    2e5a:	5ca8      	ldrb	r0, [r5, r2]
    2e5c:	0200      	lsls	r0, r0, #8
    2e5e:	4318      	orrs	r0, r3
    2e60:	2383      	movs	r3, #131	; 0x83
    2e62:	5ceb      	ldrb	r3, [r5, r3]
    2e64:	041b      	lsls	r3, r3, #16
    2e66:	4318      	orrs	r0, r3
    2e68:	2384      	movs	r3, #132	; 0x84
    2e6a:	5ceb      	ldrb	r3, [r5, r3]
    2e6c:	061b      	lsls	r3, r3, #24
    2e6e:	4318      	orrs	r0, r3
    2e70:	7d22      	ldrb	r2, [r4, #20]
    2e72:	6921      	ldr	r1, [r4, #16]
    2e74:	4b16      	ldr	r3, [pc, #88]	; (2ed0 <nwkDataReqTaskHandler+0x13c>)
    2e76:	4798      	blx	r3
	frame->size += req->size;
    2e78:	7d22      	ldrb	r2, [r4, #20]
    2e7a:	786b      	ldrb	r3, [r5, #1]
    2e7c:	18d3      	adds	r3, r2, r3
    2e7e:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    2e80:	1c28      	adds	r0, r5, #0
    2e82:	4b14      	ldr	r3, [pc, #80]	; (2ed4 <nwkDataReqTaskHandler+0x140>)
    2e84:	4798      	blx	r3
    2e86:	e019      	b.n	2ebc <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    2e88:	4294      	cmp	r4, r2
    2e8a:	d103      	bne.n	2e94 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2e8c:	4b0c      	ldr	r3, [pc, #48]	; (2ec0 <nwkDataReqTaskHandler+0x12c>)
    2e8e:	6822      	ldr	r2, [r4, #0]
    2e90:	601a      	str	r2, [r3, #0]
    2e92:	e006      	b.n	2ea2 <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2e94:	6813      	ldr	r3, [r2, #0]
    2e96:	429c      	cmp	r4, r3
    2e98:	d001      	beq.n	2e9e <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    2e9a:	1c1a      	adds	r2, r3, #0
    2e9c:	e7fa      	b.n	2e94 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    2e9e:	6823      	ldr	r3, [r4, #0]
    2ea0:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    2ea2:	4a0a      	ldr	r2, [pc, #40]	; (2ecc <nwkDataReqTaskHandler+0x138>)
    2ea4:	2358      	movs	r3, #88	; 0x58
    2ea6:	5ad1      	ldrh	r1, [r2, r3]
    2ea8:	3901      	subs	r1, #1
    2eaa:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    2eac:	69a3      	ldr	r3, [r4, #24]
    2eae:	1c20      	adds	r0, r4, #0
    2eb0:	4798      	blx	r3
    2eb2:	e003      	b.n	2ebc <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2eb4:	6824      	ldr	r4, [r4, #0]
    2eb6:	2c00      	cmp	r4, #0
    2eb8:	d000      	beq.n	2ebc <nwkDataReqTaskHandler+0x128>
    2eba:	e772      	b.n	2da2 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    2ebc:	bd38      	pop	{r3, r4, r5, pc}
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	200002d4 	.word	0x200002d4
    2ec4:	00002ef5 	.word	0x00002ef5
    2ec8:	00002d15 	.word	0x00002d15
    2ecc:	20000ec8 	.word	0x20000ec8
    2ed0:	00005881 	.word	0x00005881
    2ed4:	00004011 	.word	0x00004011

00002ed8 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    2ed8:	4b04      	ldr	r3, [pc, #16]	; (2eec <nwkFrameInit+0x14>)
    2eda:	4a05      	ldr	r2, [pc, #20]	; (2ef0 <nwkFrameInit+0x18>)
    2edc:	1899      	adds	r1, r3, r2
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2ede:	2200      	movs	r2, #0
    2ee0:	701a      	strb	r2, [r3, #0]
    2ee2:	338d      	adds	r3, #141	; 0x8d
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    2ee4:	428b      	cmp	r3, r1
    2ee6:	d1fb      	bne.n	2ee0 <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    2ee8:	4770      	bx	lr
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	200002d8 	.word	0x200002d8
    2ef0:	00000582 	.word	0x00000582

00002ef4 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2ef4:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2ef6:	4b18      	ldr	r3, [pc, #96]	; (2f58 <nwkFrameAlloc+0x64>)
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d007      	beq.n	2f0e <nwkFrameAlloc+0x1a>
    2efe:	4a16      	ldr	r2, [pc, #88]	; (2f58 <nwkFrameAlloc+0x64>)
    2f00:	328d      	adds	r2, #141	; 0x8d
    2f02:	2301      	movs	r3, #1
    2f04:	1c18      	adds	r0, r3, #0
    2f06:	7811      	ldrb	r1, [r2, #0]
    2f08:	2900      	cmp	r1, #0
    2f0a:	d11d      	bne.n	2f48 <nwkFrameAlloc+0x54>
    2f0c:	e000      	b.n	2f10 <nwkFrameAlloc+0x1c>
    2f0e:	2000      	movs	r0, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    2f10:	4e11      	ldr	r6, [pc, #68]	; (2f58 <nwkFrameAlloc+0x64>)
    2f12:	258d      	movs	r5, #141	; 0x8d
    2f14:	4345      	muls	r5, r0
    2f16:	1974      	adds	r4, r6, r5
    2f18:	1c20      	adds	r0, r4, #0
    2f1a:	2100      	movs	r1, #0
    2f1c:	228d      	movs	r2, #141	; 0x8d
    2f1e:	4b0f      	ldr	r3, [pc, #60]	; (2f5c <nwkFrameAlloc+0x68>)
    2f20:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2f22:	2310      	movs	r3, #16
    2f24:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2f26:	1c23      	adds	r3, r4, #0
    2f28:	3380      	adds	r3, #128	; 0x80
    2f2a:	1c20      	adds	r0, r4, #0
    2f2c:	3012      	adds	r0, #18
    2f2e:	7058      	strb	r0, [r3, #1]
    2f30:	0a02      	lsrs	r2, r0, #8
    2f32:	709a      	strb	r2, [r3, #2]
    2f34:	0c02      	lsrs	r2, r0, #16
    2f36:	70da      	strb	r2, [r3, #3]
    2f38:	0e00      	lsrs	r0, r0, #24
    2f3a:	7118      	strb	r0, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    2f3c:	4a08      	ldr	r2, [pc, #32]	; (2f60 <nwkFrameAlloc+0x6c>)
    2f3e:	2358      	movs	r3, #88	; 0x58
    2f40:	5ad1      	ldrh	r1, [r2, r3]
    2f42:	3101      	adds	r1, #1
    2f44:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
    2f46:	e004      	b.n	2f52 <nwkFrameAlloc+0x5e>
    2f48:	3301      	adds	r3, #1
    2f4a:	328d      	adds	r2, #141	; 0x8d
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    2f4c:	2b0a      	cmp	r3, #10
    2f4e:	d1d9      	bne.n	2f04 <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    2f50:	2400      	movs	r4, #0
}
    2f52:	1c20      	adds	r0, r4, #0
    2f54:	bd70      	pop	{r4, r5, r6, pc}
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	200002d8 	.word	0x200002d8
    2f5c:	00005893 	.word	0x00005893
    2f60:	20000ec8 	.word	0x20000ec8

00002f64 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2f64:	2300      	movs	r3, #0
    2f66:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2f68:	4a02      	ldr	r2, [pc, #8]	; (2f74 <nwkFrameFree+0x10>)
    2f6a:	2358      	movs	r3, #88	; 0x58
    2f6c:	5ad1      	ldrh	r1, [r2, r3]
    2f6e:	3901      	subs	r1, #1
    2f70:	52d1      	strh	r1, [r2, r3]
}
    2f72:	4770      	bx	lr
    2f74:	20000ec8 	.word	0x20000ec8

00002f78 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2f78:	2800      	cmp	r0, #0
    2f7a:	d006      	beq.n	2f8a <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2f7c:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2f7e:	4b0c      	ldr	r3, [pc, #48]	; (2fb0 <nwkFrameNext+0x38>)
    2f80:	4a0c      	ldr	r2, [pc, #48]	; (2fb4 <nwkFrameNext+0x3c>)
    2f82:	189b      	adds	r3, r3, r2
    2f84:	4298      	cmp	r0, r3
    2f86:	d301      	bcc.n	2f8c <nwkFrameNext+0x14>
    2f88:	e00f      	b.n	2faa <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2f8a:	4809      	ldr	r0, [pc, #36]	; (2fb0 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2f8c:	7803      	ldrb	r3, [r0, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d10c      	bne.n	2fac <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2f92:	4a07      	ldr	r2, [pc, #28]	; (2fb0 <nwkFrameNext+0x38>)
    2f94:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <nwkFrameNext+0x3c>)
    2f96:	18d2      	adds	r2, r2, r3
    2f98:	e002      	b.n	2fa0 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2f9a:	7803      	ldrb	r3, [r0, #0]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d105      	bne.n	2fac <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2fa0:	308d      	adds	r0, #141	; 0x8d
    2fa2:	4290      	cmp	r0, r2
    2fa4:	d3f9      	bcc.n	2f9a <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2fa6:	2000      	movs	r0, #0
    2fa8:	e000      	b.n	2fac <nwkFrameNext+0x34>
    2faa:	2000      	movs	r0, #0
}
    2fac:	4770      	bx	lr
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	200002d8 	.word	0x200002d8
    2fb4:	00000582 	.word	0x00000582

00002fb8 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2fb8:	2200      	movs	r2, #0
    2fba:	2385      	movs	r3, #133	; 0x85
    2fbc:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2fbe:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <nwkFrameCommandInit+0x1c>)
    2fc0:	791a      	ldrb	r2, [r3, #4]
    2fc2:	3201      	adds	r2, #1
    2fc4:	b2d2      	uxtb	r2, r2
    2fc6:	711a      	strb	r2, [r3, #4]
    2fc8:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2fca:	781a      	ldrb	r2, [r3, #0]
    2fcc:	7342      	strb	r2, [r0, #13]
    2fce:	785b      	ldrb	r3, [r3, #1]
    2fd0:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    2fd2:	4770      	bx	lr
    2fd4:	20000ec8 	.word	0x20000ec8

00002fd8 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fda:	4a09      	ldr	r2, [pc, #36]	; (3000 <nwkRouteInit+0x28>)
    2fdc:	3202      	adds	r2, #2
    2fde:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2fe0:	2701      	movs	r7, #1
    2fe2:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2fe4:	4806      	ldr	r0, [pc, #24]	; (3000 <nwkRouteInit+0x28>)
    2fe6:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2fe8:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2fea:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    2fec:	00d9      	lsls	r1, r3, #3
    2fee:	5c0c      	ldrb	r4, [r1, r0]
    2ff0:	43b4      	bics	r4, r6
    2ff2:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    2ff4:	7115      	strb	r5, [r2, #4]
    2ff6:	3301      	adds	r3, #1
    2ff8:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2ffa:	2b64      	cmp	r3, #100	; 0x64
    2ffc:	d1f5      	bne.n	2fea <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3000:	2000085c 	.word	0x2000085c

00003004 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    3004:	b570      	push	{r4, r5, r6, lr}
    3006:	4a0b      	ldr	r2, [pc, #44]	; (3034 <NWK_RouteFindEntry+0x30>)
    3008:	3202      	adds	r2, #2
    300a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    300c:	4e09      	ldr	r6, [pc, #36]	; (3034 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    300e:	8814      	ldrh	r4, [r2, #0]
    3010:	4284      	cmp	r4, r0
    3012:	d109      	bne.n	3028 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    3014:	00dc      	lsls	r4, r3, #3
    3016:	5da4      	ldrb	r4, [r4, r6]
    3018:	07a4      	lsls	r4, r4, #30
    301a:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    301c:	428c      	cmp	r4, r1
    301e:	d103      	bne.n	3028 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    3020:	00dd      	lsls	r5, r3, #3
    3022:	4804      	ldr	r0, [pc, #16]	; (3034 <NWK_RouteFindEntry+0x30>)
    3024:	1940      	adds	r0, r0, r5
    3026:	e004      	b.n	3032 <NWK_RouteFindEntry+0x2e>
    3028:	3301      	adds	r3, #1
    302a:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    302c:	2b64      	cmp	r3, #100	; 0x64
    302e:	d1ee      	bne.n	300e <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    3030:	2000      	movs	r0, #0
}
    3032:	bd70      	pop	{r4, r5, r6, pc}
    3034:	2000085c 	.word	0x2000085c

00003038 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    3038:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    303a:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    303c:	4810      	ldr	r0, [pc, #64]	; (3080 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    303e:	24c8      	movs	r4, #200	; 0xc8
    3040:	00a4      	lsls	r4, r4, #2
    3042:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    3044:	7803      	ldrb	r3, [r0, #0]
    3046:	07dc      	lsls	r4, r3, #31
    3048:	d40b      	bmi.n	3062 <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    304a:	7983      	ldrb	r3, [r0, #6]
    304c:	2b00      	cmp	r3, #0
    304e:	d00c      	beq.n	306a <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    3050:	2a00      	cmp	r2, #0
    3052:	d003      	beq.n	305c <NWK_RouteNewEntry+0x24>
    3054:	7994      	ldrb	r4, [r2, #6]
    3056:	429c      	cmp	r4, r3
    3058:	d802      	bhi.n	3060 <NWK_RouteNewEntry+0x28>
    305a:	e002      	b.n	3062 <NWK_RouteNewEntry+0x2a>
    305c:	1c02      	adds	r2, r0, #0
    305e:	e000      	b.n	3062 <NWK_RouteNewEntry+0x2a>
    3060:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    3062:	3008      	adds	r0, #8
    3064:	4288      	cmp	r0, r1
    3066:	d1ed      	bne.n	3044 <NWK_RouteNewEntry+0xc>
    3068:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    306a:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    306c:	2202      	movs	r2, #2
    306e:	4393      	bics	r3, r2
    3070:	220f      	movs	r2, #15
    3072:	4013      	ands	r3, r2
    3074:	2230      	movs	r2, #48	; 0x30
    3076:	4313      	orrs	r3, r2
    3078:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    307a:	2380      	movs	r3, #128	; 0x80
    307c:	7183      	strb	r3, [r0, #6]

	return entry;
}
    307e:	bd10      	pop	{r4, pc}
    3080:	2000085c 	.word	0x2000085c

00003084 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    3084:	7803      	ldrb	r3, [r0, #0]
    3086:	07da      	lsls	r2, r3, #31
    3088:	d404      	bmi.n	3094 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    308a:	2301      	movs	r3, #1
    308c:	425b      	negs	r3, r3
    308e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    3090:	2300      	movs	r3, #0
    3092:	7183      	strb	r3, [r0, #6]
}
    3094:	4770      	bx	lr
    3096:	46c0      	nop			; (mov r8, r8)

00003098 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    3098:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    309a:	4b04      	ldr	r3, [pc, #16]	; (30ac <NWK_RouteNextHop+0x14>)
    309c:	4798      	blx	r3
	if (entry) {
    309e:	2800      	cmp	r0, #0
    30a0:	d001      	beq.n	30a6 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    30a2:	8880      	ldrh	r0, [r0, #4]
    30a4:	e000      	b.n	30a8 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    30a6:	4802      	ldr	r0, [pc, #8]	; (30b0 <NWK_RouteNextHop+0x18>)
}
    30a8:	bd08      	pop	{r3, pc}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	00003005 	.word	0x00003005
    30b0:	0000ffff 	.word	0x0000ffff

000030b4 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    30b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30b6:	1c06      	adds	r6, r0, #0
    30b8:	1c0d      	adds	r5, r1, #0
    30ba:	1c14      	adds	r4, r2, #0
    30bc:	1c1f      	adds	r7, r3, #0
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    30be:	4b0c      	ldr	r3, [pc, #48]	; (30f0 <nwkRouteUpdateEntry+0x3c>)
    30c0:	4798      	blx	r3

	if (NULL == entry) {
    30c2:	2800      	cmp	r0, #0
    30c4:	d101      	bne.n	30ca <nwkRouteUpdateEntry+0x16>
		entry = NWK_RouteNewEntry();
    30c6:	4b0b      	ldr	r3, [pc, #44]	; (30f4 <nwkRouteUpdateEntry+0x40>)
    30c8:	4798      	blx	r3
	}

	entry->dstAddr = dst;
    30ca:	8046      	strh	r6, [r0, #2]
	entry->nextHopAddr = nextHop;
    30cc:	8084      	strh	r4, [r0, #4]
	entry->multicast = multicast;
    30ce:	2301      	movs	r3, #1
    30d0:	401d      	ands	r5, r3
    30d2:	006b      	lsls	r3, r5, #1
    30d4:	7805      	ldrb	r5, [r0, #0]
    30d6:	2202      	movs	r2, #2
    30d8:	4395      	bics	r5, r2
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    30da:	431d      	orrs	r5, r3
    30dc:	230f      	movs	r3, #15
    30de:	401d      	ands	r5, r3
    30e0:	2330      	movs	r3, #48	; 0x30
    30e2:	431d      	orrs	r5, r3
    30e4:	7005      	strb	r5, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    30e6:	2380      	movs	r3, #128	; 0x80
    30e8:	7183      	strb	r3, [r0, #6]
	entry->lqi = lqi;
    30ea:	71c7      	strb	r7, [r0, #7]
}
    30ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	00003005 	.word	0x00003005
    30f4:	00003039 	.word	0x00003039

000030f8 <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    30f8:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    30fa:	4b03      	ldr	r3, [pc, #12]	; (3108 <nwkRouteRemove+0x10>)
    30fc:	4798      	blx	r3
	if (entry) {
    30fe:	2800      	cmp	r0, #0
    3100:	d001      	beq.n	3106 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    3102:	4b02      	ldr	r3, [pc, #8]	; (310c <nwkRouteRemove+0x14>)
    3104:	4798      	blx	r3
	}
}
    3106:	bd08      	pop	{r3, pc}
    3108:	00003005 	.word	0x00003005
    310c:	00003085 	.word	0x00003085

00003110 <nwkRouteFrameReceived>:

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    3110:	4770      	bx	lr
    3112:	46c0      	nop			; (mov r8, r8)

00003114 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    3114:	b510      	push	{r4, lr}
    3116:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    3118:	7bc3      	ldrb	r3, [r0, #15]
    311a:	7c00      	ldrb	r0, [r0, #16]
    311c:	0200      	lsls	r0, r0, #8
    311e:	4318      	orrs	r0, r3
    3120:	4b1b      	ldr	r3, [pc, #108]	; (3190 <nwkRouteFrameSent+0x7c>)
    3122:	4298      	cmp	r0, r3
    3124:	d032      	beq.n	318c <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    3126:	7ae1      	ldrb	r1, [r4, #11]
    3128:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    312a:	0fc9      	lsrs	r1, r1, #31
    312c:	4b19      	ldr	r3, [pc, #100]	; (3194 <nwkRouteFrameSent+0x80>)
    312e:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    3130:	2800      	cmp	r0, #0
    3132:	d02b      	beq.n	318c <nwkRouteFrameSent+0x78>
    3134:	7803      	ldrb	r3, [r0, #0]
    3136:	07da      	lsls	r2, r3, #31
    3138:	d428      	bmi.n	318c <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    313a:	2385      	movs	r3, #133	; 0x85
    313c:	5ce3      	ldrb	r3, [r4, r3]
    313e:	2b00      	cmp	r3, #0
    3140:	d117      	bne.n	3172 <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    3142:	7803      	ldrb	r3, [r0, #0]
    3144:	220f      	movs	r2, #15
    3146:	4013      	ands	r3, r2
    3148:	2230      	movs	r2, #48	; 0x30
    314a:	4313      	orrs	r3, r2
    314c:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    314e:	7983      	ldrb	r3, [r0, #6]
    3150:	3301      	adds	r3, #1
    3152:	b2db      	uxtb	r3, r3
    3154:	7183      	strb	r3, [r0, #6]
    3156:	2bff      	cmp	r3, #255	; 0xff
    3158:	d118      	bne.n	318c <nwkRouteFrameSent+0x78>
    315a:	490f      	ldr	r1, [pc, #60]	; (3198 <nwkRouteFrameSent+0x84>)
    315c:	1d8b      	adds	r3, r1, #6
    315e:	4a0f      	ldr	r2, [pc, #60]	; (319c <nwkRouteFrameSent+0x88>)
    3160:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    3162:	781a      	ldrb	r2, [r3, #0]
    3164:	0852      	lsrs	r2, r2, #1
    3166:	3201      	adds	r2, #1
    3168:	701a      	strb	r2, [r3, #0]
    316a:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    316c:	428b      	cmp	r3, r1
    316e:	d1f8      	bne.n	3162 <nwkRouteFrameSent+0x4e>
    3170:	e00c      	b.n	318c <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    3172:	7802      	ldrb	r2, [r0, #0]
    3174:	0913      	lsrs	r3, r2, #4
    3176:	330f      	adds	r3, #15
    3178:	210f      	movs	r1, #15
    317a:	400b      	ands	r3, r1
    317c:	011c      	lsls	r4, r3, #4
    317e:	400a      	ands	r2, r1
    3180:	4322      	orrs	r2, r4
    3182:	7002      	strb	r2, [r0, #0]
    3184:	2b00      	cmp	r3, #0
    3186:	d101      	bne.n	318c <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    3188:	4b05      	ldr	r3, [pc, #20]	; (31a0 <nwkRouteFrameSent+0x8c>)
    318a:	4798      	blx	r3
		}
	}
}
    318c:	bd10      	pop	{r4, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	0000ffff 	.word	0x0000ffff
    3194:	00003005 	.word	0x00003005
    3198:	2000085c 	.word	0x2000085c
    319c:	00000326 	.word	0x00000326
    31a0:	00003085 	.word	0x00003085

000031a4 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    31a4:	b538      	push	{r3, r4, r5, lr}
    31a6:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    31a8:	7bc2      	ldrb	r2, [r0, #15]
    31aa:	7c00      	ldrb	r0, [r0, #16]
    31ac:	0200      	lsls	r0, r0, #8
    31ae:	4310      	orrs	r0, r2
    31b0:	4b0e      	ldr	r3, [pc, #56]	; (31ec <nwkRoutePrepareTx+0x48>)
    31b2:	4298      	cmp	r0, r3
    31b4:	d104      	bne.n	31c0 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    31b6:	2301      	movs	r3, #1
    31b8:	425b      	negs	r3, r3
    31ba:	71e3      	strb	r3, [r4, #7]
    31bc:	7223      	strb	r3, [r4, #8]
    31be:	e014      	b.n	31ea <nwkRoutePrepareTx+0x46>
	} else if (header->nwkFcf.linkLocal) {
    31c0:	7ae3      	ldrb	r3, [r4, #11]
    31c2:	075a      	lsls	r2, r3, #29
    31c4:	d503      	bpl.n	31ce <nwkRoutePrepareTx+0x2a>
		header->macDstAddr = header->nwkDstAddr;
    31c6:	71e0      	strb	r0, [r4, #7]
    31c8:	0a00      	lsrs	r0, r0, #8
    31ca:	7220      	strb	r0, [r4, #8]
    31cc:	e00d      	b.n	31ea <nwkRoutePrepareTx+0x46>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    31ce:	7ae1      	ldrb	r1, [r4, #11]
    31d0:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    31d2:	0fc9      	lsrs	r1, r1, #31
    31d4:	4b06      	ldr	r3, [pc, #24]	; (31f0 <nwkRoutePrepareTx+0x4c>)
    31d6:	4798      	blx	r3
    31d8:	71e0      	strb	r0, [r4, #7]
    31da:	0a03      	lsrs	r3, r0, #8
    31dc:	7223      	strb	r3, [r4, #8]
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    31de:	4b03      	ldr	r3, [pc, #12]	; (31ec <nwkRoutePrepareTx+0x48>)
    31e0:	4298      	cmp	r0, r3
    31e2:	d102      	bne.n	31ea <nwkRoutePrepareTx+0x46>
			nwkRouteDiscoveryRequest(frame);
    31e4:	1c20      	adds	r0, r4, #0
    31e6:	4b03      	ldr	r3, [pc, #12]	; (31f4 <nwkRoutePrepareTx+0x50>)
    31e8:	4798      	blx	r3
		}

  #endif
	}
}
    31ea:	bd38      	pop	{r3, r4, r5, pc}
    31ec:	0000ffff 	.word	0x0000ffff
    31f0:	00003099 	.word	0x00003099
    31f4:	00003581 	.word	0x00003581

000031f8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    31f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fa:	4647      	mov	r7, r8
    31fc:	b480      	push	{r7}
    31fe:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    3200:	7bc2      	ldrb	r2, [r0, #15]
    3202:	7c06      	ldrb	r6, [r0, #16]
    3204:	0236      	lsls	r6, r6, #8
    3206:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    3208:	7ac7      	ldrb	r7, [r0, #11]
    320a:	073f      	lsls	r7, r7, #28
    320c:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    320e:	b2f9      	uxtb	r1, r7
    3210:	1c30      	adds	r0, r6, #0
    3212:	4b28      	ldr	r3, [pc, #160]	; (32b4 <nwkRouteFrame+0xbc>)
    3214:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    3216:	4b28      	ldr	r3, [pc, #160]	; (32b8 <nwkRouteFrame+0xc0>)
    3218:	4298      	cmp	r0, r3
    321a:	d00f      	beq.n	323c <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    321c:	2200      	movs	r2, #0
    321e:	2389      	movs	r3, #137	; 0x89
    3220:	54e2      	strb	r2, [r4, r3]
    3222:	238a      	movs	r3, #138	; 0x8a
    3224:	54e2      	strb	r2, [r4, r3]
    3226:	238b      	movs	r3, #139	; 0x8b
    3228:	54e2      	strb	r2, [r4, r3]
    322a:	238c      	movs	r3, #140	; 0x8c
    322c:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    322e:	2202      	movs	r2, #2
    3230:	2388      	movs	r3, #136	; 0x88
    3232:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    3234:	1c20      	adds	r0, r4, #0
    3236:	4b21      	ldr	r3, [pc, #132]	; (32bc <nwkRouteFrame+0xc4>)
    3238:	4798      	blx	r3
    323a:	e038      	b.n	32ae <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    323c:	7b62      	ldrb	r2, [r4, #13]
    323e:	7ba3      	ldrb	r3, [r4, #14]
    3240:	021b      	lsls	r3, r3, #8
    3242:	4313      	orrs	r3, r2
    3244:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    3246:	4b1e      	ldr	r3, [pc, #120]	; (32c0 <nwkRouteFrame+0xc8>)
    3248:	4798      	blx	r3
    324a:	1e05      	subs	r5, r0, #0
    324c:	d02c      	beq.n	32a8 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    324e:	4b1d      	ldr	r3, [pc, #116]	; (32c4 <nwkRouteFrame+0xcc>)
    3250:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    3252:	786b      	ldrb	r3, [r5, #1]
    3254:	3306      	adds	r3, #6
    3256:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    3258:	2200      	movs	r2, #0
    325a:	2389      	movs	r3, #137	; 0x89
    325c:	54ea      	strb	r2, [r5, r3]
    325e:	238a      	movs	r3, #138	; 0x8a
    3260:	54ea      	strb	r2, [r5, r3]
    3262:	238b      	movs	r3, #139	; 0x8b
    3264:	54ea      	strb	r2, [r5, r3]
    3266:	238c      	movs	r3, #140	; 0x8c
    3268:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    326a:	21ff      	movs	r1, #255	; 0xff
    326c:	4643      	mov	r3, r8
    326e:	4019      	ands	r1, r3
    3270:	73e9      	strb	r1, [r5, #15]
    3272:	0a1a      	lsrs	r2, r3, #8
    3274:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    3276:	2381      	movs	r3, #129	; 0x81
    3278:	5ce8      	ldrb	r0, [r5, r3]
    327a:	2382      	movs	r3, #130	; 0x82
    327c:	5ceb      	ldrb	r3, [r5, r3]
    327e:	021b      	lsls	r3, r3, #8
    3280:	4303      	orrs	r3, r0
    3282:	2083      	movs	r0, #131	; 0x83
    3284:	5c28      	ldrb	r0, [r5, r0]
    3286:	0400      	lsls	r0, r0, #16
    3288:	4303      	orrs	r3, r0
    328a:	2084      	movs	r0, #132	; 0x84
    328c:	5c28      	ldrb	r0, [r5, r0]
    328e:	0600      	lsls	r0, r0, #24
    3290:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    3292:	2001      	movs	r0, #1
    3294:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    3296:	7059      	strb	r1, [r3, #1]
    3298:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    329a:	70de      	strb	r6, [r3, #3]
    329c:	0a36      	lsrs	r6, r6, #8
    329e:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    32a0:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    32a2:	1c28      	adds	r0, r5, #0
    32a4:	4b05      	ldr	r3, [pc, #20]	; (32bc <nwkRouteFrame+0xc4>)
    32a6:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    32a8:	1c20      	adds	r0, r4, #0
    32aa:	4b07      	ldr	r3, [pc, #28]	; (32c8 <nwkRouteFrame+0xd0>)
    32ac:	4798      	blx	r3
	}
}
    32ae:	bc04      	pop	{r2}
    32b0:	4690      	mov	r8, r2
    32b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32b4:	00003099 	.word	0x00003099
    32b8:	0000ffff 	.word	0x0000ffff
    32bc:	00004011 	.word	0x00004011
    32c0:	00002ef5 	.word	0x00002ef5
    32c4:	00002fb9 	.word	0x00002fb9
    32c8:	00002f65 	.word	0x00002f65

000032cc <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    32cc:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    32ce:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    32d0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    32d2:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    32d4:	2b06      	cmp	r3, #6
    32d6:	d107      	bne.n	32e8 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    32d8:	78d3      	ldrb	r3, [r2, #3]
    32da:	7910      	ldrb	r0, [r2, #4]
    32dc:	0200      	lsls	r0, r0, #8
    32de:	4318      	orrs	r0, r3
    32e0:	7951      	ldrb	r1, [r2, #5]
    32e2:	4b02      	ldr	r3, [pc, #8]	; (32ec <nwkRouteErrorReceived+0x20>)
    32e4:	4798      	blx	r3

	return true;
    32e6:	2001      	movs	r0, #1
}
    32e8:	bd08      	pop	{r3, pc}
    32ea:	46c0      	nop			; (mov r8, r8)
    32ec:	000030f9 	.word	0x000030f9

000032f0 <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f2:	4b0d      	ldr	r3, [pc, #52]	; (3328 <nwkRouteDiscoveryFindEntry+0x38>)
    32f4:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    32f6:	895d      	ldrh	r5, [r3, #10]
    32f8:	2d00      	cmp	r5, #0
    32fa:	d00e      	beq.n	331a <nwkRouteDiscoveryFindEntry+0x2a>
    32fc:	881d      	ldrh	r5, [r3, #0]
    32fe:	4285      	cmp	r5, r0
    3300:	d10b      	bne.n	331a <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    3302:	885d      	ldrh	r5, [r3, #2]
    3304:	428d      	cmp	r5, r1
    3306:	d108      	bne.n	331a <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    3308:	791d      	ldrb	r5, [r3, #4]
    330a:	4295      	cmp	r5, r2
    330c:	d105      	bne.n	331a <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    330e:	0063      	lsls	r3, r4, #1
    3310:	191f      	adds	r7, r3, r4
    3312:	00bf      	lsls	r7, r7, #2
    3314:	4804      	ldr	r0, [pc, #16]	; (3328 <nwkRouteDiscoveryFindEntry+0x38>)
    3316:	19c0      	adds	r0, r0, r7
    3318:	e004      	b.n	3324 <nwkRouteDiscoveryFindEntry+0x34>
    331a:	3401      	adds	r4, #1
    331c:	330c      	adds	r3, #12
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    331e:	2c05      	cmp	r4, #5
    3320:	d1e9      	bne.n	32f6 <nwkRouteDiscoveryFindEntry+0x6>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    3322:	2000      	movs	r0, #0
}
    3324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	20000b90 	.word	0x20000b90

0000332c <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    332c:	b510      	push	{r4, lr}
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    332e:	4b11      	ldr	r3, [pc, #68]	; (3374 <nwkRouteDiscoveryNewEntry+0x48>)
    3330:	895b      	ldrh	r3, [r3, #10]
    3332:	2b00      	cmp	r3, #0
    3334:	d007      	beq.n	3346 <nwkRouteDiscoveryNewEntry+0x1a>
    3336:	4a0f      	ldr	r2, [pc, #60]	; (3374 <nwkRouteDiscoveryNewEntry+0x48>)
    3338:	3216      	adds	r2, #22
    333a:	2301      	movs	r3, #1
    333c:	1c18      	adds	r0, r3, #0
    333e:	8811      	ldrh	r1, [r2, #0]
    3340:	2900      	cmp	r1, #0
    3342:	d110      	bne.n	3366 <nwkRouteDiscoveryNewEntry+0x3a>
    3344:	e000      	b.n	3348 <nwkRouteDiscoveryNewEntry+0x1c>
    3346:	2000      	movs	r0, #0
			entry = &nwkRouteDiscoveryTable[i];
    3348:	0044      	lsls	r4, r0, #1
    334a:	1820      	adds	r0, r4, r0
    334c:	0080      	lsls	r0, r0, #2
    334e:	4c09      	ldr	r4, [pc, #36]	; (3374 <nwkRouteDiscoveryNewEntry+0x48>)
    3350:	1824      	adds	r4, r4, r0
			break;
		}
	}

	if (entry) {
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    3352:	2300      	movs	r3, #0
    3354:	7223      	strb	r3, [r4, #8]
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    3356:	7263      	strb	r3, [r4, #9]
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    3358:	23fa      	movs	r3, #250	; 0xfa
    335a:	009b      	lsls	r3, r3, #2
    335c:	8163      	strh	r3, [r4, #10]
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    335e:	4806      	ldr	r0, [pc, #24]	; (3378 <nwkRouteDiscoveryNewEntry+0x4c>)
    3360:	4b06      	ldr	r3, [pc, #24]	; (337c <nwkRouteDiscoveryNewEntry+0x50>)
    3362:	4798      	blx	r3
    3364:	e004      	b.n	3370 <nwkRouteDiscoveryNewEntry+0x44>
    3366:	3301      	adds	r3, #1
    3368:	320c      	adds	r2, #12
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    336a:	2b05      	cmp	r3, #5
    336c:	d1e6      	bne.n	333c <nwkRouteDiscoveryNewEntry+0x10>

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    336e:	2400      	movs	r4, #0
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
	}

	return entry;
}
    3370:	1c20      	adds	r0, r4, #0
    3372:	bd10      	pop	{r4, pc}
    3374:	20000b90 	.word	0x20000b90
    3378:	20000b7c 	.word	0x20000b7c
    337c:	0000473d 	.word	0x0000473d

00003380 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    3380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3382:	465f      	mov	r7, fp
    3384:	4656      	mov	r6, sl
    3386:	464d      	mov	r5, r9
    3388:	4644      	mov	r4, r8
    338a:	b4f0      	push	{r4, r5, r6, r7}
    338c:	4683      	mov	fp, r0
    338e:	4b26      	ldr	r3, [pc, #152]	; (3428 <nwkRouteDiscoveryTimerHandler+0xa8>)
    3390:	1c1c      	adds	r4, r3, #0
    3392:	340a      	adds	r4, #10
    3394:	1c1d      	adds	r5, r3, #0
    3396:	333c      	adds	r3, #60	; 0x3c
    3398:	4698      	mov	r8, r3
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    339a:	2700      	movs	r7, #0
    339c:	1c22      	adds	r2, r4, #0

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    339e:	8823      	ldrh	r3, [r4, #0]
    33a0:	2b64      	cmp	r3, #100	; 0x64
    33a2:	d903      	bls.n	33ac <nwkRouteDiscoveryTimerHandler+0x2c>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    33a4:	3b64      	subs	r3, #100	; 0x64
    33a6:	8023      	strh	r3, [r4, #0]
			restart = true;
    33a8:	2701      	movs	r7, #1
    33aa:	e02d      	b.n	3408 <nwkRouteDiscoveryTimerHandler+0x88>
		} else {
			entry->timeout = 0;
    33ac:	2300      	movs	r3, #0
    33ae:	8023      	strh	r3, [r4, #0]
    33b0:	46aa      	mov	sl, r5

			if (entry->srcAddr == nwkIb.addr) {
    33b2:	8829      	ldrh	r1, [r5, #0]
    33b4:	481d      	ldr	r0, [pc, #116]	; (342c <nwkRouteDiscoveryTimerHandler+0xac>)
    33b6:	8803      	ldrh	r3, [r0, #0]
    33b8:	4299      	cmp	r1, r3
    33ba:	d125      	bne.n	3408 <nwkRouteDiscoveryTimerHandler+0x88>
    33bc:	3a01      	subs	r2, #1
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    33be:	7812      	ldrb	r2, [r2, #0]
    33c0:	4691      	mov	r9, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    33c2:	2600      	movs	r6, #0
    33c4:	e01b      	b.n	33fe <nwkRouteDiscoveryTimerHandler+0x7e>

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    33c6:	7833      	ldrb	r3, [r6, #0]
    33c8:	2b40      	cmp	r3, #64	; 0x40
    33ca:	d118      	bne.n	33fe <nwkRouteDiscoveryTimerHandler+0x7e>
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    33cc:	7bf1      	ldrb	r1, [r6, #15]
    33ce:	7c33      	ldrb	r3, [r6, #16]
    33d0:	021b      	lsls	r3, r3, #8
    33d2:	4650      	mov	r0, sl
    33d4:	8842      	ldrh	r2, [r0, #2]
    33d6:	430b      	orrs	r3, r1
    33d8:	429a      	cmp	r2, r3
    33da:	d110      	bne.n	33fe <nwkRouteDiscoveryTimerHandler+0x7e>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
    33dc:	7af3      	ldrb	r3, [r6, #11]
    33de:	071b      	lsls	r3, r3, #28
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    33e0:	7902      	ldrb	r2, [r0, #4]
    33e2:	0fdb      	lsrs	r3, r3, #31
    33e4:	429a      	cmp	r2, r3
    33e6:	d10a      	bne.n	33fe <nwkRouteDiscoveryTimerHandler+0x7e>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
		}

		if (status) {
    33e8:	4649      	mov	r1, r9
    33ea:	2900      	cmp	r1, #0
    33ec:	d003      	beq.n	33f6 <nwkRouteDiscoveryTimerHandler+0x76>
			nwkTxFrame(frame);
    33ee:	1c30      	adds	r0, r6, #0
    33f0:	4b0f      	ldr	r3, [pc, #60]	; (3430 <nwkRouteDiscoveryTimerHandler+0xb0>)
    33f2:	4798      	blx	r3
    33f4:	e003      	b.n	33fe <nwkRouteDiscoveryTimerHandler+0x7e>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    33f6:	1c30      	adds	r0, r6, #0
    33f8:	2111      	movs	r1, #17
    33fa:	4b0e      	ldr	r3, [pc, #56]	; (3434 <nwkRouteDiscoveryTimerHandler+0xb4>)
    33fc:	4798      	blx	r3
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33fe:	1c30      	adds	r0, r6, #0
    3400:	490d      	ldr	r1, [pc, #52]	; (3438 <nwkRouteDiscoveryTimerHandler+0xb8>)
    3402:	4788      	blx	r1
    3404:	1e06      	subs	r6, r0, #0
    3406:	d1de      	bne.n	33c6 <nwkRouteDiscoveryTimerHandler+0x46>
    3408:	340c      	adds	r4, #12
    340a:	350c      	adds	r5, #12
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    340c:	4545      	cmp	r5, r8
    340e:	d1c5      	bne.n	339c <nwkRouteDiscoveryTimerHandler+0x1c>
						0);
			}
		}
	}

	if (restart) {
    3410:	2f00      	cmp	r7, #0
    3412:	d002      	beq.n	341a <nwkRouteDiscoveryTimerHandler+0x9a>
		SYS_TimerStart(timer);
    3414:	4658      	mov	r0, fp
    3416:	4b09      	ldr	r3, [pc, #36]	; (343c <nwkRouteDiscoveryTimerHandler+0xbc>)
    3418:	4798      	blx	r3
	}
}
    341a:	bc3c      	pop	{r2, r3, r4, r5}
    341c:	4690      	mov	r8, r2
    341e:	4699      	mov	r9, r3
    3420:	46a2      	mov	sl, r4
    3422:	46ab      	mov	fp, r5
    3424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	20000b90 	.word	0x20000b90
    342c:	20000ec8 	.word	0x20000ec8
    3430:	00004011 	.word	0x00004011
    3434:	00004199 	.word	0x00004199
    3438:	00002f79 	.word	0x00002f79
    343c:	0000473d 	.word	0x0000473d

00003440 <nwkRouteDiscoverySendRequest>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    3440:	b570      	push	{r4, r5, r6, lr}
    3442:	1c05      	adds	r5, r0, #0
    3444:	1c0e      	adds	r6, r1, #0
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    3446:	4b1e      	ldr	r3, [pc, #120]	; (34c0 <nwkRouteDiscoverySendRequest+0x80>)
    3448:	4798      	blx	r3
    344a:	1e04      	subs	r4, r0, #0
    344c:	d036      	beq.n	34bc <nwkRouteDiscoverySendRequest+0x7c>
		return false;
	}

	nwkFrameCommandInit(req);
    344e:	4b1d      	ldr	r3, [pc, #116]	; (34c4 <nwkRouteDiscoverySendRequest+0x84>)
    3450:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteRequest_t);
    3452:	7863      	ldrb	r3, [r4, #1]
    3454:	3307      	adds	r3, #7
    3456:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    3458:	2200      	movs	r2, #0
    345a:	2389      	movs	r3, #137	; 0x89
    345c:	54e2      	strb	r2, [r4, r3]
    345e:	238a      	movs	r3, #138	; 0x8a
    3460:	54e2      	strb	r2, [r4, r3]
    3462:	238b      	movs	r3, #139	; 0x8b
    3464:	54e2      	strb	r2, [r4, r3]
    3466:	238c      	movs	r3, #140	; 0x8c
    3468:	54e2      	strb	r2, [r4, r3]

	req->header.nwkFcf.linkLocal = 1;
    346a:	7ae2      	ldrb	r2, [r4, #11]
    346c:	2304      	movs	r3, #4
    346e:	4313      	orrs	r3, r2
    3470:	72e3      	strb	r3, [r4, #11]
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    3472:	2301      	movs	r3, #1
    3474:	425b      	negs	r3, r3
    3476:	73e3      	strb	r3, [r4, #15]
    3478:	7423      	strb	r3, [r4, #16]

	command = (NwkCommandRouteRequest_t *)req->payload;
    347a:	2381      	movs	r3, #129	; 0x81
    347c:	5ce2      	ldrb	r2, [r4, r3]
    347e:	2382      	movs	r3, #130	; 0x82
    3480:	5ce3      	ldrb	r3, [r4, r3]
    3482:	021b      	lsls	r3, r3, #8
    3484:	4313      	orrs	r3, r2
    3486:	2283      	movs	r2, #131	; 0x83
    3488:	5ca2      	ldrb	r2, [r4, r2]
    348a:	0412      	lsls	r2, r2, #16
    348c:	4313      	orrs	r3, r2
    348e:	2284      	movs	r2, #132	; 0x84
    3490:	5ca2      	ldrb	r2, [r4, r2]
    3492:	0612      	lsls	r2, r2, #24
    3494:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    3496:	2202      	movs	r2, #2
    3498:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    349a:	882a      	ldrh	r2, [r5, #0]
    349c:	705a      	strb	r2, [r3, #1]
    349e:	0a12      	lsrs	r2, r2, #8
    34a0:	709a      	strb	r2, [r3, #2]
	command->dstAddr = entry->dstAddr;
    34a2:	886a      	ldrh	r2, [r5, #2]
    34a4:	78a9      	ldrb	r1, [r5, #2]
    34a6:	70d9      	strb	r1, [r3, #3]
    34a8:	0a12      	lsrs	r2, r2, #8
    34aa:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    34ac:	792a      	ldrb	r2, [r5, #4]
    34ae:	715a      	strb	r2, [r3, #5]
	command->linkQuality = lq;
    34b0:	719e      	strb	r6, [r3, #6]

	nwkTxFrame(req);
    34b2:	1c20      	adds	r0, r4, #0
    34b4:	4b04      	ldr	r3, [pc, #16]	; (34c8 <nwkRouteDiscoverySendRequest+0x88>)
    34b6:	4798      	blx	r3

	return true;
    34b8:	2001      	movs	r0, #1
    34ba:	e000      	b.n	34be <nwkRouteDiscoverySendRequest+0x7e>
{
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return false;
    34bc:	2000      	movs	r0, #0
	command->linkQuality = lq;

	nwkTxFrame(req);

	return true;
}
    34be:	bd70      	pop	{r4, r5, r6, pc}
    34c0:	00002ef5 	.word	0x00002ef5
    34c4:	00002fb9 	.word	0x00002fb9
    34c8:	00004011 	.word	0x00004011

000034cc <nwkRouteDiscoverySendReply>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    34cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34ce:	1c05      	adds	r5, r0, #0
    34d0:	1c0f      	adds	r7, r1, #0
    34d2:	1c16      	adds	r6, r2, #0
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    34d4:	4b1c      	ldr	r3, [pc, #112]	; (3548 <nwkRouteDiscoverySendReply+0x7c>)
    34d6:	4798      	blx	r3
    34d8:	1e04      	subs	r4, r0, #0
    34da:	d034      	beq.n	3546 <nwkRouteDiscoverySendReply+0x7a>
		return;
	}

	nwkFrameCommandInit(req);
    34dc:	4b1b      	ldr	r3, [pc, #108]	; (354c <nwkRouteDiscoverySendReply+0x80>)
    34de:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteReply_t);
    34e0:	7863      	ldrb	r3, [r4, #1]
    34e2:	3308      	adds	r3, #8
    34e4:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    34e6:	2200      	movs	r2, #0
    34e8:	2389      	movs	r3, #137	; 0x89
    34ea:	54e2      	strb	r2, [r4, r3]
    34ec:	238a      	movs	r3, #138	; 0x8a
    34ee:	54e2      	strb	r2, [r4, r3]
    34f0:	238b      	movs	r3, #139	; 0x8b
    34f2:	54e2      	strb	r2, [r4, r3]
    34f4:	238c      	movs	r3, #140	; 0x8c
    34f6:	54e2      	strb	r2, [r4, r3]
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    34f8:	2204      	movs	r2, #4
    34fa:	2388      	movs	r3, #136	; 0x88
    34fc:	54e2      	strb	r2, [r4, r3]

	req->header.nwkDstAddr = entry->senderAddr;
    34fe:	88eb      	ldrh	r3, [r5, #6]
    3500:	73e3      	strb	r3, [r4, #15]
    3502:	0a1b      	lsrs	r3, r3, #8
    3504:	7423      	strb	r3, [r4, #16]

	command = (NwkCommandRouteReply_t *)req->payload;
    3506:	2381      	movs	r3, #129	; 0x81
    3508:	5ce2      	ldrb	r2, [r4, r3]
    350a:	2382      	movs	r3, #130	; 0x82
    350c:	5ce3      	ldrb	r3, [r4, r3]
    350e:	021b      	lsls	r3, r3, #8
    3510:	4313      	orrs	r3, r2
    3512:	2283      	movs	r2, #131	; 0x83
    3514:	5ca2      	ldrb	r2, [r4, r2]
    3516:	0412      	lsls	r2, r2, #16
    3518:	4313      	orrs	r3, r2
    351a:	2284      	movs	r2, #132	; 0x84
    351c:	5ca2      	ldrb	r2, [r4, r2]
    351e:	0612      	lsls	r2, r2, #24
    3520:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REPLY;
    3522:	2203      	movs	r2, #3
    3524:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    3526:	8828      	ldrh	r0, [r5, #0]
    3528:	7058      	strb	r0, [r3, #1]
    352a:	0a00      	lsrs	r0, r0, #8
    352c:	7098      	strb	r0, [r3, #2]
	command->dstAddr = entry->dstAddr;
    352e:	886a      	ldrh	r2, [r5, #2]
    3530:	78a9      	ldrb	r1, [r5, #2]
    3532:	70d9      	strb	r1, [r3, #3]
    3534:	0a12      	lsrs	r2, r2, #8
    3536:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    3538:	792a      	ldrb	r2, [r5, #4]
    353a:	715a      	strb	r2, [r3, #5]
	command->forwardLinkQuality = flq;
    353c:	719f      	strb	r7, [r3, #6]
	command->reverseLinkQuality = rlq;
    353e:	71de      	strb	r6, [r3, #7]

	nwkTxFrame(req);
    3540:	1c20      	adds	r0, r4, #0
    3542:	4b03      	ldr	r3, [pc, #12]	; (3550 <nwkRouteDiscoverySendReply+0x84>)
    3544:	4798      	blx	r3
}
    3546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3548:	00002ef5 	.word	0x00002ef5
    354c:	00002fb9 	.word	0x00002fb9
    3550:	00004011 	.word	0x00004011

00003554 <nwkRouteDiscoveryInit>:
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		nwkRouteDiscoveryTable[i].timeout = 0;
    3554:	4b07      	ldr	r3, [pc, #28]	; (3574 <nwkRouteDiscoveryInit+0x20>)
    3556:	2200      	movs	r2, #0
    3558:	815a      	strh	r2, [r3, #10]
    355a:	82da      	strh	r2, [r3, #22]
    355c:	845a      	strh	r2, [r3, #34]	; 0x22
    355e:	85da      	strh	r2, [r3, #46]	; 0x2e
    3560:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    3562:	4b05      	ldr	r3, [pc, #20]	; (3578 <nwkRouteDiscoveryInit+0x24>)
    3564:	2264      	movs	r2, #100	; 0x64
    3566:	609a      	str	r2, [r3, #8]
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3568:	2200      	movs	r2, #0
    356a:	731a      	strb	r2, [r3, #12]
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    356c:	4a03      	ldr	r2, [pc, #12]	; (357c <nwkRouteDiscoveryInit+0x28>)
    356e:	611a      	str	r2, [r3, #16]
}
    3570:	4770      	bx	lr
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	20000b90 	.word	0x20000b90
    3578:	20000b7c 	.word	0x20000b7c
    357c:	00003381 	.word	0x00003381

00003580 <nwkRouteDiscoveryRequest>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    3580:	b510      	push	{r4, lr}
    3582:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    3584:	4b17      	ldr	r3, [pc, #92]	; (35e4 <nwkRouteDiscoveryRequest+0x64>)
    3586:	8818      	ldrh	r0, [r3, #0]
    3588:	7be2      	ldrb	r2, [r4, #15]
    358a:	7c21      	ldrb	r1, [r4, #16]
    358c:	0209      	lsls	r1, r1, #8
    358e:	4311      	orrs	r1, r2
			header->nwkFcf.multicast);
    3590:	7ae2      	ldrb	r2, [r4, #11]
    3592:	0712      	lsls	r2, r2, #28
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    3594:	0fd2      	lsrs	r2, r2, #31
    3596:	4b14      	ldr	r3, [pc, #80]	; (35e8 <nwkRouteDiscoveryRequest+0x68>)
    3598:	4798      	blx	r3
			header->nwkFcf.multicast);

	if (entry) {
    359a:	2800      	cmp	r0, #0
    359c:	d002      	beq.n	35a4 <nwkRouteDiscoveryRequest+0x24>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    359e:	2340      	movs	r3, #64	; 0x40
    35a0:	7023      	strb	r3, [r4, #0]
		return;
    35a2:	e01e      	b.n	35e2 <nwkRouteDiscoveryRequest+0x62>
	}

	entry = nwkRouteDiscoveryNewEntry();
    35a4:	4b11      	ldr	r3, [pc, #68]	; (35ec <nwkRouteDiscoveryRequest+0x6c>)
    35a6:	4798      	blx	r3

	if (entry) {
    35a8:	2800      	cmp	r0, #0
    35aa:	d016      	beq.n	35da <nwkRouteDiscoveryRequest+0x5a>
		entry->srcAddr = nwkIb.addr;
    35ac:	4b0d      	ldr	r3, [pc, #52]	; (35e4 <nwkRouteDiscoveryRequest+0x64>)
    35ae:	881b      	ldrh	r3, [r3, #0]
    35b0:	8003      	strh	r3, [r0, #0]
		entry->dstAddr = header->nwkDstAddr;
    35b2:	7be1      	ldrb	r1, [r4, #15]
    35b4:	7c22      	ldrb	r2, [r4, #16]
    35b6:	0212      	lsls	r2, r2, #8
    35b8:	430a      	orrs	r2, r1
    35ba:	8042      	strh	r2, [r0, #2]
		entry->multicast = header->nwkFcf.multicast;
    35bc:	7ae3      	ldrb	r3, [r4, #11]
    35be:	071b      	lsls	r3, r3, #28
    35c0:	0fdb      	lsrs	r3, r3, #31
    35c2:	7103      	strb	r3, [r0, #4]
		entry->senderAddr = NWK_BROADCAST_ADDR;
    35c4:	2301      	movs	r3, #1
    35c6:	425b      	negs	r3, r3
    35c8:	80c3      	strh	r3, [r0, #6]

		if (nwkRouteDiscoverySendRequest(entry,
    35ca:	21ff      	movs	r1, #255	; 0xff
    35cc:	4b08      	ldr	r3, [pc, #32]	; (35f0 <nwkRouteDiscoveryRequest+0x70>)
    35ce:	4798      	blx	r3
    35d0:	2800      	cmp	r0, #0
    35d2:	d002      	beq.n	35da <nwkRouteDiscoveryRequest+0x5a>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    35d4:	2340      	movs	r3, #64	; 0x40
    35d6:	7023      	strb	r3, [r4, #0]
			return;
    35d8:	e003      	b.n	35e2 <nwkRouteDiscoveryRequest+0x62>
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    35da:	1c20      	adds	r0, r4, #0
    35dc:	2111      	movs	r1, #17
    35de:	4b05      	ldr	r3, [pc, #20]	; (35f4 <nwkRouteDiscoveryRequest+0x74>)
    35e0:	4798      	blx	r3
}
    35e2:	bd10      	pop	{r4, pc}
    35e4:	20000ec8 	.word	0x20000ec8
    35e8:	000032f1 	.word	0x000032f1
    35ec:	0000332d 	.word	0x0000332d
    35f0:	00003441 	.word	0x00003441
    35f4:	00004199 	.word	0x00004199

000035f8 <nwkRouteDiscoveryRequestReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    35f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fa:	4647      	mov	r7, r8
    35fc:	b480      	push	{r7}
    35fe:	1c05      	adds	r5, r0, #0
	NwkCommandRouteRequest_t *command
    3600:	6884      	ldr	r4, [r0, #8]
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    3602:	7b03      	ldrb	r3, [r0, #12]
		return false;
    3604:	2000      	movs	r0, #0
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    3606:	2b07      	cmp	r3, #7
    3608:	d169      	bne.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
		reply = true;
	}

#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    360a:	7962      	ldrb	r2, [r4, #5]
    360c:	2a00      	cmp	r2, #0
    360e:	d15b      	bne.n	36c8 <nwkRouteDiscoveryRequestReceived+0xd0>
    3610:	4b34      	ldr	r3, [pc, #208]	; (36e4 <nwkRouteDiscoveryRequestReceived+0xec>)
    3612:	881b      	ldrh	r3, [r3, #0]
    3614:	78e0      	ldrb	r0, [r4, #3]
    3616:	7921      	ldrb	r1, [r4, #4]
    3618:	0209      	lsls	r1, r1, #8
    361a:	4301      	orrs	r1, r0
    361c:	1ac9      	subs	r1, r1, r3
    361e:	4248      	negs	r0, r1
    3620:	4141      	adcs	r1, r0
    3622:	b2c9      	uxtb	r1, r1
    3624:	4688      	mov	r8, r1
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    3626:	7861      	ldrb	r1, [r4, #1]
    3628:	78a0      	ldrb	r0, [r4, #2]
    362a:	0200      	lsls	r0, r0, #8
    362c:	4308      	orrs	r0, r1
    362e:	4283      	cmp	r3, r0
    3630:	d042      	beq.n	36b8 <nwkRouteDiscoveryRequestReceived+0xc0>
		return true;
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    3632:	4641      	mov	r1, r8
    3634:	2900      	cmp	r1, #0
    3636:	d102      	bne.n	363e <nwkRouteDiscoveryRequestReceived+0x46>
    3638:	b21b      	sxth	r3, r3
    363a:	2b00      	cmp	r3, #0
    363c:	db3e      	blt.n	36bc <nwkRouteDiscoveryRequestReceived+0xc4>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    363e:	79a3      	ldrb	r3, [r4, #6]
    3640:	7b6f      	ldrb	r7, [r5, #13]
    3642:	435f      	muls	r7, r3
    3644:	0a3f      	lsrs	r7, r7, #8
		return true;
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    3646:	78e3      	ldrb	r3, [r4, #3]
    3648:	7921      	ldrb	r1, [r4, #4]
    364a:	0209      	lsls	r1, r1, #8
    364c:	4319      	orrs	r1, r3
    364e:	4b26      	ldr	r3, [pc, #152]	; (36e8 <nwkRouteDiscoveryRequestReceived+0xf0>)
    3650:	4798      	blx	r3
    3652:	1e06      	subs	r6, r0, #0
			command->multicast);

	if (entry) {
    3654:	d004      	beq.n	3660 <nwkRouteDiscoveryRequestReceived+0x68>
		if (linkQuality <= entry->forwardLinkQuality) {
    3656:	7a03      	ldrb	r3, [r0, #8]
			return true;
    3658:	2001      	movs	r0, #1

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	if (entry) {
		if (linkQuality <= entry->forwardLinkQuality) {
    365a:	42bb      	cmp	r3, r7
    365c:	d304      	bcc.n	3668 <nwkRouteDiscoveryRequestReceived+0x70>
    365e:	e03e      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    3660:	4b22      	ldr	r3, [pc, #136]	; (36ec <nwkRouteDiscoveryRequestReceived+0xf4>)
    3662:	4798      	blx	r3
    3664:	1e06      	subs	r6, r0, #0
    3666:	d02b      	beq.n	36c0 <nwkRouteDiscoveryRequestReceived+0xc8>
			return true;
		}
	}

	entry->srcAddr = command->srcAddr;
    3668:	7862      	ldrb	r2, [r4, #1]
    366a:	78a3      	ldrb	r3, [r4, #2]
    366c:	021b      	lsls	r3, r3, #8
    366e:	4313      	orrs	r3, r2
    3670:	8033      	strh	r3, [r6, #0]
	entry->dstAddr = command->dstAddr;
    3672:	78e2      	ldrb	r2, [r4, #3]
    3674:	7923      	ldrb	r3, [r4, #4]
    3676:	021b      	lsls	r3, r3, #8
    3678:	4313      	orrs	r3, r2
    367a:	8073      	strh	r3, [r6, #2]
	entry->multicast = command->multicast;
    367c:	7963      	ldrb	r3, [r4, #5]
    367e:	7133      	strb	r3, [r6, #4]
	entry->senderAddr = ind->srcAddr;
    3680:	882b      	ldrh	r3, [r5, #0]
    3682:	80f3      	strh	r3, [r6, #6]
	entry->forwardLinkQuality = linkQuality;
    3684:	7237      	strb	r7, [r6, #8]

	if (reply) {
    3686:	4643      	mov	r3, r8
    3688:	2b00      	cmp	r3, #0
    368a:	d00f      	beq.n	36ac <nwkRouteDiscoveryRequestReceived+0xb4>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    368c:	7863      	ldrb	r3, [r4, #1]
    368e:	78a0      	ldrb	r0, [r4, #2]
    3690:	0200      	lsls	r0, r0, #8
    3692:	4318      	orrs	r0, r3
    3694:	882a      	ldrh	r2, [r5, #0]
    3696:	2100      	movs	r1, #0
    3698:	1c3b      	adds	r3, r7, #0
    369a:	4c15      	ldr	r4, [pc, #84]	; (36f0 <nwkRouteDiscoveryRequestReceived+0xf8>)
    369c:	47a0      	blx	r4
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    369e:	1c30      	adds	r0, r6, #0
    36a0:	1c39      	adds	r1, r7, #0
    36a2:	22ff      	movs	r2, #255	; 0xff
    36a4:	4b13      	ldr	r3, [pc, #76]	; (36f4 <nwkRouteDiscoveryRequestReceived+0xfc>)
    36a6:	4798      	blx	r3
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
    36a8:	2001      	movs	r0, #1
    36aa:	e018      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    36ac:	1c30      	adds	r0, r6, #0
    36ae:	1c39      	adds	r1, r7, #0
    36b0:	4b11      	ldr	r3, [pc, #68]	; (36f8 <nwkRouteDiscoveryRequestReceived+0x100>)
    36b2:	4798      	blx	r3
	}

	return true;
    36b4:	2001      	movs	r0, #1
    36b6:	e012      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    36b8:	2001      	movs	r0, #1
    36ba:	e010      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
		return true;
    36bc:	2001      	movs	r0, #1
    36be:	e00e      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
		if (linkQuality <= entry->forwardLinkQuality) {
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
			return true;
    36c0:	2001      	movs	r0, #1
    36c2:	e00c      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    36c4:	2001      	movs	r0, #1
    36c6:	e00a      	b.n	36de <nwkRouteDiscoveryRequestReceived+0xe6>

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    36c8:	7863      	ldrb	r3, [r4, #1]
    36ca:	78a0      	ldrb	r0, [r4, #2]
    36cc:	0200      	lsls	r0, r0, #8
    36ce:	4318      	orrs	r0, r3
    36d0:	4b04      	ldr	r3, [pc, #16]	; (36e4 <nwkRouteDiscoveryRequestReceived+0xec>)
    36d2:	881b      	ldrh	r3, [r3, #0]
    36d4:	4298      	cmp	r0, r3
    36d6:	d0f5      	beq.n	36c4 <nwkRouteDiscoveryRequestReceived+0xcc>
{
	NwkCommandRouteRequest_t *command
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    36d8:	2100      	movs	r1, #0
    36da:	4688      	mov	r8, r1
    36dc:	e7ac      	b.n	3638 <nwkRouteDiscoveryRequestReceived+0x40>
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
}
    36de:	bc04      	pop	{r2}
    36e0:	4690      	mov	r8, r2
    36e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36e4:	20000ec8 	.word	0x20000ec8
    36e8:	000032f1 	.word	0x000032f1
    36ec:	0000332d 	.word	0x0000332d
    36f0:	000030b5 	.word	0x000030b5
    36f4:	000034cd 	.word	0x000034cd
    36f8:	00003441 	.word	0x00003441

000036fc <nwkRouteDiscoveryReplyReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    36fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36fe:	1c05      	adds	r5, r0, #0
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    3700:	6884      	ldr	r4, [r0, #8]
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    3702:	7b03      	ldrb	r3, [r0, #12]
		return false;
    3704:	2000      	movs	r0, #0
{
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    3706:	2b08      	cmp	r3, #8
    3708:	d143      	bne.n	3792 <nwkRouteDiscoveryReplyReceived+0x96>
		return false;
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    370a:	7863      	ldrb	r3, [r4, #1]
    370c:	78a0      	ldrb	r0, [r4, #2]
    370e:	0200      	lsls	r0, r0, #8
    3710:	4318      	orrs	r0, r3
    3712:	78e3      	ldrb	r3, [r4, #3]
    3714:	7921      	ldrb	r1, [r4, #4]
    3716:	0209      	lsls	r1, r1, #8
    3718:	4319      	orrs	r1, r3
    371a:	7962      	ldrb	r2, [r4, #5]
    371c:	4b1d      	ldr	r3, [pc, #116]	; (3794 <nwkRouteDiscoveryReplyReceived+0x98>)
    371e:	4798      	blx	r3
    3720:	1c06      	adds	r6, r0, #0
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    3722:	79e3      	ldrb	r3, [r4, #7]
    3724:	7b6a      	ldrb	r2, [r5, #13]
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    3726:	2800      	cmp	r0, #0
    3728:	d032      	beq.n	3790 <nwkRouteDiscoveryReplyReceived+0x94>
    372a:	79a1      	ldrb	r1, [r4, #6]
    372c:	7a47      	ldrb	r7, [r0, #9]
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    372e:	2001      	movs	r0, #1
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    3730:	428f      	cmp	r7, r1
    3732:	d22e      	bcs.n	3792 <nwkRouteDiscoveryReplyReceived+0x96>
		entry->reverseLinkQuality = command->forwardLinkQuality;
    3734:	7271      	strb	r1, [r6, #9]

		if (command->srcAddr == nwkIb.addr) {
    3736:	7867      	ldrb	r7, [r4, #1]
    3738:	78a1      	ldrb	r1, [r4, #2]
    373a:	0209      	lsls	r1, r1, #8
    373c:	4816      	ldr	r0, [pc, #88]	; (3798 <nwkRouteDiscoveryReplyReceived+0x9c>)
    373e:	8800      	ldrh	r0, [r0, #0]
    3740:	4339      	orrs	r1, r7
    3742:	4288      	cmp	r0, r1
    3744:	d10a      	bne.n	375c <nwkRouteDiscoveryReplyReceived+0x60>
			nwkRouteUpdateEntry(command->dstAddr,
    3746:	78e3      	ldrb	r3, [r4, #3]
    3748:	7920      	ldrb	r0, [r4, #4]
    374a:	0200      	lsls	r0, r0, #8
    374c:	4318      	orrs	r0, r3
    374e:	7961      	ldrb	r1, [r4, #5]
    3750:	882a      	ldrh	r2, [r5, #0]
    3752:	79a3      	ldrb	r3, [r4, #6]
    3754:	4c11      	ldr	r4, [pc, #68]	; (379c <nwkRouteDiscoveryReplyReceived+0xa0>)
    3756:	47a0      	blx	r4
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    3758:	2001      	movs	r0, #1
    375a:	e01a      	b.n	3792 <nwkRouteDiscoveryReplyReceived+0x96>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    375c:	4353      	muls	r3, r2
    375e:	0a1f      	lsrs	r7, r3, #8
			nwkRouteUpdateEntry(command->dstAddr,
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    3760:	78e3      	ldrb	r3, [r4, #3]
    3762:	7920      	ldrb	r0, [r4, #4]
    3764:	0200      	lsls	r0, r0, #8
    3766:	4318      	orrs	r0, r3
    3768:	7961      	ldrb	r1, [r4, #5]
    376a:	882a      	ldrh	r2, [r5, #0]
    376c:	1c3b      	adds	r3, r7, #0
    376e:	4d0b      	ldr	r5, [pc, #44]	; (379c <nwkRouteDiscoveryReplyReceived+0xa0>)
    3770:	47a8      	blx	r5
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    3772:	7863      	ldrb	r3, [r4, #1]
    3774:	78a0      	ldrb	r0, [r4, #2]
    3776:	0200      	lsls	r0, r0, #8
    3778:	4318      	orrs	r0, r3
    377a:	88f2      	ldrh	r2, [r6, #6]
    377c:	7a33      	ldrb	r3, [r6, #8]
    377e:	2100      	movs	r1, #0
    3780:	47a8      	blx	r5
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    3782:	79a1      	ldrb	r1, [r4, #6]
    3784:	1c30      	adds	r0, r6, #0
    3786:	1c3a      	adds	r2, r7, #0
    3788:	4b05      	ldr	r3, [pc, #20]	; (37a0 <nwkRouteDiscoveryReplyReceived+0xa4>)
    378a:	4798      	blx	r3
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    378c:	2001      	movs	r0, #1
    378e:	e000      	b.n	3792 <nwkRouteDiscoveryReplyReceived+0x96>
    3790:	2001      	movs	r0, #1
}
    3792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3794:	000032f1 	.word	0x000032f1
    3798:	20000ec8 	.word	0x20000ec8
    379c:	000030b5 	.word	0x000030b5
    37a0:	000034cd 	.word	0x000034cd

000037a4 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    37a4:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    37a6:	7b02      	ldrb	r2, [r0, #12]
		return false;
    37a8:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    37aa:	2a00      	cmp	r2, #0
    37ac:	d01b      	beq.n	37e6 <nwkRxSeriveDataInd+0x42>
		return false;
	}

	switch (ind->data[0]) {
    37ae:	6882      	ldr	r2, [r0, #8]
    37b0:	7813      	ldrb	r3, [r2, #0]
    37b2:	2b01      	cmp	r3, #1
    37b4:	d00a      	beq.n	37cc <nwkRxSeriveDataInd+0x28>
    37b6:	2b00      	cmp	r3, #0
    37b8:	d004      	beq.n	37c4 <nwkRxSeriveDataInd+0x20>
    37ba:	2b02      	cmp	r3, #2
    37bc:	d00a      	beq.n	37d4 <nwkRxSeriveDataInd+0x30>
    37be:	2b03      	cmp	r3, #3
    37c0:	d00c      	beq.n	37dc <nwkRxSeriveDataInd+0x38>
    37c2:	e00f      	b.n	37e4 <nwkRxSeriveDataInd+0x40>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    37c4:	4b09      	ldr	r3, [pc, #36]	; (37ec <nwkRxSeriveDataInd+0x48>)
    37c6:	4798      	blx	r3
    37c8:	1c03      	adds	r3, r0, #0
    37ca:	e00c      	b.n	37e6 <nwkRxSeriveDataInd+0x42>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    37cc:	4b08      	ldr	r3, [pc, #32]	; (37f0 <nwkRxSeriveDataInd+0x4c>)
    37ce:	4798      	blx	r3
    37d0:	1c03      	adds	r3, r0, #0
    37d2:	e008      	b.n	37e6 <nwkRxSeriveDataInd+0x42>

#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	case NWK_COMMAND_ROUTE_REQUEST:
		return nwkRouteDiscoveryRequestReceived(ind);
    37d4:	4b07      	ldr	r3, [pc, #28]	; (37f4 <nwkRxSeriveDataInd+0x50>)
    37d6:	4798      	blx	r3
    37d8:	1c03      	adds	r3, r0, #0
    37da:	e004      	b.n	37e6 <nwkRxSeriveDataInd+0x42>

	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
    37dc:	4b06      	ldr	r3, [pc, #24]	; (37f8 <nwkRxSeriveDataInd+0x54>)
    37de:	4798      	blx	r3
    37e0:	1c03      	adds	r3, r0, #0
    37e2:	e000      	b.n	37e6 <nwkRxSeriveDataInd+0x42>

#endif

	default:
		return false;
    37e4:	2300      	movs	r3, #0
	}
}
    37e6:	1c18      	adds	r0, r3, #0
    37e8:	bd08      	pop	{r3, pc}
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	0000415d 	.word	0x0000415d
    37f0:	000032cd 	.word	0x000032cd
    37f4:	000035f9 	.word	0x000035f9
    37f8:	000036fd 	.word	0x000036fd

000037fc <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    37fc:	b538      	push	{r3, r4, r5, lr}
    37fe:	490a      	ldr	r1, [pc, #40]	; (3828 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    3800:	1d0b      	adds	r3, r1, #4
    3802:	3131      	adds	r1, #49	; 0x31
    3804:	31ff      	adds	r1, #255	; 0xff
	bool restart = false;
    3806:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    3808:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    380a:	781a      	ldrb	r2, [r3, #0]
    380c:	2a00      	cmp	r2, #0
    380e:	d002      	beq.n	3816 <nwkRxDuplicateRejectionTimerHandler+0x1a>
			nwkRxDuplicateRejectionTable[i].ttl--;
    3810:	3a01      	subs	r2, #1
    3812:	701a      	strb	r2, [r3, #0]
			restart = true;
    3814:	1c2c      	adds	r4, r5, #0
    3816:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    3818:	428b      	cmp	r3, r1
    381a:	d1f6      	bne.n	380a <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    381c:	2c00      	cmp	r4, #0
    381e:	d001      	beq.n	3824 <nwkRxDuplicateRejectionTimerHandler+0x28>
		SYS_TimerStart(timer);
    3820:	4b02      	ldr	r3, [pc, #8]	; (382c <nwkRxDuplicateRejectionTimerHandler+0x30>)
    3822:	4798      	blx	r3
	}
}
    3824:	bd38      	pop	{r3, r4, r5, pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	20000bcc 	.word	0x20000bcc
    382c:	0000473d 	.word	0x0000473d

00003830 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    3830:	b508      	push	{r3, lr}
    3832:	490a      	ldr	r1, [pc, #40]	; (385c <nwkRxInit+0x2c>)
    3834:	1d0b      	adds	r3, r1, #4
    3836:	3131      	adds	r1, #49	; 0x31
    3838:	31ff      	adds	r1, #255	; 0xff
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    383a:	2200      	movs	r2, #0
    383c:	701a      	strb	r2, [r3, #0]
    383e:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    3840:	428b      	cmp	r3, r1
    3842:	d1fb      	bne.n	383c <nwkRxInit+0xc>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    3844:	4b06      	ldr	r3, [pc, #24]	; (3860 <nwkRxInit+0x30>)
    3846:	2264      	movs	r2, #100	; 0x64
    3848:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    384a:	2200      	movs	r2, #0
    384c:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    384e:	4a05      	ldr	r2, [pc, #20]	; (3864 <nwkRxInit+0x34>)
    3850:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    3852:	2000      	movs	r0, #0
    3854:	4904      	ldr	r1, [pc, #16]	; (3868 <nwkRxInit+0x38>)
    3856:	4b05      	ldr	r3, [pc, #20]	; (386c <nwkRxInit+0x3c>)
    3858:	4798      	blx	r3
}
    385a:	bd08      	pop	{r3, pc}
    385c:	20000bcc 	.word	0x20000bcc
    3860:	20000cfc 	.word	0x20000cfc
    3864:	000037fd 	.word	0x000037fd
    3868:	000037a5 	.word	0x000037a5
    386c:	00002cc1 	.word	0x00002cc1

00003870 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    3870:	b510      	push	{r4, lr}
    3872:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    3874:	6803      	ldr	r3, [r0, #0]
    3876:	785a      	ldrb	r2, [r3, #1]
    3878:	2a88      	cmp	r2, #136	; 0x88
    387a:	d11a      	bne.n	38b2 <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    387c:	781b      	ldrb	r3, [r3, #0]
    387e:	2220      	movs	r2, #32
    3880:	4393      	bics	r3, r2
    3882:	2b41      	cmp	r3, #65	; 0x41
    3884:	d115      	bne.n	38b2 <PHY_DataInd+0x42>
    3886:	7903      	ldrb	r3, [r0, #4]
    3888:	2b0f      	cmp	r3, #15
    388a:	d912      	bls.n	38b2 <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    388c:	4b09      	ldr	r3, [pc, #36]	; (38b4 <PHY_DataInd+0x44>)
    388e:	4798      	blx	r3
    3890:	2800      	cmp	r0, #0
    3892:	d00e      	beq.n	38b2 <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    3894:	2320      	movs	r3, #32
    3896:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    3898:	7923      	ldrb	r3, [r4, #4]
    389a:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    389c:	7962      	ldrb	r2, [r4, #5]
    389e:	2385      	movs	r3, #133	; 0x85
    38a0:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    38a2:	79a2      	ldrb	r2, [r4, #6]
    38a4:	2386      	movs	r3, #134	; 0x86
    38a6:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    38a8:	3002      	adds	r0, #2
    38aa:	7922      	ldrb	r2, [r4, #4]
    38ac:	6821      	ldr	r1, [r4, #0]
    38ae:	4b02      	ldr	r3, [pc, #8]	; (38b8 <PHY_DataInd+0x48>)
    38b0:	4798      	blx	r3
}
    38b2:	bd10      	pop	{r4, pc}
    38b4:	00002ef5 	.word	0x00002ef5
    38b8:	00005881 	.word	0x00005881

000038bc <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
    38bc:	4b01      	ldr	r3, [pc, #4]	; (38c4 <NWK_SetAckControl+0x8>)
    38be:	7018      	strb	r0, [r3, #0]
}
    38c0:	4770      	bx	lr
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	20000cf8 	.word	0x20000cf8

000038c8 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    38c8:	2900      	cmp	r1, #0
    38ca:	d002      	beq.n	38d2 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    38cc:	2322      	movs	r3, #34	; 0x22
    38ce:	7003      	strb	r3, [r0, #0]
    38d0:	e001      	b.n	38d6 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    38d2:	2324      	movs	r3, #36	; 0x24
    38d4:	7003      	strb	r3, [r0, #0]
	}
}
    38d6:	4770      	bx	lr

000038d8 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    38d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38da:	4657      	mov	r7, sl
    38dc:	464e      	mov	r6, r9
    38de:	4645      	mov	r5, r8
    38e0:	b4e0      	push	{r5, r6, r7}
    38e2:	b084      	sub	sp, #16
	NwkFrame_t *frame = NULL;
    38e4:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    38e6:	4dd5      	ldr	r5, [pc, #852]	; (3c3c <nwkRxTaskHandler+0x364>)
    38e8:	4ed5      	ldr	r6, [pc, #852]	; (3c40 <nwkRxTaskHandler+0x368>)
    38ea:	362d      	adds	r6, #45	; 0x2d
    38ec:	36ff      	adds	r6, #255	; 0xff
    38ee:	e19f      	b.n	3c30 <nwkRxTaskHandler+0x358>
		switch (frame->state) {
    38f0:	7823      	ldrb	r3, [r4, #0]
    38f2:	3b20      	subs	r3, #32
    38f4:	b2da      	uxtb	r2, r3
    38f6:	2a04      	cmp	r2, #4
    38f8:	d900      	bls.n	38fc <nwkRxTaskHandler+0x24>
    38fa:	e199      	b.n	3c30 <nwkRxTaskHandler+0x358>
    38fc:	0093      	lsls	r3, r2, #2
    38fe:	4ad1      	ldr	r2, [pc, #836]	; (3c44 <nwkRxTaskHandler+0x36c>)
    3900:	58d3      	ldr	r3, [r2, r3]
    3902:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    3904:	2324      	movs	r3, #36	; 0x24
    3906:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    3908:	7ae3      	ldrb	r3, [r4, #11]
    390a:	0718      	lsls	r0, r3, #28
    390c:	d500      	bpl.n	3910 <nwkRxTaskHandler+0x38>
    390e:	e18f      	b.n	3c30 <nwkRxTaskHandler+0x358>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    3910:	7961      	ldrb	r1, [r4, #5]
    3912:	79a2      	ldrb	r2, [r4, #6]
    3914:	0212      	lsls	r2, r2, #8
    3916:	430a      	orrs	r2, r1
    3918:	4bcb      	ldr	r3, [pc, #812]	; (3c48 <nwkRxTaskHandler+0x370>)
    391a:	429a      	cmp	r2, r3
    391c:	d114      	bne.n	3948 <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    391e:	7be2      	ldrb	r2, [r4, #15]
    3920:	7c23      	ldrb	r3, [r4, #16]
    3922:	021b      	lsls	r3, r3, #8
    3924:	4313      	orrs	r3, r2
    3926:	4ac9      	ldr	r2, [pc, #804]	; (3c4c <nwkRxTaskHandler+0x374>)
    3928:	8812      	ldrh	r2, [r2, #0]
    392a:	429a      	cmp	r2, r3
    392c:	d003      	beq.n	3936 <nwkRxTaskHandler+0x5e>
    392e:	4ac6      	ldr	r2, [pc, #792]	; (3c48 <nwkRxTaskHandler+0x370>)
    3930:	4293      	cmp	r3, r2
    3932:	d000      	beq.n	3936 <nwkRxTaskHandler+0x5e>
    3934:	e17c      	b.n	3c30 <nwkRxTaskHandler+0x358>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    3936:	7ae3      	ldrb	r3, [r4, #11]
    3938:	0799      	lsls	r1, r3, #30
    393a:	d502      	bpl.n	3942 <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    393c:	2321      	movs	r3, #33	; 0x21
    393e:	7023      	strb	r3, [r4, #0]
    3940:	e176      	b.n	3c30 <nwkRxTaskHandler+0x358>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    3942:	2322      	movs	r3, #34	; 0x22
    3944:	7023      	strb	r3, [r4, #0]
    3946:	e173      	b.n	3c30 <nwkRxTaskHandler+0x358>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    3948:	7be1      	ldrb	r1, [r4, #15]
    394a:	7c22      	ldrb	r2, [r4, #16]
    394c:	0212      	lsls	r2, r2, #8
    394e:	430a      	orrs	r2, r1
    3950:	4bbd      	ldr	r3, [pc, #756]	; (3c48 <nwkRxTaskHandler+0x370>)
    3952:	429a      	cmp	r2, r3
    3954:	d103      	bne.n	395e <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    3956:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    3958:	07da      	lsls	r2, r3, #31
    395a:	d500      	bpl.n	395e <nwkRxTaskHandler+0x86>
    395c:	e168      	b.n	3c30 <nwkRxTaskHandler+0x358>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    395e:	7b61      	ldrb	r1, [r4, #13]
    3960:	7ba3      	ldrb	r3, [r4, #14]
    3962:	021b      	lsls	r3, r3, #8
    3964:	4ab9      	ldr	r2, [pc, #740]	; (3c4c <nwkRxTaskHandler+0x374>)
    3966:	8812      	ldrh	r2, [r2, #0]
    3968:	430b      	orrs	r3, r1
    396a:	429a      	cmp	r2, r3
    396c:	d100      	bne.n	3970 <nwkRxTaskHandler+0x98>
    396e:	e15f      	b.n	3c30 <nwkRxTaskHandler+0x358>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    3970:	1c20      	adds	r0, r4, #0
    3972:	4bb7      	ldr	r3, [pc, #732]	; (3c50 <nwkRxTaskHandler+0x378>)
    3974:	4798      	blx	r3
    3976:	4bb2      	ldr	r3, [pc, #712]	; (3c40 <nwkRxTaskHandler+0x368>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    3978:	2700      	movs	r7, #0
    397a:	46b8      	mov	r8, r7

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    397c:	1ca0      	adds	r0, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    397e:	1c19      	adds	r1, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    3980:	791a      	ldrb	r2, [r3, #4]
    3982:	2a00      	cmp	r2, #0
    3984:	d037      	beq.n	39f6 <nwkRxTaskHandler+0x11e>
    3986:	7ac2      	ldrb	r2, [r0, #11]
    3988:	7b07      	ldrb	r7, [r0, #12]
    398a:	023f      	lsls	r7, r7, #8
    398c:	46bc      	mov	ip, r7
    398e:	881f      	ldrh	r7, [r3, #0]
    3990:	46ba      	mov	sl, r7
    3992:	4667      	mov	r7, ip
    3994:	433a      	orrs	r2, r7
    3996:	4592      	cmp	sl, r2
    3998:	d12e      	bne.n	39f8 <nwkRxTaskHandler+0x120>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    399a:	7b22      	ldrb	r2, [r4, #12]
    399c:	789b      	ldrb	r3, [r3, #2]
    399e:	1a9b      	subs	r3, r3, r2
    39a0:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    39a2:	2b07      	cmp	r3, #7
    39a4:	d81c      	bhi.n	39e0 <nwkRxTaskHandler+0x108>
				if (entry->mask & (1 << diff)) {
    39a6:	78ca      	ldrb	r2, [r1, #3]
    39a8:	1c10      	adds	r0, r2, #0
    39aa:	4118      	asrs	r0, r3
    39ac:	07c7      	lsls	r7, r0, #31
    39ae:	d512      	bpl.n	39d6 <nwkRxTaskHandler+0xfe>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    39b0:	79e1      	ldrb	r1, [r4, #7]
    39b2:	7a23      	ldrb	r3, [r4, #8]
    39b4:	021b      	lsls	r3, r3, #8
    39b6:	4aa5      	ldr	r2, [pc, #660]	; (3c4c <nwkRxTaskHandler+0x374>)
    39b8:	8812      	ldrh	r2, [r2, #0]
    39ba:	430b      	orrs	r3, r1
    39bc:	429a      	cmp	r2, r3
    39be:	d000      	beq.n	39c2 <nwkRxTaskHandler+0xea>
    39c0:	e136      	b.n	3c30 <nwkRxTaskHandler+0x358>
						nwkRouteRemove(
    39c2:	7be2      	ldrb	r2, [r4, #15]
    39c4:	7c20      	ldrb	r0, [r4, #16]
    39c6:	0200      	lsls	r0, r0, #8
    39c8:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    39ca:	7ae1      	ldrb	r1, [r4, #11]
    39cc:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    39ce:	0fc9      	lsrs	r1, r1, #31
    39d0:	4ba0      	ldr	r3, [pc, #640]	; (3c54 <nwkRxTaskHandler+0x37c>)
    39d2:	4798      	blx	r3
    39d4:	e12c      	b.n	3c30 <nwkRxTaskHandler+0x358>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    39d6:	2001      	movs	r0, #1
    39d8:	4098      	lsls	r0, r3
    39da:	4302      	orrs	r2, r0
    39dc:	70ca      	strb	r2, [r1, #3]
    39de:	e151      	b.n	3c84 <nwkRxTaskHandler+0x3ac>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    39e0:	708a      	strb	r2, [r1, #2]
				entry->mask = (entry->mask << shift) | 1;
    39e2:	78ca      	ldrb	r2, [r1, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    39e4:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    39e6:	b2db      	uxtb	r3, r3
    39e8:	409a      	lsls	r2, r3
    39ea:	2301      	movs	r3, #1
    39ec:	4313      	orrs	r3, r2
    39ee:	70cb      	strb	r3, [r1, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    39f0:	2315      	movs	r3, #21
    39f2:	710b      	strb	r3, [r1, #4]
    39f4:	e146      	b.n	3c84 <nwkRxTaskHandler+0x3ac>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    39f6:	4698      	mov	r8, r3
    39f8:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    39fa:	42b3      	cmp	r3, r6
    39fc:	d1bf      	bne.n	397e <nwkRxTaskHandler+0xa6>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    39fe:	4640      	mov	r0, r8
    3a00:	2800      	cmp	r0, #0
    3a02:	d100      	bne.n	3a06 <nwkRxTaskHandler+0x12e>
    3a04:	e114      	b.n	3c30 <nwkRxTaskHandler+0x358>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    3a06:	7b61      	ldrb	r1, [r4, #13]
    3a08:	7ba2      	ldrb	r2, [r4, #14]
    3a0a:	0212      	lsls	r2, r2, #8
    3a0c:	430a      	orrs	r2, r1
    3a0e:	8002      	strh	r2, [r0, #0]
	freeEntry->seq = header->nwkSeq;
    3a10:	7b23      	ldrb	r3, [r4, #12]
    3a12:	7083      	strb	r3, [r0, #2]
	freeEntry->mask = 1;
    3a14:	2301      	movs	r3, #1
    3a16:	70c3      	strb	r3, [r0, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    3a18:	2315      	movs	r3, #21
    3a1a:	7103      	strb	r3, [r0, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    3a1c:	488e      	ldr	r0, [pc, #568]	; (3c58 <nwkRxTaskHandler+0x380>)
    3a1e:	4b8f      	ldr	r3, [pc, #572]	; (3c5c <nwkRxTaskHandler+0x384>)
    3a20:	4798      	blx	r3
    3a22:	e12f      	b.n	3c84 <nwkRxTaskHandler+0x3ac>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3a24:	4b89      	ldr	r3, [pc, #548]	; (3c4c <nwkRxTaskHandler+0x374>)
    3a26:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    3a28:	7be0      	ldrb	r0, [r4, #15]
    3a2a:	7c23      	ldrb	r3, [r4, #16]
    3a2c:	021b      	lsls	r3, r3, #8
    3a2e:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3a30:	429a      	cmp	r2, r3
    3a32:	d010      	beq.n	3a56 <nwkRxTaskHandler+0x17e>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    3a34:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    3a36:	074f      	lsls	r7, r1, #29
    3a38:	d40a      	bmi.n	3a50 <nwkRxTaskHandler+0x178>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    3a3a:	1c20      	adds	r0, r4, #0
    3a3c:	4b88      	ldr	r3, [pc, #544]	; (3c60 <nwkRxTaskHandler+0x388>)
    3a3e:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    3a40:	4b82      	ldr	r3, [pc, #520]	; (3c4c <nwkRxTaskHandler+0x374>)
    3a42:	881a      	ldrh	r2, [r3, #0]
    3a44:	7be0      	ldrb	r0, [r4, #15]
    3a46:	7c23      	ldrb	r3, [r4, #16]
    3a48:	021b      	lsls	r3, r3, #8
    3a4a:	4303      	orrs	r3, r0
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d002      	beq.n	3a56 <nwkRxTaskHandler+0x17e>
    3a50:	497d      	ldr	r1, [pc, #500]	; (3c48 <nwkRxTaskHandler+0x370>)
    3a52:	428b      	cmp	r3, r1
    3a54:	d108      	bne.n	3a68 <nwkRxTaskHandler+0x190>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    3a56:	7ae3      	ldrb	r3, [r4, #11]
    3a58:	0798      	lsls	r0, r3, #30
    3a5a:	d502      	bpl.n	3a62 <nwkRxTaskHandler+0x18a>
				frame->state = NWK_RX_STATE_DECRYPT;
    3a5c:	2321      	movs	r3, #33	; 0x21
    3a5e:	7023      	strb	r3, [r4, #0]
    3a60:	e0e6      	b.n	3c30 <nwkRxTaskHandler+0x358>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    3a62:	2322      	movs	r3, #34	; 0x22
    3a64:	7023      	strb	r3, [r4, #0]
    3a66:	e0e3      	b.n	3c30 <nwkRxTaskHandler+0x358>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    3a68:	79e1      	ldrb	r1, [r4, #7]
    3a6a:	7a23      	ldrb	r3, [r4, #8]
    3a6c:	021b      	lsls	r3, r3, #8
    3a6e:	430b      	orrs	r3, r1
    3a70:	429a      	cmp	r2, r3
    3a72:	d000      	beq.n	3a76 <nwkRxTaskHandler+0x19e>
    3a74:	e0dc      	b.n	3c30 <nwkRxTaskHandler+0x358>
			frame->state = NWK_RX_STATE_ROUTE;
    3a76:	2323      	movs	r3, #35	; 0x23
    3a78:	7023      	strb	r3, [r4, #0]
    3a7a:	e0d9      	b.n	3c30 <nwkRxTaskHandler+0x358>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    3a7c:	1c20      	adds	r0, r4, #0
    3a7e:	2100      	movs	r1, #0
    3a80:	4b78      	ldr	r3, [pc, #480]	; (3c64 <nwkRxTaskHandler+0x38c>)
    3a82:	4798      	blx	r3
		}
		break;
    3a84:	e0d4      	b.n	3c30 <nwkRxTaskHandler+0x358>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    3a86:	2200      	movs	r2, #0
    3a88:	4b77      	ldr	r3, [pc, #476]	; (3c68 <nwkRxTaskHandler+0x390>)
    3a8a:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    3a8c:	7c61      	ldrb	r1, [r4, #17]
    3a8e:	0909      	lsrs	r1, r1, #4
    3a90:	b2ca      	uxtb	r2, r1
    3a92:	3202      	adds	r2, #2
    3a94:	0092      	lsls	r2, r2, #2
    3a96:	4b6d      	ldr	r3, [pc, #436]	; (3c4c <nwkRxTaskHandler+0x374>)
    3a98:	58d2      	ldr	r2, [r2, r3]
    3a9a:	2a00      	cmp	r2, #0
    3a9c:	d062      	beq.n	3b64 <nwkRxTaskHandler+0x28c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    3a9e:	1ca3      	adds	r3, r4, #2
    3aa0:	7b67      	ldrb	r7, [r4, #13]
    3aa2:	7ba0      	ldrb	r0, [r4, #14]
    3aa4:	0200      	lsls	r0, r0, #8
    3aa6:	4338      	orrs	r0, r7
    3aa8:	4680      	mov	r8, r0
    3aaa:	466f      	mov	r7, sp
    3aac:	8038      	strh	r0, [r7, #0]
	ind.dstAddr = header->nwkDstAddr;
    3aae:	7be7      	ldrb	r7, [r4, #15]
    3ab0:	7c20      	ldrb	r0, [r4, #16]
    3ab2:	0200      	lsls	r0, r0, #8
    3ab4:	4307      	orrs	r7, r0
    3ab6:	46b9      	mov	r9, r7
    3ab8:	1c38      	adds	r0, r7, #0
    3aba:	466f      	mov	r7, sp
    3abc:	8078      	strh	r0, [r7, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    3abe:	7c67      	ldrb	r7, [r4, #17]
    3ac0:	073f      	lsls	r7, r7, #28
    3ac2:	0f3f      	lsrs	r7, r7, #28
    3ac4:	4668      	mov	r0, sp
    3ac6:	7107      	strb	r7, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    3ac8:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    3aca:	2181      	movs	r1, #129	; 0x81
    3acc:	5c61      	ldrb	r1, [r4, r1]
    3ace:	2082      	movs	r0, #130	; 0x82
    3ad0:	5c27      	ldrb	r7, [r4, r0]
    3ad2:	023f      	lsls	r7, r7, #8
    3ad4:	4339      	orrs	r1, r7
    3ad6:	2083      	movs	r0, #131	; 0x83
    3ad8:	5c27      	ldrb	r7, [r4, r0]
    3ada:	043f      	lsls	r7, r7, #16
    3adc:	4339      	orrs	r1, r7
    3ade:	2084      	movs	r0, #132	; 0x84
    3ae0:	5c27      	ldrb	r7, [r4, r0]
    3ae2:	063f      	lsls	r7, r7, #24
    3ae4:	4339      	orrs	r1, r7
    3ae6:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    3ae8:	1a59      	subs	r1, r3, r1
    3aea:	468c      	mov	ip, r1
    3aec:	7861      	ldrb	r1, [r4, #1]
    3aee:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    3af0:	4668      	mov	r0, sp
    3af2:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    3af4:	2185      	movs	r1, #133	; 0x85
    3af6:	5c61      	ldrb	r1, [r4, r1]
    3af8:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    3afa:	2186      	movs	r1, #134	; 0x86
    3afc:	5c61      	ldrb	r1, [r4, r1]
    3afe:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    3b00:	7ae3      	ldrb	r3, [r4, #11]
    3b02:	07d9      	lsls	r1, r3, #31
    3b04:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    3b06:	2702      	movs	r7, #2
    3b08:	403b      	ands	r3, r7
    3b0a:	430b      	orrs	r3, r1
    3b0c:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    3b0e:	7ae1      	ldrb	r1, [r4, #11]
    3b10:	0749      	lsls	r1, r1, #29
    3b12:	0fc9      	lsrs	r1, r1, #31
    3b14:	0149      	lsls	r1, r1, #5
    3b16:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    3b18:	7ae1      	ldrb	r1, [r4, #11]
    3b1a:	0709      	lsls	r1, r1, #28
    3b1c:	0fc9      	lsrs	r1, r1, #31
    3b1e:	0189      	lsls	r1, r1, #6
    3b20:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    3b22:	4952      	ldr	r1, [pc, #328]	; (3c6c <nwkRxTaskHandler+0x394>)
    3b24:	1c0f      	adds	r7, r1, #0
    3b26:	444f      	add	r7, r9
    3b28:	4279      	negs	r1, r7
    3b2a:	414f      	adcs	r7, r1
    3b2c:	00bf      	lsls	r7, r7, #2
    3b2e:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    3b30:	7a67      	ldrb	r7, [r4, #9]
    3b32:	7aa1      	ldrb	r1, [r4, #10]
    3b34:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    3b36:	4339      	orrs	r1, r7
    3b38:	4647      	mov	r7, r8
    3b3a:	1a78      	subs	r0, r7, r1
    3b3c:	4241      	negs	r1, r0
    3b3e:	4148      	adcs	r0, r1
    3b40:	00c0      	lsls	r0, r0, #3
    3b42:	4303      	orrs	r3, r0
    3b44:	4668      	mov	r0, sp
    3b46:	7183      	strb	r3, [r0, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    3b48:	7960      	ldrb	r0, [r4, #5]
    3b4a:	79a1      	ldrb	r1, [r4, #6]
    3b4c:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    3b4e:	4301      	orrs	r1, r0
    3b50:	4f46      	ldr	r7, [pc, #280]	; (3c6c <nwkRxTaskHandler+0x394>)
    3b52:	19c9      	adds	r1, r1, r7
    3b54:	4248      	negs	r0, r1
    3b56:	4141      	adcs	r1, r0
    3b58:	0109      	lsls	r1, r1, #4
    3b5a:	430b      	orrs	r3, r1
    3b5c:	4668      	mov	r0, sp
    3b5e:	7183      	strb	r3, [r0, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    3b60:	4790      	blx	r2
    3b62:	e000      	b.n	3b66 <nwkRxTaskHandler+0x28e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    3b64:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    3b66:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    3b68:	07db      	lsls	r3, r3, #31
    3b6a:	17db      	asrs	r3, r3, #31
    3b6c:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3b6e:	79e3      	ldrb	r3, [r4, #7]
    3b70:	7a22      	ldrb	r2, [r4, #8]
    3b72:	0212      	lsls	r2, r2, #8
    3b74:	431a      	orrs	r2, r3
    3b76:	4b34      	ldr	r3, [pc, #208]	; (3c48 <nwkRxTaskHandler+0x370>)
    3b78:	429a      	cmp	r2, r3
    3b7a:	d10b      	bne.n	3b94 <nwkRxTaskHandler+0x2bc>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3b7c:	7be1      	ldrb	r1, [r4, #15]
    3b7e:	7c23      	ldrb	r3, [r4, #16]
    3b80:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3b82:	4a32      	ldr	r2, [pc, #200]	; (3c4c <nwkRxTaskHandler+0x374>)
    3b84:	8812      	ldrh	r2, [r2, #0]
    3b86:	430b      	orrs	r3, r1
    3b88:	429a      	cmp	r2, r3
    3b8a:	d103      	bne.n	3b94 <nwkRxTaskHandler+0x2bc>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    3b8c:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    3b8e:	0719      	lsls	r1, r3, #28
    3b90:	d400      	bmi.n	3b94 <nwkRxTaskHandler+0x2bc>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    3b92:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    3b94:	7963      	ldrb	r3, [r4, #5]
    3b96:	79a2      	ldrb	r2, [r4, #6]
    3b98:	0212      	lsls	r2, r2, #8
    3b9a:	431a      	orrs	r2, r3
    3b9c:	4b2a      	ldr	r3, [pc, #168]	; (3c48 <nwkRxTaskHandler+0x370>)
    3b9e:	429a      	cmp	r2, r3
    3ba0:	d03c      	beq.n	3c1c <nwkRxTaskHandler+0x344>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    3ba2:	4b2a      	ldr	r3, [pc, #168]	; (3c4c <nwkRxTaskHandler+0x374>)
    3ba4:	881a      	ldrh	r2, [r3, #0]
    3ba6:	4b28      	ldr	r3, [pc, #160]	; (3c48 <nwkRxTaskHandler+0x370>)
    3ba8:	429a      	cmp	r2, r3
    3baa:	d037      	beq.n	3c1c <nwkRxTaskHandler+0x344>
		ack = false;
	}

	if (ack) {
    3bac:	2800      	cmp	r0, #0
    3bae:	d035      	beq.n	3c1c <nwkRxTaskHandler+0x344>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    3bb0:	4b2f      	ldr	r3, [pc, #188]	; (3c70 <nwkRxTaskHandler+0x398>)
    3bb2:	4798      	blx	r3
    3bb4:	1e07      	subs	r7, r0, #0
    3bb6:	d031      	beq.n	3c1c <nwkRxTaskHandler+0x344>
		return;
	}

	nwkFrameCommandInit(ack);
    3bb8:	4b2e      	ldr	r3, [pc, #184]	; (3c74 <nwkRxTaskHandler+0x39c>)
    3bba:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    3bbc:	787b      	ldrb	r3, [r7, #1]
    3bbe:	3303      	adds	r3, #3
    3bc0:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    3bc2:	2200      	movs	r2, #0
    3bc4:	2389      	movs	r3, #137	; 0x89
    3bc6:	54fa      	strb	r2, [r7, r3]
    3bc8:	238a      	movs	r3, #138	; 0x8a
    3bca:	54fa      	strb	r2, [r7, r3]
    3bcc:	238b      	movs	r3, #139	; 0x8b
    3bce:	54fa      	strb	r2, [r7, r3]
    3bd0:	238c      	movs	r3, #140	; 0x8c
    3bd2:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    3bd4:	7ae2      	ldrb	r2, [r4, #11]
    3bd6:	2302      	movs	r3, #2
    3bd8:	401a      	ands	r2, r3
    3bda:	7afb      	ldrb	r3, [r7, #11]
    3bdc:	2102      	movs	r1, #2
    3bde:	438b      	bics	r3, r1
    3be0:	4313      	orrs	r3, r2
    3be2:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    3be4:	7b62      	ldrb	r2, [r4, #13]
    3be6:	7ba3      	ldrb	r3, [r4, #14]
    3be8:	73fa      	strb	r2, [r7, #15]
    3bea:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    3bec:	2381      	movs	r3, #129	; 0x81
    3bee:	5cfa      	ldrb	r2, [r7, r3]
    3bf0:	2382      	movs	r3, #130	; 0x82
    3bf2:	5cfb      	ldrb	r3, [r7, r3]
    3bf4:	021b      	lsls	r3, r3, #8
    3bf6:	4313      	orrs	r3, r2
    3bf8:	2283      	movs	r2, #131	; 0x83
    3bfa:	5cba      	ldrb	r2, [r7, r2]
    3bfc:	0412      	lsls	r2, r2, #16
    3bfe:	4313      	orrs	r3, r2
    3c00:	2284      	movs	r2, #132	; 0x84
    3c02:	5cba      	ldrb	r2, [r7, r2]
    3c04:	0612      	lsls	r2, r2, #24
    3c06:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    3c08:	2200      	movs	r2, #0
    3c0a:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    3c0c:	4a16      	ldr	r2, [pc, #88]	; (3c68 <nwkRxTaskHandler+0x390>)
    3c0e:	7812      	ldrb	r2, [r2, #0]
    3c10:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    3c12:	7b22      	ldrb	r2, [r4, #12]
    3c14:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    3c16:	1c38      	adds	r0, r7, #0
    3c18:	4b17      	ldr	r3, [pc, #92]	; (3c78 <nwkRxTaskHandler+0x3a0>)
    3c1a:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    3c1c:	2324      	movs	r3, #36	; 0x24
    3c1e:	7023      	strb	r3, [r4, #0]
    3c20:	e006      	b.n	3c30 <nwkRxTaskHandler+0x358>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    3c22:	1c20      	adds	r0, r4, #0
    3c24:	4b15      	ldr	r3, [pc, #84]	; (3c7c <nwkRxTaskHandler+0x3a4>)
    3c26:	4798      	blx	r3
		}
		break;
    3c28:	e002      	b.n	3c30 <nwkRxTaskHandler+0x358>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    3c2a:	1c20      	adds	r0, r4, #0
    3c2c:	4b14      	ldr	r3, [pc, #80]	; (3c80 <nwkRxTaskHandler+0x3a8>)
    3c2e:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3c30:	1c20      	adds	r0, r4, #0
    3c32:	47a8      	blx	r5
    3c34:	1e04      	subs	r4, r0, #0
    3c36:	d000      	beq.n	3c3a <nwkRxTaskHandler+0x362>
    3c38:	e65a      	b.n	38f0 <nwkRxTaskHandler+0x18>
    3c3a:	e02c      	b.n	3c96 <nwkRxTaskHandler+0x3be>
    3c3c:	00002f79 	.word	0x00002f79
    3c40:	20000bcc 	.word	0x20000bcc
    3c44:	000060e0 	.word	0x000060e0
    3c48:	0000ffff 	.word	0x0000ffff
    3c4c:	20000ec8 	.word	0x20000ec8
    3c50:	00003111 	.word	0x00003111
    3c54:	000030f9 	.word	0x000030f9
    3c58:	20000cfc 	.word	0x20000cfc
    3c5c:	0000473d 	.word	0x0000473d
    3c60:	000040d1 	.word	0x000040d1
    3c64:	00003cd5 	.word	0x00003cd5
    3c68:	20000cf8 	.word	0x20000cf8
    3c6c:	ffff0001 	.word	0xffff0001
    3c70:	00002ef5 	.word	0x00002ef5
    3c74:	00002fb9 	.word	0x00002fb9
    3c78:	00004011 	.word	0x00004011
    3c7c:	000031f9 	.word	0x000031f9
    3c80:	00002f65 	.word	0x00002f65
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3c84:	79e1      	ldrb	r1, [r4, #7]
    3c86:	7a22      	ldrb	r2, [r4, #8]
    3c88:	0212      	lsls	r2, r2, #8
    3c8a:	430a      	orrs	r2, r1
    3c8c:	4b05      	ldr	r3, [pc, #20]	; (3ca4 <nwkRxTaskHandler+0x3cc>)
    3c8e:	429a      	cmp	r2, r3
    3c90:	d000      	beq.n	3c94 <nwkRxTaskHandler+0x3bc>
    3c92:	e6d5      	b.n	3a40 <nwkRxTaskHandler+0x168>
    3c94:	e6c6      	b.n	3a24 <nwkRxTaskHandler+0x14c>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    3c96:	b004      	add	sp, #16
    3c98:	bc1c      	pop	{r2, r3, r4}
    3c9a:	4690      	mov	r8, r2
    3c9c:	4699      	mov	r9, r3
    3c9e:	46a2      	mov	sl, r4
    3ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	0000ffff 	.word	0x0000ffff

00003ca8 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    3ca8:	2300      	movs	r3, #0
    3caa:	4a02      	ldr	r2, [pc, #8]	; (3cb4 <nwkSecurityInit+0xc>)
    3cac:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    3cae:	4a02      	ldr	r2, [pc, #8]	; (3cb8 <nwkSecurityInit+0x10>)
    3cb0:	6013      	str	r3, [r2, #0]
}
    3cb2:	4770      	bx	lr
    3cb4:	20000d10 	.word	0x20000d10
    3cb8:	20000d14 	.word	0x20000d14

00003cbc <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    3cbc:	b508      	push	{r3, lr}
    3cbe:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    3cc0:	4802      	ldr	r0, [pc, #8]	; (3ccc <NWK_SetSecurityKey+0x10>)
    3cc2:	2210      	movs	r2, #16
    3cc4:	4b02      	ldr	r3, [pc, #8]	; (3cd0 <NWK_SetSecurityKey+0x14>)
    3cc6:	4798      	blx	r3
}
    3cc8:	bd08      	pop	{r3, pc}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	20000f10 	.word	0x20000f10
    3cd0:	00005881 	.word	0x00005881

00003cd4 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    3cd4:	2900      	cmp	r1, #0
    3cd6:	d002      	beq.n	3cde <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    3cd8:	2330      	movs	r3, #48	; 0x30
    3cda:	7003      	strb	r3, [r0, #0]
    3cdc:	e001      	b.n	3ce2 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    3cde:	2331      	movs	r3, #49	; 0x31
    3ce0:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    3ce2:	4b02      	ldr	r3, [pc, #8]	; (3cec <nwkSecurityProcess+0x18>)
    3ce4:	781a      	ldrb	r2, [r3, #0]
    3ce6:	3201      	adds	r2, #1
    3ce8:	701a      	strb	r2, [r3, #0]
}
    3cea:	4770      	bx	lr
    3cec:	20000d10 	.word	0x20000d10

00003cf0 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    3cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cf2:	4647      	mov	r7, r8
    3cf4:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3cf6:	4b24      	ldr	r3, [pc, #144]	; (3d88 <SYS_EncryptConf+0x98>)
    3cf8:	681e      	ldr	r6, [r3, #0]
    3cfa:	4b24      	ldr	r3, [pc, #144]	; (3d8c <SYS_EncryptConf+0x9c>)
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	4698      	mov	r8, r3
    3d00:	2381      	movs	r3, #129	; 0x81
    3d02:	5cf3      	ldrb	r3, [r6, r3]
    3d04:	2282      	movs	r2, #130	; 0x82
    3d06:	5cb1      	ldrb	r1, [r6, r2]
    3d08:	0209      	lsls	r1, r1, #8
    3d0a:	4319      	orrs	r1, r3
    3d0c:	2383      	movs	r3, #131	; 0x83
    3d0e:	5cf4      	ldrb	r4, [r6, r3]
    3d10:	0424      	lsls	r4, r4, #16
    3d12:	4321      	orrs	r1, r4
    3d14:	2384      	movs	r3, #132	; 0x84
    3d16:	5cf4      	ldrb	r4, [r6, r3]
    3d18:	0624      	lsls	r4, r4, #24
    3d1a:	4321      	orrs	r1, r4
    3d1c:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    3d1e:	4b1c      	ldr	r3, [pc, #112]	; (3d90 <SYS_EncryptConf+0xa0>)
    3d20:	781b      	ldrb	r3, [r3, #0]
    3d22:	469c      	mov	ip, r3
    3d24:	1c1f      	adds	r7, r3, #0
    3d26:	2b10      	cmp	r3, #16
    3d28:	d900      	bls.n	3d2c <SYS_EncryptConf+0x3c>
    3d2a:	2710      	movs	r7, #16
    3d2c:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    3d2e:	2f00      	cmp	r7, #0
    3d30:	d016      	beq.n	3d60 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    3d32:	4b18      	ldr	r3, [pc, #96]	; (3d94 <SYS_EncryptConf+0xa4>)
    3d34:	781d      	ldrb	r5, [r3, #0]
    3d36:	1c0b      	adds	r3, r1, #0
    3d38:	4a17      	ldr	r2, [pc, #92]	; (3d98 <SYS_EncryptConf+0xa8>)
    3d3a:	1e7c      	subs	r4, r7, #1
    3d3c:	b2e4      	uxtb	r4, r4
    3d3e:	190c      	adds	r4, r1, r4
    3d40:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    3d42:	7810      	ldrb	r0, [r2, #0]
    3d44:	7819      	ldrb	r1, [r3, #0]
    3d46:	4041      	eors	r1, r0
    3d48:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    3d4a:	2d00      	cmp	r5, #0
    3d4c:	d001      	beq.n	3d52 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    3d4e:	7011      	strb	r1, [r2, #0]
    3d50:	e002      	b.n	3d58 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    3d52:	7810      	ldrb	r0, [r2, #0]
    3d54:	4041      	eors	r1, r0
    3d56:	7011      	strb	r1, [r2, #0]
    3d58:	3301      	adds	r3, #1
    3d5a:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    3d5c:	42a3      	cmp	r3, r4
    3d5e:	d1f0      	bne.n	3d42 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    3d60:	4643      	mov	r3, r8
    3d62:	18fa      	adds	r2, r7, r3
    3d64:	4b09      	ldr	r3, [pc, #36]	; (3d8c <SYS_EncryptConf+0x9c>)
    3d66:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    3d68:	4663      	mov	r3, ip
    3d6a:	1bdf      	subs	r7, r3, r7
    3d6c:	b2ff      	uxtb	r7, r7
    3d6e:	4b08      	ldr	r3, [pc, #32]	; (3d90 <SYS_EncryptConf+0xa0>)
    3d70:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    3d72:	2f00      	cmp	r7, #0
    3d74:	d002      	beq.n	3d7c <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3d76:	2332      	movs	r3, #50	; 0x32
    3d78:	7033      	strb	r3, [r6, #0]
    3d7a:	e001      	b.n	3d80 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    3d7c:	2334      	movs	r3, #52	; 0x34
    3d7e:	7033      	strb	r3, [r6, #0]
	}
}
    3d80:	bc04      	pop	{r2}
    3d82:	4690      	mov	r8, r2
    3d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d86:	46c0      	nop			; (mov r8, r8)
    3d88:	20000d14 	.word	0x20000d14
    3d8c:	20000d18 	.word	0x20000d18
    3d90:	20000d19 	.word	0x20000d19
    3d94:	20000d1a 	.word	0x20000d1a
    3d98:	20000d1c 	.word	0x20000d1c

00003d9c <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    3d9c:	b530      	push	{r4, r5, lr}
    3d9e:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    3da0:	4b56      	ldr	r3, [pc, #344]	; (3efc <nwkSecurityTaskHandler+0x160>)
    3da2:	781b      	ldrb	r3, [r3, #0]
    3da4:	2b00      	cmp	r3, #0
    3da6:	d100      	bne.n	3daa <nwkSecurityTaskHandler+0xe>
    3da8:	e0a5      	b.n	3ef6 <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    3daa:	4b55      	ldr	r3, [pc, #340]	; (3f00 <nwkSecurityTaskHandler+0x164>)
    3dac:	681c      	ldr	r4, [r3, #0]
    3dae:	2c00      	cmp	r4, #0
    3db0:	d100      	bne.n	3db4 <nwkSecurityTaskHandler+0x18>
    3db2:	e09b      	b.n	3eec <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    3db4:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    3db6:	2b34      	cmp	r3, #52	; 0x34
    3db8:	d145      	bne.n	3e46 <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3dba:	2381      	movs	r3, #129	; 0x81
    3dbc:	5ce3      	ldrb	r3, [r4, r3]
    3dbe:	2282      	movs	r2, #130	; 0x82
    3dc0:	5ca1      	ldrb	r1, [r4, r2]
    3dc2:	0209      	lsls	r1, r1, #8
    3dc4:	4319      	orrs	r1, r3
    3dc6:	2383      	movs	r3, #131	; 0x83
    3dc8:	5ce3      	ldrb	r3, [r4, r3]
    3dca:	041b      	lsls	r3, r3, #16
    3dcc:	4319      	orrs	r1, r3
    3dce:	2384      	movs	r3, #132	; 0x84
    3dd0:	5ce3      	ldrb	r3, [r4, r3]
    3dd2:	061b      	lsls	r3, r3, #24
    3dd4:	4319      	orrs	r1, r3
    3dd6:	4b4b      	ldr	r3, [pc, #300]	; (3f04 <nwkSecurityTaskHandler+0x168>)
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3ddc:	4b4a      	ldr	r3, [pc, #296]	; (3f08 <nwkSecurityTaskHandler+0x16c>)
    3dde:	685d      	ldr	r5, [r3, #4]
    3de0:	681a      	ldr	r2, [r3, #0]
    3de2:	4055      	eors	r5, r2
    3de4:	689a      	ldr	r2, [r3, #8]
    3de6:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    3de8:	68db      	ldr	r3, [r3, #12]
    3dea:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3dec:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    3dee:	4b47      	ldr	r3, [pc, #284]	; (3f0c <nwkSecurityTaskHandler+0x170>)
    3df0:	781b      	ldrb	r3, [r3, #0]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d009      	beq.n	3e0a <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    3df6:	1c08      	adds	r0, r1, #0
    3df8:	4669      	mov	r1, sp
    3dfa:	2204      	movs	r2, #4
    3dfc:	4b44      	ldr	r3, [pc, #272]	; (3f10 <nwkSecurityTaskHandler+0x174>)
    3dfe:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    3e00:	7863      	ldrb	r3, [r4, #1]
    3e02:	3304      	adds	r3, #4
    3e04:	7063      	strb	r3, [r4, #1]
		return true;
    3e06:	2101      	movs	r1, #1
    3e08:	e008      	b.n	3e1c <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    3e0a:	a801      	add	r0, sp, #4
    3e0c:	2204      	movs	r2, #4
    3e0e:	4b40      	ldr	r3, [pc, #256]	; (3f10 <nwkSecurityTaskHandler+0x174>)
    3e10:	4798      	blx	r3
		return vmic == tmic;
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	1ae9      	subs	r1, r5, r3
    3e16:	424d      	negs	r5, r1
    3e18:	4169      	adcs	r1, r5
    3e1a:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    3e1c:	4b3b      	ldr	r3, [pc, #236]	; (3f0c <nwkSecurityTaskHandler+0x170>)
    3e1e:	781b      	ldrb	r3, [r3, #0]
    3e20:	2b00      	cmp	r3, #0
    3e22:	d004      	beq.n	3e2e <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    3e24:	4b36      	ldr	r3, [pc, #216]	; (3f00 <nwkSecurityTaskHandler+0x164>)
    3e26:	6818      	ldr	r0, [r3, #0]
    3e28:	4b3a      	ldr	r3, [pc, #232]	; (3f14 <nwkSecurityTaskHandler+0x178>)
    3e2a:	4798      	blx	r3
    3e2c:	e003      	b.n	3e36 <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    3e2e:	4b34      	ldr	r3, [pc, #208]	; (3f00 <nwkSecurityTaskHandler+0x164>)
    3e30:	6818      	ldr	r0, [r3, #0]
    3e32:	4b39      	ldr	r3, [pc, #228]	; (3f18 <nwkSecurityTaskHandler+0x17c>)
    3e34:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    3e36:	2200      	movs	r2, #0
    3e38:	4b31      	ldr	r3, [pc, #196]	; (3f00 <nwkSecurityTaskHandler+0x164>)
    3e3a:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    3e3c:	4b2f      	ldr	r3, [pc, #188]	; (3efc <nwkSecurityTaskHandler+0x160>)
    3e3e:	781a      	ldrb	r2, [r3, #0]
    3e40:	3a01      	subs	r2, #1
    3e42:	701a      	strb	r2, [r3, #0]
    3e44:	e057      	b.n	3ef6 <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    3e46:	2b32      	cmp	r3, #50	; 0x32
    3e48:	d155      	bne.n	3ef6 <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    3e4a:	2333      	movs	r3, #51	; 0x33
    3e4c:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    3e4e:	482e      	ldr	r0, [pc, #184]	; (3f08 <nwkSecurityTaskHandler+0x16c>)
    3e50:	4932      	ldr	r1, [pc, #200]	; (3f1c <nwkSecurityTaskHandler+0x180>)
    3e52:	4b33      	ldr	r3, [pc, #204]	; (3f20 <nwkSecurityTaskHandler+0x184>)
    3e54:	4798      	blx	r3
    3e56:	e04e      	b.n	3ef6 <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    3e58:	7803      	ldrb	r3, [r0, #0]
    3e5a:	3b30      	subs	r3, #48	; 0x30
    3e5c:	2b01      	cmp	r3, #1
    3e5e:	d847      	bhi.n	3ef0 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    3e60:	4b27      	ldr	r3, [pc, #156]	; (3f00 <nwkSecurityTaskHandler+0x164>)
    3e62:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    3e64:	4a28      	ldr	r2, [pc, #160]	; (3f08 <nwkSecurityTaskHandler+0x16c>)
    3e66:	7b01      	ldrb	r1, [r0, #12]
    3e68:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    3e6a:	7bc1      	ldrb	r1, [r0, #15]
    3e6c:	7c04      	ldrb	r4, [r0, #16]
    3e6e:	0224      	lsls	r4, r4, #8
    3e70:	430c      	orrs	r4, r1
    3e72:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    3e74:	7c41      	ldrb	r1, [r0, #17]
    3e76:	0909      	lsrs	r1, r1, #4
    3e78:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    3e7a:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3e7c:	7b41      	ldrb	r1, [r0, #13]
    3e7e:	7b84      	ldrb	r4, [r0, #14]
    3e80:	0224      	lsls	r4, r4, #8
    3e82:	430c      	orrs	r4, r1
    3e84:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    3e86:	7c41      	ldrb	r1, [r0, #17]
    3e88:	0709      	lsls	r1, r1, #28
    3e8a:	0f09      	lsrs	r1, r1, #28
    3e8c:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3e8e:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    3e90:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3e92:	7944      	ldrb	r4, [r0, #5]
    3e94:	7983      	ldrb	r3, [r0, #6]
    3e96:	021b      	lsls	r3, r3, #8
    3e98:	4323      	orrs	r3, r4
    3e9a:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    3e9c:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3e9e:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    3ea0:	7803      	ldrb	r3, [r0, #0]
    3ea2:	2b31      	cmp	r3, #49	; 0x31
    3ea4:	d102      	bne.n	3eac <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    3ea6:	7843      	ldrb	r3, [r0, #1]
    3ea8:	3b04      	subs	r3, #4
    3eaa:	7043      	strb	r3, [r0, #1]
    3eac:	1c83      	adds	r3, r0, #2
    3eae:	2281      	movs	r2, #129	; 0x81
    3eb0:	5c81      	ldrb	r1, [r0, r2]
    3eb2:	2282      	movs	r2, #130	; 0x82
    3eb4:	5c82      	ldrb	r2, [r0, r2]
    3eb6:	0212      	lsls	r2, r2, #8
    3eb8:	430a      	orrs	r2, r1
    3eba:	2183      	movs	r1, #131	; 0x83
    3ebc:	5c41      	ldrb	r1, [r0, r1]
    3ebe:	0409      	lsls	r1, r1, #16
    3ec0:	430a      	orrs	r2, r1
    3ec2:	2184      	movs	r1, #132	; 0x84
    3ec4:	5c41      	ldrb	r1, [r0, r1]
    3ec6:	0609      	lsls	r1, r1, #24
    3ec8:	430a      	orrs	r2, r1
    3eca:	1a9a      	subs	r2, r3, r2
    3ecc:	7843      	ldrb	r3, [r0, #1]
    3ece:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    3ed0:	4b14      	ldr	r3, [pc, #80]	; (3f24 <nwkSecurityTaskHandler+0x188>)
    3ed2:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    3ed4:	2200      	movs	r2, #0
    3ed6:	4b0b      	ldr	r3, [pc, #44]	; (3f04 <nwkSecurityTaskHandler+0x168>)
    3ed8:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    3eda:	7802      	ldrb	r2, [r0, #0]
    3edc:	3a30      	subs	r2, #48	; 0x30
    3ede:	4253      	negs	r3, r2
    3ee0:	415a      	adcs	r2, r3
    3ee2:	4b0a      	ldr	r3, [pc, #40]	; (3f0c <nwkSecurityTaskHandler+0x170>)
    3ee4:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    3ee6:	2332      	movs	r3, #50	; 0x32
    3ee8:	7003      	strb	r3, [r0, #0]
    3eea:	e004      	b.n	3ef6 <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    3eec:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3eee:	4c0e      	ldr	r4, [pc, #56]	; (3f28 <nwkSecurityTaskHandler+0x18c>)
    3ef0:	47a0      	blx	r4
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d1b0      	bne.n	3e58 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    3ef6:	b003      	add	sp, #12
    3ef8:	bd30      	pop	{r4, r5, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	20000d10 	.word	0x20000d10
    3f00:	20000d14 	.word	0x20000d14
    3f04:	20000d18 	.word	0x20000d18
    3f08:	20000d1c 	.word	0x20000d1c
    3f0c:	20000d1a 	.word	0x20000d1a
    3f10:	00005881 	.word	0x00005881
    3f14:	000041a5 	.word	0x000041a5
    3f18:	000038c9 	.word	0x000038c9
    3f1c:	20000f10 	.word	0x20000f10
    3f20:	000045fd 	.word	0x000045fd
    3f24:	20000d19 	.word	0x20000d19
    3f28:	00002f79 	.word	0x00002f79

00003f2c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    3f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2e:	4647      	mov	r7, r8
    3f30:	b480      	push	{r7}
    3f32:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    3f34:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    3f36:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3f38:	4c0f      	ldr	r4, [pc, #60]	; (3f78 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3f3a:	2686      	movs	r6, #134	; 0x86
    3f3c:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3f3e:	e010      	b.n	3f62 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    3f40:	7803      	ldrb	r3, [r0, #0]
    3f42:	2b11      	cmp	r3, #17
    3f44:	d10d      	bne.n	3f62 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3f46:	5d82      	ldrb	r2, [r0, r6]
    3f48:	5d43      	ldrb	r3, [r0, r5]
    3f4a:	021b      	lsls	r3, r3, #8
    3f4c:	4313      	orrs	r3, r2
    3f4e:	3b01      	subs	r3, #1
    3f50:	b29b      	uxth	r3, r3
    3f52:	5583      	strb	r3, [r0, r6]
    3f54:	0a1a      	lsrs	r2, r3, #8
    3f56:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    3f58:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	d101      	bne.n	3f62 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    3f5e:	2313      	movs	r3, #19
    3f60:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3f62:	47a0      	blx	r4
    3f64:	2800      	cmp	r0, #0
    3f66:	d1eb      	bne.n	3f40 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    3f68:	2f00      	cmp	r7, #0
    3f6a:	d002      	beq.n	3f72 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    3f6c:	4640      	mov	r0, r8
    3f6e:	4b03      	ldr	r3, [pc, #12]	; (3f7c <nwkTxDelayTimerHandler+0x50>)
    3f70:	4798      	blx	r3
	}
}
    3f72:	bc04      	pop	{r2}
    3f74:	4690      	mov	r8, r2
    3f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f78:	00002f79 	.word	0x00002f79
    3f7c:	0000473d 	.word	0x0000473d

00003f80 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    3f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f82:	4647      	mov	r7, r8
    3f84:	b480      	push	{r7}
    3f86:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    3f88:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    3f8a:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3f8c:	4c11      	ldr	r4, [pc, #68]	; (3fd4 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3f8e:	2686      	movs	r6, #134	; 0x86
    3f90:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3f92:	e013      	b.n	3fbc <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    3f94:	7803      	ldrb	r3, [r0, #0]
    3f96:	2b16      	cmp	r3, #22
    3f98:	d110      	bne.n	3fbc <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3f9a:	5d82      	ldrb	r2, [r0, r6]
    3f9c:	5d43      	ldrb	r3, [r0, r5]
    3f9e:	021b      	lsls	r3, r3, #8
    3fa0:	4313      	orrs	r3, r2
    3fa2:	3b01      	subs	r3, #1
    3fa4:	b29b      	uxth	r3, r3
    3fa6:	5583      	strb	r3, [r0, r6]
    3fa8:	0a1a      	lsrs	r2, r3, #8
    3faa:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    3fac:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d104      	bne.n	3fbc <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    3fb2:	2317      	movs	r3, #23
    3fb4:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    3fb6:	2210      	movs	r2, #16
    3fb8:	2385      	movs	r3, #133	; 0x85
    3fba:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3fbc:	47a0      	blx	r4
    3fbe:	2800      	cmp	r0, #0
    3fc0:	d1e8      	bne.n	3f94 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    3fc2:	2f00      	cmp	r7, #0
    3fc4:	d002      	beq.n	3fcc <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    3fc6:	4640      	mov	r0, r8
    3fc8:	4b03      	ldr	r3, [pc, #12]	; (3fd8 <nwkTxAckWaitTimerHandler+0x58>)
    3fca:	4798      	blx	r3
	}
}
    3fcc:	bc04      	pop	{r2}
    3fce:	4690      	mov	r8, r2
    3fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	00002f79 	.word	0x00002f79
    3fd8:	0000473d 	.word	0x0000473d

00003fdc <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    3fdc:	2200      	movs	r2, #0
    3fde:	4b07      	ldr	r3, [pc, #28]	; (3ffc <nwkTxInit+0x20>)
    3fe0:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    3fe2:	4b07      	ldr	r3, [pc, #28]	; (4000 <nwkTxInit+0x24>)
    3fe4:	2132      	movs	r1, #50	; 0x32
    3fe6:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3fe8:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    3fea:	4906      	ldr	r1, [pc, #24]	; (4004 <nwkTxInit+0x28>)
    3fec:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3fee:	4b06      	ldr	r3, [pc, #24]	; (4008 <nwkTxInit+0x2c>)
    3ff0:	210a      	movs	r1, #10
    3ff2:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3ff4:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    3ff6:	4a05      	ldr	r2, [pc, #20]	; (400c <nwkTxInit+0x30>)
    3ff8:	611a      	str	r2, [r3, #16]
}
    3ffa:	4770      	bx	lr
    3ffc:	20000d40 	.word	0x20000d40
    4000:	20000d2c 	.word	0x20000d2c
    4004:	00003f81 	.word	0x00003f81
    4008:	20000d44 	.word	0x20000d44
    400c:	00003f2d 	.word	0x00003f2d

00004010 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    4010:	b510      	push	{r4, lr}
    4012:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    4014:	2388      	movs	r3, #136	; 0x88
    4016:	5cc3      	ldrb	r3, [r0, r3]
    4018:	0799      	lsls	r1, r3, #30
    401a:	d502      	bpl.n	4022 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    401c:	2212      	movs	r2, #18
    401e:	7002      	strb	r2, [r0, #0]
    4020:	e007      	b.n	4032 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    4022:	7ac2      	ldrb	r2, [r0, #11]
    4024:	0791      	lsls	r1, r2, #30
    4026:	d502      	bpl.n	402e <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    4028:	2210      	movs	r2, #16
    402a:	7002      	strb	r2, [r0, #0]
    402c:	e001      	b.n	4032 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    402e:	2212      	movs	r2, #18
    4030:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    4032:	2100      	movs	r1, #0
    4034:	2285      	movs	r2, #133	; 0x85
    4036:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    4038:	07da      	lsls	r2, r3, #31
    403a:	d504      	bpl.n	4046 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    403c:	2101      	movs	r1, #1
    403e:	4249      	negs	r1, r1
    4040:	7161      	strb	r1, [r4, #5]
    4042:	71a1      	strb	r1, [r4, #6]
    4044:	e004      	b.n	4050 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    4046:	491e      	ldr	r1, [pc, #120]	; (40c0 <nwkTxFrame+0xb0>)
    4048:	7888      	ldrb	r0, [r1, #2]
    404a:	7160      	strb	r0, [r4, #5]
    404c:	78c9      	ldrb	r1, [r1, #3]
    404e:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    4050:	2205      	movs	r2, #5
    4052:	421a      	tst	r2, r3
    4054:	d103      	bne.n	405e <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    4056:	1c20      	adds	r0, r4, #0
    4058:	4b1a      	ldr	r3, [pc, #104]	; (40c4 <nwkTxFrame+0xb4>)
    405a:	4798      	blx	r3
    405c:	e003      	b.n	4066 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    405e:	7be1      	ldrb	r1, [r4, #15]
    4060:	7c22      	ldrb	r2, [r4, #16]
    4062:	71e1      	strb	r1, [r4, #7]
    4064:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    4066:	4a16      	ldr	r2, [pc, #88]	; (40c0 <nwkTxFrame+0xb0>)
    4068:	7811      	ldrb	r1, [r2, #0]
    406a:	7261      	strb	r1, [r4, #9]
    406c:	7851      	ldrb	r1, [r2, #1]
    406e:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    4070:	7951      	ldrb	r1, [r2, #5]
    4072:	3101      	adds	r1, #1
    4074:	b2c9      	uxtb	r1, r1
    4076:	7151      	strb	r1, [r2, #5]
    4078:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    407a:	79e1      	ldrb	r1, [r4, #7]
    407c:	7a22      	ldrb	r2, [r4, #8]
    407e:	0212      	lsls	r2, r2, #8
    4080:	430a      	orrs	r2, r1
    4082:	4b11      	ldr	r3, [pc, #68]	; (40c8 <nwkTxFrame+0xb8>)
    4084:	429a      	cmp	r2, r3
    4086:	d110      	bne.n	40aa <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    4088:	2341      	movs	r3, #65	; 0x41
    408a:	70a3      	strb	r3, [r4, #2]
    408c:	2378      	movs	r3, #120	; 0x78
    408e:	425b      	negs	r3, r3
    4090:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    4092:	4b0e      	ldr	r3, [pc, #56]	; (40cc <nwkTxFrame+0xbc>)
    4094:	4798      	blx	r3
    4096:	2307      	movs	r3, #7
    4098:	4018      	ands	r0, r3
    409a:	3001      	adds	r0, #1
    409c:	2386      	movs	r3, #134	; 0x86
    409e:	54e0      	strb	r0, [r4, r3]
    40a0:	0a00      	lsrs	r0, r0, #8
    40a2:	b280      	uxth	r0, r0
    40a4:	2387      	movs	r3, #135	; 0x87
    40a6:	54e0      	strb	r0, [r4, r3]
    40a8:	e009      	b.n	40be <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    40aa:	2361      	movs	r3, #97	; 0x61
    40ac:	70a3      	strb	r3, [r4, #2]
    40ae:	2378      	movs	r3, #120	; 0x78
    40b0:	425b      	negs	r3, r3
    40b2:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    40b4:	2200      	movs	r2, #0
    40b6:	2386      	movs	r3, #134	; 0x86
    40b8:	54e2      	strb	r2, [r4, r3]
    40ba:	2387      	movs	r3, #135	; 0x87
    40bc:	54e2      	strb	r2, [r4, r3]
	}
}
    40be:	bd10      	pop	{r4, pc}
    40c0:	20000ec8 	.word	0x20000ec8
    40c4:	000031a5 	.word	0x000031a5
    40c8:	0000ffff 	.word	0x0000ffff
    40cc:	00005901 	.word	0x00005901

000040d0 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    40d0:	b538      	push	{r3, r4, r5, lr}
    40d2:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    40d4:	4b1d      	ldr	r3, [pc, #116]	; (414c <nwkTxBroadcastFrame+0x7c>)
    40d6:	4798      	blx	r3
    40d8:	1e04      	subs	r4, r0, #0
    40da:	d036      	beq.n	414a <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    40dc:	2312      	movs	r3, #18
    40de:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    40e0:	786b      	ldrb	r3, [r5, #1]
    40e2:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    40e4:	2200      	movs	r2, #0
    40e6:	2385      	movs	r3, #133	; 0x85
    40e8:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    40ea:	4b19      	ldr	r3, [pc, #100]	; (4150 <nwkTxBroadcastFrame+0x80>)
    40ec:	4798      	blx	r3
    40ee:	2307      	movs	r3, #7
    40f0:	4018      	ands	r0, r3
    40f2:	3001      	adds	r0, #1
    40f4:	2386      	movs	r3, #134	; 0x86
    40f6:	54e0      	strb	r0, [r4, r3]
    40f8:	0a00      	lsrs	r0, r0, #8
    40fa:	b280      	uxth	r0, r0
    40fc:	2387      	movs	r3, #135	; 0x87
    40fe:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    4100:	2200      	movs	r2, #0
    4102:	2389      	movs	r3, #137	; 0x89
    4104:	54e2      	strb	r2, [r4, r3]
    4106:	238a      	movs	r3, #138	; 0x8a
    4108:	54e2      	strb	r2, [r4, r3]
    410a:	238b      	movs	r3, #139	; 0x8b
    410c:	54e2      	strb	r2, [r4, r3]
    410e:	238c      	movs	r3, #140	; 0x8c
    4110:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    4112:	1ca0      	adds	r0, r4, #2
    4114:	786a      	ldrb	r2, [r5, #1]
    4116:	1ca9      	adds	r1, r5, #2
    4118:	4b0e      	ldr	r3, [pc, #56]	; (4154 <nwkTxBroadcastFrame+0x84>)
    411a:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    411c:	2341      	movs	r3, #65	; 0x41
    411e:	70a3      	strb	r3, [r4, #2]
    4120:	2378      	movs	r3, #120	; 0x78
    4122:	425b      	negs	r3, r3
    4124:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    4126:	2301      	movs	r3, #1
    4128:	425b      	negs	r3, r3
    412a:	71e3      	strb	r3, [r4, #7]
    412c:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    412e:	796a      	ldrb	r2, [r5, #5]
    4130:	79ab      	ldrb	r3, [r5, #6]
    4132:	7162      	strb	r2, [r4, #5]
    4134:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    4136:	4b08      	ldr	r3, [pc, #32]	; (4158 <nwkTxBroadcastFrame+0x88>)
    4138:	781a      	ldrb	r2, [r3, #0]
    413a:	7262      	strb	r2, [r4, #9]
    413c:	785a      	ldrb	r2, [r3, #1]
    413e:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    4140:	795a      	ldrb	r2, [r3, #5]
    4142:	3201      	adds	r2, #1
    4144:	b2d2      	uxtb	r2, r2
    4146:	715a      	strb	r2, [r3, #5]
    4148:	7122      	strb	r2, [r4, #4]
}
    414a:	bd38      	pop	{r3, r4, r5, pc}
    414c:	00002ef5 	.word	0x00002ef5
    4150:	00005901 	.word	0x00005901
    4154:	00005881 	.word	0x00005881
    4158:	20000ec8 	.word	0x20000ec8

0000415c <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    415c:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    415e:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    4160:	7b03      	ldrb	r3, [r0, #12]
		return false;
    4162:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    4164:	2b03      	cmp	r3, #3
    4166:	d113      	bne.n	4190 <nwkTxAckReceived+0x34>
    4168:	e00d      	b.n	4186 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    416a:	7803      	ldrb	r3, [r0, #0]
    416c:	2b16      	cmp	r3, #22
    416e:	d10c      	bne.n	418a <nwkTxAckReceived+0x2e>
    4170:	7b02      	ldrb	r2, [r0, #12]
    4172:	786b      	ldrb	r3, [r5, #1]
    4174:	429a      	cmp	r2, r3
    4176:	d108      	bne.n	418a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    4178:	2317      	movs	r3, #23
    417a:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    417c:	78aa      	ldrb	r2, [r5, #2]
    417e:	2388      	movs	r3, #136	; 0x88
    4180:	54c2      	strb	r2, [r0, r3]
			return true;
    4182:	2001      	movs	r0, #1
    4184:	e004      	b.n	4190 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    4186:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    4188:	4c02      	ldr	r4, [pc, #8]	; (4194 <nwkTxAckReceived+0x38>)
    418a:	47a0      	blx	r4
    418c:	2800      	cmp	r0, #0
    418e:	d1ec      	bne.n	416a <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    4190:	bd38      	pop	{r3, r4, r5, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	00002f79 	.word	0x00002f79

00004198 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    4198:	2317      	movs	r3, #23
    419a:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    419c:	2385      	movs	r3, #133	; 0x85
    419e:	54c1      	strb	r1, [r0, r3]
}
    41a0:	4770      	bx	lr
    41a2:	46c0      	nop			; (mov r8, r8)

000041a4 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    41a4:	2312      	movs	r3, #18
    41a6:	7003      	strb	r3, [r0, #0]
}
    41a8:	4770      	bx	lr
    41aa:	46c0      	nop			; (mov r8, r8)

000041ac <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    41ac:	4b0d      	ldr	r3, [pc, #52]	; (41e4 <PHY_DataConf+0x38>)
    41ae:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    41b0:	2801      	cmp	r0, #1
    41b2:	d009      	beq.n	41c8 <PHY_DataConf+0x1c>
    41b4:	2800      	cmp	r0, #0
    41b6:	d003      	beq.n	41c0 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    41b8:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    41ba:	2802      	cmp	r0, #2
    41bc:	d005      	beq.n	41ca <PHY_DataConf+0x1e>
    41be:	e001      	b.n	41c4 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    41c0:	2200      	movs	r2, #0
    41c2:	e002      	b.n	41ca <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    41c4:	2201      	movs	r2, #1
    41c6:	e000      	b.n	41ca <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    41c8:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    41ca:	2185      	movs	r1, #133	; 0x85
    41cc:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    41ce:	2215      	movs	r2, #21
    41d0:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    41d2:	2200      	movs	r2, #0
    41d4:	4b03      	ldr	r3, [pc, #12]	; (41e4 <PHY_DataConf+0x38>)
    41d6:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    41d8:	4a03      	ldr	r2, [pc, #12]	; (41e8 <PHY_DataConf+0x3c>)
    41da:	2358      	movs	r3, #88	; 0x58
    41dc:	5ad1      	ldrh	r1, [r2, r3]
    41de:	3901      	subs	r1, #1
    41e0:	52d1      	strh	r1, [r2, r3]
}
    41e2:	4770      	bx	lr
    41e4:	20000d40 	.word	0x20000d40
    41e8:	20000ec8 	.word	0x20000ec8

000041ec <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    41ec:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    41ee:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    41f0:	4d37      	ldr	r5, [pc, #220]	; (42d0 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    41f2:	4e38      	ldr	r6, [pc, #224]	; (42d4 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    41f4:	e066      	b.n	42c4 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    41f6:	7823      	ldrb	r3, [r4, #0]
    41f8:	3b10      	subs	r3, #16
    41fa:	b2da      	uxtb	r2, r3
    41fc:	2a07      	cmp	r2, #7
    41fe:	d861      	bhi.n	42c4 <nwkTxTaskHandler+0xd8>
    4200:	0093      	lsls	r3, r2, #2
    4202:	58f3      	ldr	r3, [r6, r3]
    4204:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    4206:	1c20      	adds	r0, r4, #0
    4208:	2101      	movs	r1, #1
    420a:	4b33      	ldr	r3, [pc, #204]	; (42d8 <nwkTxTaskHandler+0xec>)
    420c:	4798      	blx	r3
		}
		break;
    420e:	e059      	b.n	42c4 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    4210:	2386      	movs	r3, #134	; 0x86
    4212:	5ce2      	ldrb	r2, [r4, r3]
    4214:	2387      	movs	r3, #135	; 0x87
    4216:	5ce3      	ldrb	r3, [r4, r3]
    4218:	021b      	lsls	r3, r3, #8
    421a:	4313      	orrs	r3, r2
    421c:	d005      	beq.n	422a <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    421e:	2311      	movs	r3, #17
    4220:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    4222:	482e      	ldr	r0, [pc, #184]	; (42dc <nwkTxTaskHandler+0xf0>)
    4224:	4b2e      	ldr	r3, [pc, #184]	; (42e0 <nwkTxTaskHandler+0xf4>)
    4226:	4798      	blx	r3
    4228:	e04c      	b.n	42c4 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    422a:	2313      	movs	r3, #19
    422c:	7023      	strb	r3, [r4, #0]
    422e:	e049      	b.n	42c4 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    4230:	4b2c      	ldr	r3, [pc, #176]	; (42e4 <nwkTxTaskHandler+0xf8>)
    4232:	681b      	ldr	r3, [r3, #0]
    4234:	2b00      	cmp	r3, #0
    4236:	d145      	bne.n	42c4 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    4238:	4b2a      	ldr	r3, [pc, #168]	; (42e4 <nwkTxTaskHandler+0xf8>)
    423a:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    423c:	2314      	movs	r3, #20
    423e:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    4240:	1c60      	adds	r0, r4, #1
    4242:	4b29      	ldr	r3, [pc, #164]	; (42e8 <nwkTxTaskHandler+0xfc>)
    4244:	4798      	blx	r3
				nwkIb.lock++;
    4246:	4a29      	ldr	r2, [pc, #164]	; (42ec <nwkTxTaskHandler+0x100>)
    4248:	2358      	movs	r3, #88	; 0x58
    424a:	5ad1      	ldrh	r1, [r2, r3]
    424c:	3101      	adds	r1, #1
    424e:	52d1      	strh	r1, [r2, r3]
    4250:	e038      	b.n	42c4 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    4252:	2385      	movs	r3, #133	; 0x85
    4254:	5ce3      	ldrb	r3, [r4, r3]
    4256:	2b00      	cmp	r3, #0
    4258:	d119      	bne.n	428e <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    425a:	7b61      	ldrb	r1, [r4, #13]
    425c:	7ba3      	ldrb	r3, [r4, #14]
    425e:	021b      	lsls	r3, r3, #8
    4260:	4a22      	ldr	r2, [pc, #136]	; (42ec <nwkTxTaskHandler+0x100>)
    4262:	8812      	ldrh	r2, [r2, #0]
    4264:	430b      	orrs	r3, r1
    4266:	429a      	cmp	r2, r3
    4268:	d10e      	bne.n	4288 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    426a:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    426c:	07da      	lsls	r2, r3, #31
    426e:	d50b      	bpl.n	4288 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    4270:	2316      	movs	r3, #22
    4272:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    4274:	2215      	movs	r2, #21
    4276:	2386      	movs	r3, #134	; 0x86
    4278:	54e2      	strb	r2, [r4, r3]
    427a:	2200      	movs	r2, #0
    427c:	2387      	movs	r3, #135	; 0x87
    427e:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    4280:	481b      	ldr	r0, [pc, #108]	; (42f0 <nwkTxTaskHandler+0x104>)
    4282:	4b17      	ldr	r3, [pc, #92]	; (42e0 <nwkTxTaskHandler+0xf4>)
    4284:	4798      	blx	r3
    4286:	e01d      	b.n	42c4 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    4288:	2317      	movs	r3, #23
    428a:	7023      	strb	r3, [r4, #0]
    428c:	e01a      	b.n	42c4 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    428e:	2317      	movs	r3, #23
    4290:	7023      	strb	r3, [r4, #0]
    4292:	e017      	b.n	42c4 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    4294:	1c20      	adds	r0, r4, #0
    4296:	4b17      	ldr	r3, [pc, #92]	; (42f4 <nwkTxTaskHandler+0x108>)
    4298:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    429a:	2389      	movs	r3, #137	; 0x89
    429c:	5ce2      	ldrb	r2, [r4, r3]
    429e:	238a      	movs	r3, #138	; 0x8a
    42a0:	5ce3      	ldrb	r3, [r4, r3]
    42a2:	021b      	lsls	r3, r3, #8
    42a4:	4313      	orrs	r3, r2
    42a6:	228b      	movs	r2, #139	; 0x8b
    42a8:	5ca2      	ldrb	r2, [r4, r2]
    42aa:	0412      	lsls	r2, r2, #16
    42ac:	4313      	orrs	r3, r2
    42ae:	228c      	movs	r2, #140	; 0x8c
    42b0:	5ca2      	ldrb	r2, [r4, r2]
    42b2:	0612      	lsls	r2, r2, #24
    42b4:	4313      	orrs	r3, r2
    42b6:	d103      	bne.n	42c0 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    42b8:	1c20      	adds	r0, r4, #0
    42ba:	4b0f      	ldr	r3, [pc, #60]	; (42f8 <nwkTxTaskHandler+0x10c>)
    42bc:	4798      	blx	r3
    42be:	e001      	b.n	42c4 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    42c0:	1c20      	adds	r0, r4, #0
    42c2:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    42c4:	1c20      	adds	r0, r4, #0
    42c6:	47a8      	blx	r5
    42c8:	1e04      	subs	r4, r0, #0
    42ca:	d194      	bne.n	41f6 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    42cc:	bd70      	pop	{r4, r5, r6, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	00002f79 	.word	0x00002f79
    42d4:	000060f4 	.word	0x000060f4
    42d8:	00003cd5 	.word	0x00003cd5
    42dc:	20000d44 	.word	0x20000d44
    42e0:	0000473d 	.word	0x0000473d
    42e4:	20000d40 	.word	0x20000d40
    42e8:	0000443d 	.word	0x0000443d
    42ec:	20000ec8 	.word	0x20000ec8
    42f0:	20000d2c 	.word	0x20000d2c
    42f4:	00003115 	.word	0x00003115
    42f8:	00002f65 	.word	0x00002f65

000042fc <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    42fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42fe:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    4300:	4f0b      	ldr	r7, [pc, #44]	; (4330 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4302:	4e0c      	ldr	r6, [pc, #48]	; (4334 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    4304:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    4306:	2002      	movs	r0, #2
    4308:	2103      	movs	r1, #3
    430a:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    430c:	2001      	movs	r0, #1
    430e:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    4310:	4028      	ands	r0, r5
    4312:	2808      	cmp	r0, #8
    4314:	d1f7      	bne.n	4306 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    4316:	4f06      	ldr	r7, [pc, #24]	; (4330 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4318:	4e06      	ldr	r6, [pc, #24]	; (4334 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    431a:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    431c:	2002      	movs	r0, #2
    431e:	1c21      	adds	r1, r4, #0
    4320:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4322:	2001      	movs	r0, #1
    4324:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    4326:	4028      	ands	r0, r5
    4328:	4284      	cmp	r4, r0
    432a:	d1f7      	bne.n	431c <phyTrxSetState+0x20>
}
    432c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	00004d6d 	.word	0x00004d6d
    4334:	00004c75 	.word	0x00004c75

00004338 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    4338:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    433a:	2008      	movs	r0, #8
    433c:	4b06      	ldr	r3, [pc, #24]	; (4358 <phySetRxState+0x20>)
    433e:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4340:	200f      	movs	r0, #15
    4342:	4b06      	ldr	r3, [pc, #24]	; (435c <phySetRxState+0x24>)
    4344:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    4346:	4b06      	ldr	r3, [pc, #24]	; (4360 <phySetRxState+0x28>)
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	2b00      	cmp	r3, #0
    434c:	d002      	beq.n	4354 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    434e:	2016      	movs	r0, #22
    4350:	4b01      	ldr	r3, [pc, #4]	; (4358 <phySetRxState+0x20>)
    4352:	4798      	blx	r3
	}
}
    4354:	bd08      	pop	{r3, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	000042fd 	.word	0x000042fd
    435c:	00004c75 	.word	0x00004c75
    4360:	20000dd9 	.word	0x20000dd9

00004364 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    4364:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    4366:	4b0e      	ldr	r3, [pc, #56]	; (43a0 <PHY_Init+0x3c>)
    4368:	4798      	blx	r3
	PhyReset();
    436a:	4b0e      	ldr	r3, [pc, #56]	; (43a4 <PHY_Init+0x40>)
    436c:	4798      	blx	r3
	phyRxState = false;
    436e:	2200      	movs	r2, #0
    4370:	4b0d      	ldr	r3, [pc, #52]	; (43a8 <PHY_Init+0x44>)
    4372:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    4374:	2201      	movs	r2, #1
    4376:	4b0d      	ldr	r3, [pc, #52]	; (43ac <PHY_Init+0x48>)
    4378:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    437a:	4e0d      	ldr	r6, [pc, #52]	; (43b0 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    437c:	4d0d      	ldr	r5, [pc, #52]	; (43b4 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    437e:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    4380:	2002      	movs	r0, #2
    4382:	2108      	movs	r1, #8
    4384:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4386:	2001      	movs	r0, #1
    4388:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    438a:	4020      	ands	r0, r4
    438c:	2808      	cmp	r0, #8
    438e:	d1f7      	bne.n	4380 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    4390:	2004      	movs	r0, #4
    4392:	212e      	movs	r1, #46	; 0x2e
    4394:	4c06      	ldr	r4, [pc, #24]	; (43b0 <PHY_Init+0x4c>)
    4396:	47a0      	blx	r4
    4398:	200c      	movs	r0, #12
    439a:	21a0      	movs	r1, #160	; 0xa0
    439c:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    439e:	bd70      	pop	{r4, r5, r6, pc}
    43a0:	00004b35 	.word	0x00004b35
    43a4:	00004c45 	.word	0x00004c45
    43a8:	20000dd9 	.word	0x20000dd9
    43ac:	20000dd8 	.word	0x20000dd8
    43b0:	00004d6d 	.word	0x00004d6d
    43b4:	00004c75 	.word	0x00004c75

000043b8 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    43b8:	b508      	push	{r3, lr}
	phyRxState = rx;
    43ba:	4b02      	ldr	r3, [pc, #8]	; (43c4 <PHY_SetRxState+0xc>)
    43bc:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    43be:	4b02      	ldr	r3, [pc, #8]	; (43c8 <PHY_SetRxState+0x10>)
    43c0:	4798      	blx	r3
}
    43c2:	bd08      	pop	{r3, pc}
    43c4:	20000dd9 	.word	0x20000dd9
    43c8:	00004339 	.word	0x00004339

000043cc <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    43cc:	b510      	push	{r4, lr}
    43ce:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    43d0:	2008      	movs	r0, #8
    43d2:	4b05      	ldr	r3, [pc, #20]	; (43e8 <PHY_SetChannel+0x1c>)
    43d4:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    43d6:	231f      	movs	r3, #31
    43d8:	1c01      	adds	r1, r0, #0
    43da:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    43dc:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    43de:	b2e1      	uxtb	r1, r4
    43e0:	2008      	movs	r0, #8
    43e2:	4b02      	ldr	r3, [pc, #8]	; (43ec <PHY_SetChannel+0x20>)
    43e4:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    43e6:	bd10      	pop	{r4, pc}
    43e8:	00004c75 	.word	0x00004c75
    43ec:	00004d6d 	.word	0x00004d6d

000043f0 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    43f0:	b530      	push	{r4, r5, lr}
    43f2:	b083      	sub	sp, #12
    43f4:	466c      	mov	r4, sp
    43f6:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    43f8:	b2c1      	uxtb	r1, r0
    43fa:	2022      	movs	r0, #34	; 0x22
    43fc:	4d03      	ldr	r5, [pc, #12]	; (440c <PHY_SetPanId+0x1c>)
    43fe:	47a8      	blx	r5
    4400:	79e1      	ldrb	r1, [r4, #7]
    4402:	2023      	movs	r0, #35	; 0x23
    4404:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    4406:	b003      	add	sp, #12
    4408:	bd30      	pop	{r4, r5, pc}
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	00004d6d 	.word	0x00004d6d

00004410 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    4410:	b570      	push	{r4, r5, r6, lr}
    4412:	b082      	sub	sp, #8
    4414:	466d      	mov	r5, sp
    4416:	80e8      	strh	r0, [r5, #6]
    4418:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    441a:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    441c:	2020      	movs	r0, #32
    441e:	1c31      	adds	r1, r6, #0
    4420:	4c05      	ldr	r4, [pc, #20]	; (4438 <PHY_SetShortAddr+0x28>)
    4422:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    4424:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    4426:	2021      	movs	r0, #33	; 0x21
    4428:	1c29      	adds	r1, r5, #0
    442a:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    442c:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    442e:	b2f1      	uxtb	r1, r6
    4430:	202d      	movs	r0, #45	; 0x2d
    4432:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    4434:	b002      	add	sp, #8
    4436:	bd70      	pop	{r4, r5, r6, pc}
    4438:	00004d6d 	.word	0x00004d6d

0000443c <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    443c:	b510      	push	{r4, lr}
    443e:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    4440:	2019      	movs	r0, #25
    4442:	4b0c      	ldr	r3, [pc, #48]	; (4474 <PHY_DataReq+0x38>)
    4444:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4446:	200f      	movs	r0, #15
    4448:	4b0b      	ldr	r3, [pc, #44]	; (4478 <PHY_DataReq+0x3c>)
    444a:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    444c:	7821      	ldrb	r1, [r4, #0]
    444e:	1c8b      	adds	r3, r1, #2
    4450:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    4452:	3101      	adds	r1, #1
    4454:	b2c9      	uxtb	r1, r1
    4456:	1c20      	adds	r0, r4, #0
    4458:	4b08      	ldr	r3, [pc, #32]	; (447c <PHY_DataReq+0x40>)
    445a:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    445c:	2203      	movs	r2, #3
    445e:	4b08      	ldr	r3, [pc, #32]	; (4480 <PHY_DataReq+0x44>)
    4460:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4462:	4b08      	ldr	r3, [pc, #32]	; (4484 <PHY_DataReq+0x48>)
    4464:	2280      	movs	r2, #128	; 0x80
    4466:	0352      	lsls	r2, r2, #13
    4468:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    446e:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    4470:	bd10      	pop	{r4, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	000042fd 	.word	0x000042fd
    4478:	00004c75 	.word	0x00004c75
    447c:	00004fa9 	.word	0x00004fa9
    4480:	20000dd8 	.word	0x20000dd8
    4484:	41004400 	.word	0x41004400

00004488 <PHY_RandomReq>:

/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    4488:	b5f0      	push	{r4, r5, r6, r7, lr}
    448a:	4647      	mov	r7, r8
    448c:	b480      	push	{r7}
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);
    448e:	2006      	movs	r0, #6
    4490:	4b0c      	ldr	r3, [pc, #48]	; (44c4 <PHY_RandomReq+0x3c>)
    4492:	4798      	blx	r3
    4494:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
	uint16_t rnd = 0;
    4496:	2500      	movs	r5, #0
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    4498:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <PHY_RandomReq+0x40>)
    449a:	4698      	mov	r8, r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    449c:	4f0b      	ldr	r7, [pc, #44]	; (44cc <PHY_RandomReq+0x44>)

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    449e:	2603      	movs	r6, #3
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    44a0:	2001      	movs	r0, #1
    44a2:	47c0      	blx	r8
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    44a4:	2006      	movs	r0, #6
    44a6:	47b8      	blx	r7

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    44a8:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    44aa:	4030      	ands	r0, r6
    44ac:	40a0      	lsls	r0, r4
    44ae:	4305      	orrs	r5, r0
    44b0:	b2ad      	uxth	r5, r5
    44b2:	3402      	adds	r4, #2
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
    44b4:	2c10      	cmp	r4, #16
    44b6:	d1f3      	bne.n	44a0 <PHY_RandomReq+0x18>
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
	}

	phySetRxState();
    44b8:	4b05      	ldr	r3, [pc, #20]	; (44d0 <PHY_RandomReq+0x48>)
    44ba:	4798      	blx	r3

	return rnd;
}
    44bc:	1c28      	adds	r0, r5, #0
    44be:	bc04      	pop	{r2}
    44c0:	4690      	mov	r8, r2
    44c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44c4:	000042fd 	.word	0x000042fd
    44c8:	0000014d 	.word	0x0000014d
    44cc:	00004c75 	.word	0x00004c75
    44d0:	00004339 	.word	0x00004339

000044d4 <PHY_EncryptReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    44d4:	b510      	push	{r4, lr}
    44d6:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    44d8:	1c08      	adds	r0, r1, #0
    44da:	2100      	movs	r1, #0
    44dc:	2200      	movs	r2, #0
    44de:	4b05      	ldr	r3, [pc, #20]	; (44f4 <PHY_EncryptReq+0x20>)
    44e0:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    44e2:	1c20      	adds	r0, r4, #0
    44e4:	2100      	movs	r1, #0
    44e6:	4b04      	ldr	r3, [pc, #16]	; (44f8 <PHY_EncryptReq+0x24>)
    44e8:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    44ea:	1c20      	adds	r0, r4, #0
    44ec:	4b03      	ldr	r3, [pc, #12]	; (44fc <PHY_EncryptReq+0x28>)
    44ee:	4798      	blx	r3
}
    44f0:	bd10      	pop	{r4, pc}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	000049cd 	.word	0x000049cd
    44f8:	00004961 	.word	0x00004961
    44fc:	00004b05 	.word	0x00004b05

00004500 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    4500:	b5f0      	push	{r4, r5, r6, r7, lr}
    4502:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    4504:	4b26      	ldr	r3, [pc, #152]	; (45a0 <PHY_TaskHandler+0xa0>)
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	2b02      	cmp	r3, #2
    450a:	d046      	beq.n	459a <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    450c:	200f      	movs	r0, #15
    450e:	4b25      	ldr	r3, [pc, #148]	; (45a4 <PHY_TaskHandler+0xa4>)
    4510:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    4512:	0703      	lsls	r3, r0, #28
    4514:	d541      	bpl.n	459a <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    4516:	4b22      	ldr	r3, [pc, #136]	; (45a0 <PHY_TaskHandler+0xa0>)
    4518:	781b      	ldrb	r3, [r3, #0]
    451a:	2b01      	cmp	r3, #1
    451c:	d124      	bne.n	4568 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    451e:	2007      	movs	r0, #7
    4520:	4b20      	ldr	r3, [pc, #128]	; (45a4 <PHY_TaskHandler+0xa4>)
    4522:	4798      	blx	r3
    4524:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    4526:	466c      	mov	r4, sp
    4528:	3407      	adds	r4, #7
    452a:	1c20      	adds	r0, r4, #0
    452c:	2101      	movs	r1, #1
    452e:	4e1e      	ldr	r6, [pc, #120]	; (45a8 <PHY_TaskHandler+0xa8>)
    4530:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    4532:	4d1e      	ldr	r5, [pc, #120]	; (45ac <PHY_TaskHandler+0xac>)
    4534:	7821      	ldrb	r1, [r4, #0]
    4536:	3102      	adds	r1, #2
    4538:	b2c9      	uxtb	r1, r1
    453a:	1c28      	adds	r0, r5, #0
    453c:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    453e:	a802      	add	r0, sp, #8
    4540:	1c6a      	adds	r2, r5, #1
    4542:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    4544:	7822      	ldrb	r2, [r4, #0]
    4546:	1e91      	subs	r1, r2, #2
    4548:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    454a:	18ad      	adds	r5, r5, r2
    454c:	786a      	ldrb	r2, [r5, #1]
    454e:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    4550:	3f5b      	subs	r7, #91	; 0x5b
    4552:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    4554:	4b16      	ldr	r3, [pc, #88]	; (45b0 <PHY_TaskHandler+0xb0>)
    4556:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    4558:	4d12      	ldr	r5, [pc, #72]	; (45a4 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    455a:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    455c:	2001      	movs	r0, #1
    455e:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    4560:	4020      	ands	r0, r4
    4562:	2816      	cmp	r0, #22
    4564:	d1fa      	bne.n	455c <PHY_TaskHandler+0x5c>
    4566:	e018      	b.n	459a <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    4568:	2b03      	cmp	r3, #3
    456a:	d116      	bne.n	459a <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    456c:	2002      	movs	r0, #2
    456e:	4b0d      	ldr	r3, [pc, #52]	; (45a4 <PHY_TaskHandler+0xa4>)
    4570:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    4572:	0944      	lsrs	r4, r0, #5
    4574:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    4576:	2c00      	cmp	r4, #0
    4578:	d007      	beq.n	458a <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    457a:	2c03      	cmp	r4, #3
    457c:	d004      	beq.n	4588 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    457e:	3c05      	subs	r4, #5
    4580:	1e63      	subs	r3, r4, #1
    4582:	419c      	sbcs	r4, r3
    4584:	3402      	adds	r4, #2
    4586:	e000      	b.n	458a <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    4588:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    458a:	4b0a      	ldr	r3, [pc, #40]	; (45b4 <PHY_TaskHandler+0xb4>)
    458c:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    458e:	2201      	movs	r2, #1
    4590:	4b03      	ldr	r3, [pc, #12]	; (45a0 <PHY_TaskHandler+0xa0>)
    4592:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    4594:	1c20      	adds	r0, r4, #0
    4596:	4b08      	ldr	r3, [pc, #32]	; (45b8 <PHY_TaskHandler+0xb8>)
    4598:	4798      	blx	r3
		}
	}
}
    459a:	b005      	add	sp, #20
    459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	20000dd8 	.word	0x20000dd8
    45a4:	00004c75 	.word	0x00004c75
    45a8:	00004e69 	.word	0x00004e69
    45ac:	20000d58 	.word	0x20000d58
    45b0:	00003871 	.word	0x00003871
    45b4:	00004339 	.word	0x00004339
    45b8:	000041ad 	.word	0x000041ad

000045bc <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    45bc:	b508      	push	{r3, lr}
	SYS_TimerInit();
    45be:	4b04      	ldr	r3, [pc, #16]	; (45d0 <SYS_Init+0x14>)
    45c0:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    45c2:	4b04      	ldr	r3, [pc, #16]	; (45d4 <SYS_Init+0x18>)
    45c4:	4798      	blx	r3
#endif
	PHY_Init();
    45c6:	4b04      	ldr	r3, [pc, #16]	; (45d8 <SYS_Init+0x1c>)
    45c8:	4798      	blx	r3
	NWK_Init();
    45ca:	4b04      	ldr	r3, [pc, #16]	; (45dc <SYS_Init+0x20>)
    45cc:	4798      	blx	r3
}
    45ce:	bd08      	pop	{r3, pc}
    45d0:	0000468d 	.word	0x0000468d
    45d4:	0000495d 	.word	0x0000495d
    45d8:	00004365 	.word	0x00004365
    45dc:	00002c3d 	.word	0x00002c3d

000045e0 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    45e0:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    45e2:	4b03      	ldr	r3, [pc, #12]	; (45f0 <SYS_TaskHandler+0x10>)
    45e4:	4798      	blx	r3
	NWK_TaskHandler();
    45e6:	4b03      	ldr	r3, [pc, #12]	; (45f4 <SYS_TaskHandler+0x14>)
    45e8:	4798      	blx	r3
	SYS_TimerTaskHandler();
    45ea:	4b03      	ldr	r3, [pc, #12]	; (45f8 <SYS_TaskHandler+0x18>)
    45ec:	4798      	blx	r3
}
    45ee:	bd08      	pop	{r3, pc}
    45f0:	00004501 	.word	0x00004501
    45f4:	00002cf1 	.word	0x00002cf1
    45f8:	00004759 	.word	0x00004759

000045fc <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    45fc:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    45fe:	4b02      	ldr	r3, [pc, #8]	; (4608 <SYS_EncryptReq+0xc>)
    4600:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    4602:	4b02      	ldr	r3, [pc, #8]	; (460c <SYS_EncryptReq+0x10>)
    4604:	4798      	blx	r3
}
    4606:	bd08      	pop	{r3, pc}
    4608:	000044d5 	.word	0x000044d5
    460c:	00003cf1 	.word	0x00003cf1

00004610 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    4610:	b530      	push	{r4, r5, lr}
	if (timers) {
    4612:	4b15      	ldr	r3, [pc, #84]	; (4668 <placeTimer+0x58>)
    4614:	681d      	ldr	r5, [r3, #0]
    4616:	2d00      	cmp	r5, #0
    4618:	d01e      	beq.n	4658 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    461a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    461c:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    461e:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    4620:	428a      	cmp	r2, r1
    4622:	d20a      	bcs.n	463a <placeTimer+0x2a>
    4624:	e004      	b.n	4630 <placeTimer+0x20>
    4626:	6859      	ldr	r1, [r3, #4]
    4628:	4291      	cmp	r1, r2
    462a:	d803      	bhi.n	4634 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    462c:	1c1c      	adds	r4, r3, #0
    462e:	e004      	b.n	463a <placeTimer+0x2a>
    4630:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    4632:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    4634:	1a89      	subs	r1, r1, r2
    4636:	6059      	str	r1, [r3, #4]
				break;
    4638:	e003      	b.n	4642 <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    463a:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    463c:	6823      	ldr	r3, [r4, #0]
    463e:	2b00      	cmp	r3, #0
    4640:	d1f1      	bne.n	4626 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    4642:	6042      	str	r2, [r0, #4]

		if (prev) {
    4644:	2c00      	cmp	r4, #0
    4646:	d003      	beq.n	4650 <placeTimer+0x40>
			timer->next = prev->next;
    4648:	6823      	ldr	r3, [r4, #0]
    464a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    464c:	6020      	str	r0, [r4, #0]
    464e:	e009      	b.n	4664 <placeTimer+0x54>
		} else {
			timer->next = timers;
    4650:	6005      	str	r5, [r0, #0]
			timers = timer;
    4652:	4b05      	ldr	r3, [pc, #20]	; (4668 <placeTimer+0x58>)
    4654:	6018      	str	r0, [r3, #0]
    4656:	e005      	b.n	4664 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    4658:	2300      	movs	r3, #0
    465a:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    465c:	6883      	ldr	r3, [r0, #8]
    465e:	6043      	str	r3, [r0, #4]
		timers = timer;
    4660:	4b01      	ldr	r3, [pc, #4]	; (4668 <placeTimer+0x58>)
    4662:	6018      	str	r0, [r3, #0]
	}
}
    4664:	bd30      	pop	{r4, r5, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	20000ddc 	.word	0x20000ddc

0000466c <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    466c:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    466e:	4b04      	ldr	r3, [pc, #16]	; (4680 <SYS_HwExpiry_Cb+0x14>)
    4670:	781a      	ldrb	r2, [r3, #0]
    4672:	3201      	adds	r2, #1
    4674:	b2d2      	uxtb	r2, r2
    4676:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    4678:	4802      	ldr	r0, [pc, #8]	; (4684 <SYS_HwExpiry_Cb+0x18>)
    467a:	4b03      	ldr	r3, [pc, #12]	; (4688 <SYS_HwExpiry_Cb+0x1c>)
    467c:	4798      	blx	r3
}
    467e:	bd08      	pop	{r3, pc}
    4680:	20000f24 	.word	0x20000f24
    4684:	00002710 	.word	0x00002710
    4688:	00005655 	.word	0x00005655

0000468c <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    468c:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    468e:	2400      	movs	r4, #0
    4690:	4b06      	ldr	r3, [pc, #24]	; (46ac <SYS_TimerInit+0x20>)
    4692:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    4694:	4806      	ldr	r0, [pc, #24]	; (46b0 <SYS_TimerInit+0x24>)
    4696:	4b07      	ldr	r3, [pc, #28]	; (46b4 <SYS_TimerInit+0x28>)
    4698:	4798      	blx	r3
	common_tc_init();
    469a:	4b07      	ldr	r3, [pc, #28]	; (46b8 <SYS_TimerInit+0x2c>)
    469c:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    469e:	4807      	ldr	r0, [pc, #28]	; (46bc <SYS_TimerInit+0x30>)
    46a0:	4b07      	ldr	r3, [pc, #28]	; (46c0 <SYS_TimerInit+0x34>)
    46a2:	4798      	blx	r3
	timers = NULL;
    46a4:	4b07      	ldr	r3, [pc, #28]	; (46c4 <SYS_TimerInit+0x38>)
    46a6:	601c      	str	r4, [r3, #0]
}
    46a8:	bd10      	pop	{r4, pc}
    46aa:	46c0      	nop			; (mov r8, r8)
    46ac:	20000f24 	.word	0x20000f24
    46b0:	0000466d 	.word	0x0000466d
    46b4:	00005745 	.word	0x00005745
    46b8:	000056c1 	.word	0x000056c1
    46bc:	00002710 	.word	0x00002710
    46c0:	00005655 	.word	0x00005655
    46c4:	20000ddc 	.word	0x20000ddc

000046c8 <SYS_TimerStop>:
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    46c8:	4b10      	ldr	r3, [pc, #64]	; (470c <SYS_TimerStop+0x44>)
    46ca:	681a      	ldr	r2, [r3, #0]
    46cc:	2a00      	cmp	r2, #0
    46ce:	d01b      	beq.n	4708 <SYS_TimerStop+0x40>
		if (t == timer) {
    46d0:	4282      	cmp	r2, r0
    46d2:	d116      	bne.n	4702 <SYS_TimerStop+0x3a>
    46d4:	e009      	b.n	46ea <SYS_TimerStop+0x22>
    46d6:	4298      	cmp	r0, r3
    46d8:	d001      	beq.n	46de <SYS_TimerStop+0x16>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    46da:	1c1a      	adds	r2, r3, #0
    46dc:	e011      	b.n	4702 <SYS_TimerStop+0x3a>
		if (t == timer) {
			if (prev) {
    46de:	2a00      	cmp	r2, #0
    46e0:	d002      	beq.n	46e8 <SYS_TimerStop+0x20>
				prev->next = t->next;
    46e2:	6819      	ldr	r1, [r3, #0]
    46e4:	6011      	str	r1, [r2, #0]
    46e6:	e004      	b.n	46f2 <SYS_TimerStop+0x2a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    46e8:	1c1a      	adds	r2, r3, #0
		if (t == timer) {
			if (prev) {
				prev->next = t->next;
			} else {
				timers = t->next;
    46ea:	4b08      	ldr	r3, [pc, #32]	; (470c <SYS_TimerStop+0x44>)
    46ec:	6811      	ldr	r1, [r2, #0]
    46ee:	6019      	str	r1, [r3, #0]
    46f0:	1c13      	adds	r3, r2, #0
			}

			if (t->next) {
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	2b00      	cmp	r3, #0
    46f6:	d007      	beq.n	4708 <SYS_TimerStop+0x40>
				t->next->timeout += timer->timeout;
    46f8:	6842      	ldr	r2, [r0, #4]
    46fa:	6859      	ldr	r1, [r3, #4]
    46fc:	188a      	adds	r2, r1, r2
    46fe:	605a      	str	r2, [r3, #4]
    4700:	e002      	b.n	4708 <SYS_TimerStop+0x40>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4702:	6813      	ldr	r3, [r2, #0]
    4704:	2b00      	cmp	r3, #0
    4706:	d1e6      	bne.n	46d6 <SYS_TimerStop+0xe>
			break;
		}

		prev = t;
	}
}
    4708:	4770      	bx	lr
    470a:	46c0      	nop			; (mov r8, r8)
    470c:	20000ddc 	.word	0x20000ddc

00004710 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4710:	4b09      	ldr	r3, [pc, #36]	; (4738 <SYS_TimerStarted+0x28>)
    4712:	681b      	ldr	r3, [r3, #0]
    4714:	2b00      	cmp	r3, #0
    4716:	d009      	beq.n	472c <SYS_TimerStarted+0x1c>
		if (t == timer) {
    4718:	4283      	cmp	r3, r0
    471a:	d102      	bne.n	4722 <SYS_TimerStarted+0x12>
    471c:	e008      	b.n	4730 <SYS_TimerStarted+0x20>
    471e:	4298      	cmp	r0, r3
    4720:	d008      	beq.n	4734 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    4722:	681b      	ldr	r3, [r3, #0]
    4724:	2b00      	cmp	r3, #0
    4726:	d1fa      	bne.n	471e <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    4728:	2000      	movs	r0, #0
    472a:	e004      	b.n	4736 <SYS_TimerStarted+0x26>
    472c:	2000      	movs	r0, #0
    472e:	e002      	b.n	4736 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    4730:	2001      	movs	r0, #1
    4732:	e000      	b.n	4736 <SYS_TimerStarted+0x26>
    4734:	2001      	movs	r0, #1
		}
	}
	return false;
}
    4736:	4770      	bx	lr
    4738:	20000ddc 	.word	0x20000ddc

0000473c <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    473c:	b510      	push	{r4, lr}
    473e:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    4740:	4b03      	ldr	r3, [pc, #12]	; (4750 <SYS_TimerStart+0x14>)
    4742:	4798      	blx	r3
    4744:	2800      	cmp	r0, #0
    4746:	d102      	bne.n	474e <SYS_TimerStart+0x12>
		placeTimer(timer);
    4748:	1c20      	adds	r0, r4, #0
    474a:	4b02      	ldr	r3, [pc, #8]	; (4754 <SYS_TimerStart+0x18>)
    474c:	4798      	blx	r3
	}
}
    474e:	bd10      	pop	{r4, pc}
    4750:	00004711 	.word	0x00004711
    4754:	00004611 	.word	0x00004611

00004758 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    4758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    475a:	4b1a      	ldr	r3, [pc, #104]	; (47c4 <SYS_TimerTaskHandler+0x6c>)
    475c:	781b      	ldrb	r3, [r3, #0]
    475e:	2b00      	cmp	r3, #0
    4760:	d02f      	beq.n	47c2 <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4762:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4766:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4768:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    476c:	2100      	movs	r1, #0
    476e:	4b16      	ldr	r3, [pc, #88]	; (47c8 <SYS_TimerTaskHandler+0x70>)
    4770:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    4772:	4a14      	ldr	r2, [pc, #80]	; (47c4 <SYS_TimerTaskHandler+0x6c>)
    4774:	7813      	ldrb	r3, [r2, #0]
    4776:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    4778:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    477a:	2800      	cmp	r0, #0
    477c:	d105      	bne.n	478a <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    477e:	2101      	movs	r1, #1
    4780:	4a11      	ldr	r2, [pc, #68]	; (47c8 <SYS_TimerTaskHandler+0x70>)
    4782:	7011      	strb	r1, [r2, #0]
    4784:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4788:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    478a:	009d      	lsls	r5, r3, #2
    478c:	18ed      	adds	r5, r5, r3
    478e:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    4790:	4e0e      	ldr	r6, [pc, #56]	; (47cc <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    4792:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    4794:	e00d      	b.n	47b2 <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    4796:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    4798:	6823      	ldr	r3, [r4, #0]
    479a:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    479c:	7b23      	ldrb	r3, [r4, #12]
    479e:	2b01      	cmp	r3, #1
    47a0:	d102      	bne.n	47a8 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    47a2:	1c20      	adds	r0, r4, #0
    47a4:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <SYS_TimerTaskHandler+0x78>)
    47a6:	4798      	blx	r3
		}
		if(timer->handler)
    47a8:	6923      	ldr	r3, [r4, #16]
    47aa:	2b00      	cmp	r3, #0
    47ac:	d001      	beq.n	47b2 <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    47ae:	1c20      	adds	r0, r4, #0
    47b0:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    47b2:	6834      	ldr	r4, [r6, #0]
    47b4:	2c00      	cmp	r4, #0
    47b6:	d004      	beq.n	47c2 <SYS_TimerTaskHandler+0x6a>
    47b8:	6863      	ldr	r3, [r4, #4]
    47ba:	429d      	cmp	r5, r3
    47bc:	d2eb      	bcs.n	4796 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    47be:	1b5d      	subs	r5, r3, r5
    47c0:	6065      	str	r5, [r4, #4]
	}
}
    47c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47c4:	20000f24 	.word	0x20000f24
    47c8:	20000008 	.word	0x20000008
    47cc:	20000ddc 	.word	0x20000ddc
    47d0:	00004611 	.word	0x00004611

000047d4 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    47d4:	b508      	push	{r3, lr}
	tmr_cca_callback();
    47d6:	4b01      	ldr	r3, [pc, #4]	; (47dc <tc_cca_callback+0x8>)
    47d8:	4798      	blx	r3
}
    47da:	bd08      	pop	{r3, pc}
    47dc:	00005729 	.word	0x00005729

000047e0 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    47e0:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    47e2:	4b01      	ldr	r3, [pc, #4]	; (47e8 <tc_ovf_callback+0x8>)
    47e4:	4798      	blx	r3
}
    47e6:	bd08      	pop	{r3, pc}
    47e8:	000056e1 	.word	0x000056e1

000047ec <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    47ec:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    47ee:	4802      	ldr	r0, [pc, #8]	; (47f8 <tmr_read_count+0xc>)
    47f0:	4b02      	ldr	r3, [pc, #8]	; (47fc <tmr_read_count+0x10>)
    47f2:	4798      	blx	r3
    47f4:	b280      	uxth	r0, r0
}
    47f6:	bd08      	pop	{r3, pc}
    47f8:	20000f5c 	.word	0x20000f5c
    47fc:	00001f9d 	.word	0x00001f9d

00004800 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    4800:	4b03      	ldr	r3, [pc, #12]	; (4810 <tmr_disable_cc_interrupt+0x10>)
    4802:	2210      	movs	r2, #16
    4804:	6819      	ldr	r1, [r3, #0]
    4806:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    4808:	7e59      	ldrb	r1, [r3, #25]
    480a:	4391      	bics	r1, r2
    480c:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    480e:	4770      	bx	lr
    4810:	20000f5c 	.word	0x20000f5c

00004814 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    4814:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    4816:	4c0a      	ldr	r4, [pc, #40]	; (4840 <tmr_enable_cc_interrupt+0x2c>)
    4818:	6820      	ldr	r0, [r4, #0]
    481a:	4b0a      	ldr	r3, [pc, #40]	; (4844 <tmr_enable_cc_interrupt+0x30>)
    481c:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    481e:	4b0a      	ldr	r3, [pc, #40]	; (4848 <tmr_enable_cc_interrupt+0x34>)
    4820:	5c1b      	ldrb	r3, [r3, r0]
    4822:	221f      	movs	r2, #31
    4824:	401a      	ands	r2, r3
    4826:	2301      	movs	r3, #1
    4828:	4093      	lsls	r3, r2
    482a:	1c1a      	adds	r2, r3, #0
    482c:	4b07      	ldr	r3, [pc, #28]	; (484c <tmr_enable_cc_interrupt+0x38>)
    482e:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    4830:	7e62      	ldrb	r2, [r4, #25]
    4832:	2310      	movs	r3, #16
    4834:	4313      	orrs	r3, r2
    4836:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    4838:	6823      	ldr	r3, [r4, #0]
    483a:	2210      	movs	r2, #16
    483c:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    483e:	bd10      	pop	{r4, pc}
    4840:	20000f5c 	.word	0x20000f5c
    4844:	00001cf1 	.word	0x00001cf1
    4848:	00006114 	.word	0x00006114
    484c:	e000e100 	.word	0xe000e100

00004850 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    4850:	b508      	push	{r3, lr}
    4852:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    4854:	4802      	ldr	r0, [pc, #8]	; (4860 <tmr_write_cmpreg+0x10>)
    4856:	2100      	movs	r1, #0
    4858:	4b02      	ldr	r3, [pc, #8]	; (4864 <tmr_write_cmpreg+0x14>)
    485a:	4798      	blx	r3
			(uint32_t)compare_value);
}
    485c:	bd08      	pop	{r3, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	20000f5c 	.word	0x20000f5c
    4864:	00001fcd 	.word	0x00001fcd

00004868 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    4868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    486a:	464f      	mov	r7, r9
    486c:	4646      	mov	r6, r8
    486e:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    4870:	4a2d      	ldr	r2, [pc, #180]	; (4928 <tmr_init+0xc0>)
    4872:	2300      	movs	r3, #0
    4874:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    4876:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    4878:	2100      	movs	r1, #0
    487a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    487c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    487e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    4880:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    4882:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    4884:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    4886:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    4888:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    488a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    488c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    488e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    4890:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    4892:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    4894:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    4896:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    4898:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    489a:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    489c:	2301      	movs	r3, #1
    489e:	425b      	negs	r3, r3
    48a0:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    48a2:	4c22      	ldr	r4, [pc, #136]	; (492c <tmr_init+0xc4>)
    48a4:	1c20      	adds	r0, r4, #0
    48a6:	4922      	ldr	r1, [pc, #136]	; (4930 <tmr_init+0xc8>)
    48a8:	4b22      	ldr	r3, [pc, #136]	; (4934 <tmr_init+0xcc>)
    48aa:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    48ac:	1c20      	adds	r0, r4, #0
    48ae:	4922      	ldr	r1, [pc, #136]	; (4938 <tmr_init+0xd0>)
    48b0:	2200      	movs	r2, #0
    48b2:	4d22      	ldr	r5, [pc, #136]	; (493c <tmr_init+0xd4>)
    48b4:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    48b6:	1c20      	adds	r0, r4, #0
    48b8:	4921      	ldr	r1, [pc, #132]	; (4940 <tmr_init+0xd8>)
    48ba:	2202      	movs	r2, #2
    48bc:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    48be:	6820      	ldr	r0, [r4, #0]
    48c0:	4a20      	ldr	r2, [pc, #128]	; (4944 <tmr_init+0xdc>)
    48c2:	4691      	mov	r9, r2
    48c4:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    48c6:	4b20      	ldr	r3, [pc, #128]	; (4948 <tmr_init+0xe0>)
    48c8:	4698      	mov	r8, r3
    48ca:	5c1b      	ldrb	r3, [r3, r0]
    48cc:	271f      	movs	r7, #31
    48ce:	403b      	ands	r3, r7
    48d0:	2501      	movs	r5, #1
    48d2:	1c2a      	adds	r2, r5, #0
    48d4:	409a      	lsls	r2, r3
    48d6:	4e1d      	ldr	r6, [pc, #116]	; (494c <tmr_init+0xe4>)
    48d8:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    48da:	7e62      	ldrb	r2, [r4, #25]
    48dc:	2301      	movs	r3, #1
    48de:	4313      	orrs	r3, r2
    48e0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    48e2:	6820      	ldr	r0, [r4, #0]
    48e4:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    48e6:	47c8      	blx	r9
    48e8:	4642      	mov	r2, r8
    48ea:	5c13      	ldrb	r3, [r2, r0]
    48ec:	401f      	ands	r7, r3
    48ee:	40bd      	lsls	r5, r7
    48f0:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    48f2:	7e62      	ldrb	r2, [r4, #25]
    48f4:	2310      	movs	r3, #16
    48f6:	4313      	orrs	r3, r2
    48f8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    48fa:	6822      	ldr	r2, [r4, #0]
    48fc:	2310      	movs	r3, #16
    48fe:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4900:	217f      	movs	r1, #127	; 0x7f
    4902:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4904:	438b      	bics	r3, r1
    4906:	d1fc      	bne.n	4902 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4908:	8811      	ldrh	r1, [r2, #0]
    490a:	2302      	movs	r3, #2
    490c:	430b      	orrs	r3, r1
    490e:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    4910:	2000      	movs	r0, #0
    4912:	4b0f      	ldr	r3, [pc, #60]	; (4950 <tmr_init+0xe8>)
    4914:	4798      	blx	r3
    4916:	490f      	ldr	r1, [pc, #60]	; (4954 <tmr_init+0xec>)
    4918:	4b0f      	ldr	r3, [pc, #60]	; (4958 <tmr_init+0xf0>)
    491a:	4798      	blx	r3
	#endif
	return timer_multiplier;
    491c:	b2c0      	uxtb	r0, r0
}
    491e:	bc0c      	pop	{r2, r3}
    4920:	4690      	mov	r8, r2
    4922:	4699      	mov	r9, r3
    4924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	20000f28 	.word	0x20000f28
    492c:	20000f5c 	.word	0x20000f5c
    4930:	42002c00 	.word	0x42002c00
    4934:	00001d29 	.word	0x00001d29
    4938:	000047e1 	.word	0x000047e1
    493c:	00001c31 	.word	0x00001c31
    4940:	000047d5 	.word	0x000047d5
    4944:	00001cf1 	.word	0x00001cf1
    4948:	00006114 	.word	0x00006114
    494c:	e000e100 	.word	0xe000e100
    4950:	000019e9 	.word	0x000019e9
    4954:	000f4240 	.word	0x000f4240
    4958:	00005751 	.word	0x00005751

0000495c <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    495c:	4770      	bx	lr
    495e:	46c0      	nop			; (mov r8, r8)

00004960 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    4960:	b538      	push	{r3, r4, r5, lr}
    4962:	1c03      	adds	r3, r0, #0
    4964:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    4966:	4c14      	ldr	r4, [pc, #80]	; (49b8 <sal_aes_wrrd+0x58>)
    4968:	1c60      	adds	r0, r4, #1
    496a:	1c19      	adds	r1, r3, #0
    496c:	2210      	movs	r2, #16
    496e:	4b13      	ldr	r3, [pc, #76]	; (49bc <sal_aes_wrrd+0x5c>)
    4970:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    4972:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    4974:	4b12      	ldr	r3, [pc, #72]	; (49c0 <sal_aes_wrrd+0x60>)
    4976:	781b      	ldrb	r3, [r3, #0]
    4978:	2b00      	cmp	r3, #0
    497a:	d008      	beq.n	498e <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    497c:	2083      	movs	r0, #131	; 0x83
    497e:	490e      	ldr	r1, [pc, #56]	; (49b8 <sal_aes_wrrd+0x58>)
    4980:	2212      	movs	r2, #18
    4982:	4b10      	ldr	r3, [pc, #64]	; (49c4 <sal_aes_wrrd+0x64>)
    4984:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    4986:	2200      	movs	r2, #0
    4988:	4b0d      	ldr	r3, [pc, #52]	; (49c0 <sal_aes_wrrd+0x60>)
    498a:	701a      	strb	r2, [r3, #0]
    498c:	e005      	b.n	499a <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    498e:	2084      	movs	r0, #132	; 0x84
    4990:	4909      	ldr	r1, [pc, #36]	; (49b8 <sal_aes_wrrd+0x58>)
    4992:	3101      	adds	r1, #1
    4994:	2211      	movs	r2, #17
    4996:	4b0b      	ldr	r3, [pc, #44]	; (49c4 <sal_aes_wrrd+0x64>)
    4998:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    499a:	2d00      	cmp	r5, #0
    499c:	d005      	beq.n	49aa <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    499e:	1c28      	adds	r0, r5, #0
    49a0:	4905      	ldr	r1, [pc, #20]	; (49b8 <sal_aes_wrrd+0x58>)
    49a2:	3101      	adds	r1, #1
    49a4:	2210      	movs	r2, #16
    49a6:	4b05      	ldr	r3, [pc, #20]	; (49bc <sal_aes_wrrd+0x5c>)
    49a8:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    49aa:	4b03      	ldr	r3, [pc, #12]	; (49b8 <sal_aes_wrrd+0x58>)
    49ac:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    49ae:	2018      	movs	r0, #24
    49b0:	4b05      	ldr	r3, [pc, #20]	; (49c8 <sal_aes_wrrd+0x68>)
    49b2:	4798      	blx	r3
}
    49b4:	bd38      	pop	{r3, r4, r5, pc}
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	20000e04 	.word	0x20000e04
    49bc:	00005881 	.word	0x00005881
    49c0:	20000e18 	.word	0x20000e18
    49c4:	000053e1 	.word	0x000053e1
    49c8:	0000014d 	.word	0x0000014d

000049cc <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    49cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ce:	4647      	mov	r7, r8
    49d0:	b480      	push	{r7}
    49d2:	b084      	sub	sp, #16
    49d4:	1c05      	adds	r5, r0, #0
    49d6:	1c0f      	adds	r7, r1, #0
    49d8:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    49da:	2800      	cmp	r0, #0
    49dc:	d017      	beq.n	4a0e <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    49de:	2200      	movs	r2, #0
    49e0:	4b3e      	ldr	r3, [pc, #248]	; (4adc <sal_aes_setup+0x110>)
    49e2:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    49e4:	2202      	movs	r2, #2
    49e6:	4b3e      	ldr	r3, [pc, #248]	; (4ae0 <sal_aes_setup+0x114>)
    49e8:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    49ea:	483e      	ldr	r0, [pc, #248]	; (4ae4 <sal_aes_setup+0x118>)
    49ec:	1c29      	adds	r1, r5, #0
    49ee:	2210      	movs	r2, #16
    49f0:	4b3d      	ldr	r3, [pc, #244]	; (4ae8 <sal_aes_setup+0x11c>)
    49f2:	4698      	mov	r8, r3
    49f4:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    49f6:	4e3d      	ldr	r6, [pc, #244]	; (4aec <sal_aes_setup+0x120>)
    49f8:	2310      	movs	r3, #16
    49fa:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    49fc:	1c70      	adds	r0, r6, #1
    49fe:	1c29      	adds	r1, r5, #0
    4a00:	2210      	movs	r2, #16
    4a02:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    4a04:	2083      	movs	r0, #131	; 0x83
    4a06:	1c31      	adds	r1, r6, #0
    4a08:	2211      	movs	r2, #17
    4a0a:	4b39      	ldr	r3, [pc, #228]	; (4af0 <sal_aes_setup+0x124>)
    4a0c:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    4a0e:	2c00      	cmp	r4, #0
    4a10:	d002      	beq.n	4a18 <sal_aes_setup+0x4c>
    4a12:	2c01      	cmp	r4, #1
    4a14:	d012      	beq.n	4a3c <sal_aes_setup+0x70>
    4a16:	e05a      	b.n	4ace <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    4a18:	4b31      	ldr	r3, [pc, #196]	; (4ae0 <sal_aes_setup+0x114>)
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	2b01      	cmp	r3, #1
    4a1e:	d13d      	bne.n	4a9c <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4a20:	4d32      	ldr	r5, [pc, #200]	; (4aec <sal_aes_setup+0x120>)
    4a22:	2310      	movs	r3, #16
    4a24:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    4a26:	1c68      	adds	r0, r5, #1
    4a28:	492e      	ldr	r1, [pc, #184]	; (4ae4 <sal_aes_setup+0x118>)
    4a2a:	2210      	movs	r2, #16
    4a2c:	4b2e      	ldr	r3, [pc, #184]	; (4ae8 <sal_aes_setup+0x11c>)
    4a2e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    4a30:	2083      	movs	r0, #131	; 0x83
    4a32:	1c29      	adds	r1, r5, #0
    4a34:	2211      	movs	r2, #17
    4a36:	4b2e      	ldr	r3, [pc, #184]	; (4af0 <sal_aes_setup+0x124>)
    4a38:	4798      	blx	r3
    4a3a:	e02f      	b.n	4a9c <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    4a3c:	4b28      	ldr	r3, [pc, #160]	; (4ae0 <sal_aes_setup+0x114>)
    4a3e:	781b      	ldrb	r3, [r3, #0]
    4a40:	2b01      	cmp	r3, #1
    4a42:	d02b      	beq.n	4a9c <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4a44:	2210      	movs	r2, #16
    4a46:	4b29      	ldr	r3, [pc, #164]	; (4aec <sal_aes_setup+0x120>)
    4a48:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    4a4a:	4b24      	ldr	r3, [pc, #144]	; (4adc <sal_aes_setup+0x110>)
    4a4c:	781b      	ldrb	r3, [r3, #0]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d116      	bne.n	4a80 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    4a52:	4d26      	ldr	r5, [pc, #152]	; (4aec <sal_aes_setup+0x120>)
    4a54:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    4a56:	2380      	movs	r3, #128	; 0x80
    4a58:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    4a5a:	2201      	movs	r2, #1
    4a5c:	4b25      	ldr	r3, [pc, #148]	; (4af4 <sal_aes_setup+0x128>)
    4a5e:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    4a60:	4668      	mov	r0, sp
    4a62:	2100      	movs	r1, #0
    4a64:	4b24      	ldr	r3, [pc, #144]	; (4af8 <sal_aes_setup+0x12c>)
    4a66:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    4a68:	2310      	movs	r3, #16
    4a6a:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    4a6c:	2083      	movs	r0, #131	; 0x83
    4a6e:	1c29      	adds	r1, r5, #0
    4a70:	2201      	movs	r2, #1
    4a72:	4b1f      	ldr	r3, [pc, #124]	; (4af0 <sal_aes_setup+0x124>)
    4a74:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    4a76:	2084      	movs	r0, #132	; 0x84
    4a78:	4920      	ldr	r1, [pc, #128]	; (4afc <sal_aes_setup+0x130>)
    4a7a:	2210      	movs	r2, #16
    4a7c:	4b20      	ldr	r3, [pc, #128]	; (4b00 <sal_aes_setup+0x134>)
    4a7e:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    4a80:	4d1a      	ldr	r5, [pc, #104]	; (4aec <sal_aes_setup+0x120>)
    4a82:	1c68      	adds	r0, r5, #1
    4a84:	491d      	ldr	r1, [pc, #116]	; (4afc <sal_aes_setup+0x130>)
    4a86:	2210      	movs	r2, #16
    4a88:	4b17      	ldr	r3, [pc, #92]	; (4ae8 <sal_aes_setup+0x11c>)
    4a8a:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    4a8c:	2083      	movs	r0, #131	; 0x83
    4a8e:	1c29      	adds	r1, r5, #0
    4a90:	2211      	movs	r2, #17
    4a92:	4b17      	ldr	r3, [pc, #92]	; (4af0 <sal_aes_setup+0x124>)
    4a94:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    4a96:	4b11      	ldr	r3, [pc, #68]	; (4adc <sal_aes_setup+0x110>)
    4a98:	2201      	movs	r2, #1
    4a9a:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    4a9c:	4b10      	ldr	r3, [pc, #64]	; (4ae0 <sal_aes_setup+0x114>)
    4a9e:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    4aa0:	2f00      	cmp	r7, #0
    4aa2:	d002      	beq.n	4aaa <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    4aa4:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    4aa6:	2f02      	cmp	r7, #2
    4aa8:	d113      	bne.n	4ad2 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    4aaa:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    4aac:	2308      	movs	r3, #8
    4aae:	401c      	ands	r4, r3
    4ab0:	013f      	lsls	r7, r7, #4
    4ab2:	2370      	movs	r3, #112	; 0x70
    4ab4:	401f      	ands	r7, r3
    4ab6:	433c      	orrs	r4, r7
    4ab8:	4b0c      	ldr	r3, [pc, #48]	; (4aec <sal_aes_setup+0x120>)
    4aba:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    4abc:	2780      	movs	r7, #128	; 0x80
    4abe:	427f      	negs	r7, r7
    4ac0:	433c      	orrs	r4, r7
    4ac2:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    4ac4:	2201      	movs	r2, #1
    4ac6:	4b0b      	ldr	r3, [pc, #44]	; (4af4 <sal_aes_setup+0x128>)
    4ac8:	701a      	strb	r2, [r3, #0]

	return (true);
    4aca:	2001      	movs	r0, #1
    4acc:	e001      	b.n	4ad2 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    4ace:	2000      	movs	r0, #0
    4ad0:	e7ff      	b.n	4ad2 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    4ad2:	b004      	add	sp, #16
    4ad4:	bc04      	pop	{r2}
    4ad6:	4690      	mov	r8, r2
    4ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	20000de0 	.word	0x20000de0
    4ae0:	20000009 	.word	0x20000009
    4ae4:	20000df4 	.word	0x20000df4
    4ae8:	00005881 	.word	0x00005881
    4aec:	20000e04 	.word	0x20000e04
    4af0:	000050cd 	.word	0x000050cd
    4af4:	20000e18 	.word	0x20000e18
    4af8:	00004961 	.word	0x00004961
    4afc:	20000de4 	.word	0x20000de4
    4b00:	00005245 	.word	0x00005245

00004b04 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    4b04:	b508      	push	{r3, lr}
    4b06:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    4b08:	2084      	movs	r0, #132	; 0x84
    4b0a:	2210      	movs	r2, #16
    4b0c:	4b01      	ldr	r3, [pc, #4]	; (4b14 <sal_aes_read+0x10>)
    4b0e:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    4b10:	bd08      	pop	{r3, pc}
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	00005245 	.word	0x00005245

00004b18 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    4b18:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4b1a:	2201      	movs	r2, #1
    4b1c:	4b03      	ldr	r3, [pc, #12]	; (4b2c <AT86RFX_ISR+0x14>)
    4b1e:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    4b20:	4b03      	ldr	r3, [pc, #12]	; (4b30 <AT86RFX_ISR+0x18>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d000      	beq.n	4b2a <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    4b28:	4798      	blx	r3
	}
}
    4b2a:	bd08      	pop	{r3, pc}
    4b2c:	40001800 	.word	0x40001800
    4b30:	20000e1c 	.word	0x20000e1c

00004b34 <trx_spi_init>:

void trx_spi_init(void)
{
    4b34:	b530      	push	{r4, r5, lr}
    4b36:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    4b38:	4a32      	ldr	r2, [pc, #200]	; (4c04 <trx_spi_init+0xd0>)
    4b3a:	2300      	movs	r3, #0
    4b3c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    4b3e:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    4b40:	213f      	movs	r1, #63	; 0x3f
    4b42:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    4b44:	4c30      	ldr	r4, [pc, #192]	; (4c08 <trx_spi_init+0xd4>)
    4b46:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    4b48:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    4b4a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4b4c:	2201      	movs	r2, #1
    4b4e:	4668      	mov	r0, sp
    4b50:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
    4b52:	7083      	strb	r3, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4b54:	7002      	strb	r2, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    4b56:	203f      	movs	r0, #63	; 0x3f
    4b58:	4669      	mov	r1, sp
    4b5a:	4b2c      	ldr	r3, [pc, #176]	; (4c0c <trx_spi_init+0xd8>)
    4b5c:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4b5e:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4b60:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4b62:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4b64:	2900      	cmp	r1, #0
    4b66:	d103      	bne.n	4b70 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4b68:	095a      	lsrs	r2, r3, #5
    4b6a:	01d2      	lsls	r2, r2, #7
    4b6c:	4928      	ldr	r1, [pc, #160]	; (4c10 <trx_spi_init+0xdc>)
    4b6e:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b70:	211f      	movs	r1, #31
    4b72:	400b      	ands	r3, r1
    4b74:	2101      	movs	r1, #1
    4b76:	1c08      	adds	r0, r1, #0
    4b78:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4b7a:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4b7c:	4a25      	ldr	r2, [pc, #148]	; (4c14 <trx_spi_init+0xe0>)
    4b7e:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4b80:	2300      	movs	r3, #0
    4b82:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4b84:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4b86:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    4b88:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    4b8a:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4b8c:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    4b8e:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4b90:	2124      	movs	r1, #36	; 0x24
    4b92:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4b94:	61d3      	str	r3, [r2, #28]
    4b96:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    4b98:	2380      	movs	r3, #128	; 0x80
    4b9a:	025b      	lsls	r3, r3, #9
    4b9c:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    4b9e:	4b1e      	ldr	r3, [pc, #120]	; (4c18 <trx_spi_init+0xe4>)
    4ba0:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    4ba2:	4b1e      	ldr	r3, [pc, #120]	; (4c1c <trx_spi_init+0xe8>)
    4ba4:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    4ba6:	2301      	movs	r3, #1
    4ba8:	425b      	negs	r3, r3
    4baa:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    4bac:	4b1c      	ldr	r3, [pc, #112]	; (4c20 <trx_spi_init+0xec>)
    4bae:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    4bb0:	4b1c      	ldr	r3, [pc, #112]	; (4c24 <trx_spi_init+0xf0>)
    4bb2:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    4bb4:	4c1c      	ldr	r4, [pc, #112]	; (4c28 <trx_spi_init+0xf4>)
    4bb6:	1c20      	adds	r0, r4, #0
    4bb8:	491c      	ldr	r1, [pc, #112]	; (4c2c <trx_spi_init+0xf8>)
    4bba:	4b1d      	ldr	r3, [pc, #116]	; (4c30 <trx_spi_init+0xfc>)
    4bbc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4bbe:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4bc0:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d1fc      	bne.n	4bc0 <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4bc6:	6813      	ldr	r3, [r2, #0]
    4bc8:	2502      	movs	r5, #2
    4bca:	432b      	orrs	r3, r5
    4bcc:	6013      	str	r3, [r2, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    4bce:	ac01      	add	r4, sp, #4
    4bd0:	1c20      	adds	r0, r4, #0
    4bd2:	4b18      	ldr	r3, [pc, #96]	; (4c34 <trx_spi_init+0x100>)
    4bd4:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    4bd6:	2320      	movs	r3, #32
    4bd8:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    4bda:	2380      	movs	r3, #128	; 0x80
    4bdc:	039b      	lsls	r3, r3, #14
    4bde:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    4be0:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    4be2:	2301      	movs	r3, #1
    4be4:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    4be6:	2200      	movs	r2, #0
    4be8:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    4bea:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    4bec:	2000      	movs	r0, #0
    4bee:	1c21      	adds	r1, r4, #0
    4bf0:	4b11      	ldr	r3, [pc, #68]	; (4c38 <trx_spi_init+0x104>)
    4bf2:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    4bf4:	4811      	ldr	r0, [pc, #68]	; (4c3c <trx_spi_init+0x108>)
    4bf6:	2100      	movs	r1, #0
    4bf8:	2200      	movs	r2, #0
    4bfa:	4b11      	ldr	r3, [pc, #68]	; (4c40 <trx_spi_init+0x10c>)
    4bfc:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    4bfe:	b005      	add	sp, #20
    4c00:	bd30      	pop	{r4, r5, pc}
    4c02:	46c0      	nop			; (mov r8, r8)
    4c04:	20000f7c 	.word	0x20000f7c
    4c08:	20000f80 	.word	0x20000f80
    4c0c:	000004a9 	.word	0x000004a9
    4c10:	41004400 	.word	0x41004400
    4c14:	20000f84 	.word	0x20000f84
    4c18:	004c4b40 	.word	0x004c4b40
    4c1c:	00530005 	.word	0x00530005
    4c20:	003e0005 	.word	0x003e0005
    4c24:	00520005 	.word	0x00520005
    4c28:	20000fbc 	.word	0x20000fbc
    4c2c:	42001800 	.word	0x42001800
    4c30:	000009b9 	.word	0x000009b9
    4c34:	0000041d 	.word	0x0000041d
    4c38:	00000431 	.word	0x00000431
    4c3c:	00004b19 	.word	0x00004b19
    4c40:	000002b9 	.word	0x000002b9

00004c44 <PhyReset>:

void PhyReset(void)
{
    4c44:	b570      	push	{r4, r5, r6, lr}
    4c46:	4b09      	ldr	r3, [pc, #36]	; (4c6c <PhyReset+0x28>)
    4c48:	1c1c      	adds	r4, r3, #0
    4c4a:	3480      	adds	r4, #128	; 0x80
    4c4c:	2580      	movs	r5, #128	; 0x80
    4c4e:	022d      	lsls	r5, r5, #8
    4c50:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4c52:	2280      	movs	r2, #128	; 0x80
    4c54:	0352      	lsls	r2, r2, #13
    4c56:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    4c58:	20a5      	movs	r0, #165	; 0xa5
    4c5a:	0040      	lsls	r0, r0, #1
    4c5c:	4e04      	ldr	r6, [pc, #16]	; (4c70 <PhyReset+0x2c>)
    4c5e:	47b0      	blx	r6
    4c60:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    4c62:	200a      	movs	r0, #10
    4c64:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4c66:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    4c68:	bd70      	pop	{r4, r5, r6, pc}
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	41004400 	.word	0x41004400
    4c70:	0000014d 	.word	0x0000014d

00004c74 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    4c74:	b570      	push	{r4, r5, r6, lr}
    4c76:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4c78:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4c7c:	4263      	negs	r3, r4
    4c7e:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4c80:	b672      	cpsid	i
    4c82:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4c86:	2200      	movs	r2, #0
    4c88:	4b33      	ldr	r3, [pc, #204]	; (4d58 <trx_reg_read+0xe4>)
    4c8a:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4c8c:	4d33      	ldr	r5, [pc, #204]	; (4d5c <trx_reg_read+0xe8>)
    4c8e:	1c28      	adds	r0, r5, #0
    4c90:	4933      	ldr	r1, [pc, #204]	; (4d60 <trx_reg_read+0xec>)
    4c92:	2201      	movs	r2, #1
    4c94:	4b33      	ldr	r3, [pc, #204]	; (4d64 <trx_reg_read+0xf0>)
    4c96:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c98:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4c9a:	2101      	movs	r1, #1
    4c9c:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4c9e:	420a      	tst	r2, r1
    4ca0:	d0fc      	beq.n	4c9c <trx_reg_read+0x28>
    4ca2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4ca4:	07d1      	lsls	r1, r2, #31
    4ca6:	d502      	bpl.n	4cae <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4ca8:	2280      	movs	r2, #128	; 0x80
    4caa:	4316      	orrs	r6, r2
    4cac:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4cae:	2102      	movs	r1, #2
    4cb0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4cb2:	420a      	tst	r2, r1
    4cb4:	d0fc      	beq.n	4cb0 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4cb6:	2104      	movs	r1, #4
    4cb8:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4cba:	420a      	tst	r2, r1
    4cbc:	d0fc      	beq.n	4cb8 <trx_reg_read+0x44>
    4cbe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4cc0:	0751      	lsls	r1, r2, #29
    4cc2:	d514      	bpl.n	4cee <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4cc4:	8b5a      	ldrh	r2, [r3, #26]
    4cc6:	0751      	lsls	r1, r2, #29
    4cc8:	d503      	bpl.n	4cd2 <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4cca:	8b59      	ldrh	r1, [r3, #26]
    4ccc:	2204      	movs	r2, #4
    4cce:	430a      	orrs	r2, r1
    4cd0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4cd2:	4a22      	ldr	r2, [pc, #136]	; (4d5c <trx_reg_read+0xe8>)
    4cd4:	7992      	ldrb	r2, [r2, #6]
    4cd6:	2a01      	cmp	r2, #1
    4cd8:	d105      	bne.n	4ce6 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4cda:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4cdc:	05c9      	lsls	r1, r1, #23
    4cde:	0dc9      	lsrs	r1, r1, #23
    4ce0:	4a21      	ldr	r2, [pc, #132]	; (4d68 <trx_reg_read+0xf4>)
    4ce2:	8011      	strh	r1, [r2, #0]
    4ce4:	e003      	b.n	4cee <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4ce6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4ce8:	b2c9      	uxtb	r1, r1
    4cea:	4a1f      	ldr	r2, [pc, #124]	; (4d68 <trx_reg_read+0xf4>)
    4cec:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4cee:	2101      	movs	r1, #1
    4cf0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    4cf2:	420a      	tst	r2, r1
    4cf4:	d0fc      	beq.n	4cf0 <trx_reg_read+0x7c>
    4cf6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4cf8:	07d1      	lsls	r1, r2, #31
    4cfa:	d501      	bpl.n	4d00 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4cfc:	2200      	movs	r2, #0
    4cfe:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4d00:	2102      	movs	r1, #2
    4d02:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4d04:	420a      	tst	r2, r1
    4d06:	d0fc      	beq.n	4d02 <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4d08:	2104      	movs	r1, #4
    4d0a:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    4d0c:	420a      	tst	r2, r1
    4d0e:	d0fc      	beq.n	4d0a <trx_reg_read+0x96>
    4d10:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    4d12:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4d14:	0751      	lsls	r1, r2, #29
    4d16:	d510      	bpl.n	4d3a <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4d18:	8b5a      	ldrh	r2, [r3, #26]
    4d1a:	0751      	lsls	r1, r2, #29
    4d1c:	d503      	bpl.n	4d26 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4d1e:	8b59      	ldrh	r1, [r3, #26]
    4d20:	2204      	movs	r2, #4
    4d22:	430a      	orrs	r2, r1
    4d24:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d26:	4a0d      	ldr	r2, [pc, #52]	; (4d5c <trx_reg_read+0xe8>)
    4d28:	7992      	ldrb	r2, [r2, #6]
    4d2a:	2a01      	cmp	r2, #1
    4d2c:	d103      	bne.n	4d36 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4d2e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4d30:	05ed      	lsls	r5, r5, #23
    4d32:	0ded      	lsrs	r5, r5, #23
    4d34:	e001      	b.n	4d3a <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4d36:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4d38:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4d3a:	4808      	ldr	r0, [pc, #32]	; (4d5c <trx_reg_read+0xe8>)
    4d3c:	4908      	ldr	r1, [pc, #32]	; (4d60 <trx_reg_read+0xec>)
    4d3e:	2200      	movs	r2, #0
    4d40:	4b08      	ldr	r3, [pc, #32]	; (4d64 <trx_reg_read+0xf0>)
    4d42:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4d44:	2c00      	cmp	r4, #0
    4d46:	d005      	beq.n	4d54 <trx_reg_read+0xe0>
		cpu_irq_enable();
    4d48:	2201      	movs	r2, #1
    4d4a:	4b03      	ldr	r3, [pc, #12]	; (4d58 <trx_reg_read+0xe4>)
    4d4c:	701a      	strb	r2, [r3, #0]
    4d4e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4d52:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4d54:	b2e8      	uxtb	r0, r5
}
    4d56:	bd70      	pop	{r4, r5, r6, pc}
    4d58:	20000008 	.word	0x20000008
    4d5c:	20000fbc 	.word	0x20000fbc
    4d60:	20000f80 	.word	0x20000f80
    4d64:	00000c69 	.word	0x00000c69
    4d68:	20000f78 	.word	0x20000f78

00004d6c <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d6e:	1c07      	adds	r7, r0, #0
    4d70:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4d72:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4d76:	4263      	negs	r3, r4
    4d78:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4d7a:	b672      	cpsid	i
    4d7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4d80:	2200      	movs	r2, #0
    4d82:	4b34      	ldr	r3, [pc, #208]	; (4e54 <trx_reg_write+0xe8>)
    4d84:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4d86:	4e34      	ldr	r6, [pc, #208]	; (4e58 <trx_reg_write+0xec>)
    4d88:	1c30      	adds	r0, r6, #0
    4d8a:	4934      	ldr	r1, [pc, #208]	; (4e5c <trx_reg_write+0xf0>)
    4d8c:	2201      	movs	r2, #1
    4d8e:	4b34      	ldr	r3, [pc, #208]	; (4e60 <trx_reg_write+0xf4>)
    4d90:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4d92:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4d94:	2101      	movs	r1, #1
    4d96:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4d98:	420a      	tst	r2, r1
    4d9a:	d0fc      	beq.n	4d96 <trx_reg_write+0x2a>
    4d9c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4d9e:	07d1      	lsls	r1, r2, #31
    4da0:	d502      	bpl.n	4da8 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4da2:	22c0      	movs	r2, #192	; 0xc0
    4da4:	4317      	orrs	r7, r2
    4da6:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4da8:	2102      	movs	r1, #2
    4daa:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4dac:	420a      	tst	r2, r1
    4dae:	d0fc      	beq.n	4daa <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4db0:	2104      	movs	r1, #4
    4db2:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4db4:	420a      	tst	r2, r1
    4db6:	d0fc      	beq.n	4db2 <trx_reg_write+0x46>
    4db8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4dba:	0751      	lsls	r1, r2, #29
    4dbc:	d514      	bpl.n	4de8 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4dbe:	8b5a      	ldrh	r2, [r3, #26]
    4dc0:	0751      	lsls	r1, r2, #29
    4dc2:	d503      	bpl.n	4dcc <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4dc4:	8b59      	ldrh	r1, [r3, #26]
    4dc6:	2204      	movs	r2, #4
    4dc8:	430a      	orrs	r2, r1
    4dca:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4dcc:	4a22      	ldr	r2, [pc, #136]	; (4e58 <trx_reg_write+0xec>)
    4dce:	7992      	ldrb	r2, [r2, #6]
    4dd0:	2a01      	cmp	r2, #1
    4dd2:	d105      	bne.n	4de0 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4dd4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4dd6:	05c9      	lsls	r1, r1, #23
    4dd8:	0dc9      	lsrs	r1, r1, #23
    4dda:	4a22      	ldr	r2, [pc, #136]	; (4e64 <trx_reg_write+0xf8>)
    4ddc:	8011      	strh	r1, [r2, #0]
    4dde:	e003      	b.n	4de8 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4de0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4de2:	b2c9      	uxtb	r1, r1
    4de4:	4a1f      	ldr	r2, [pc, #124]	; (4e64 <trx_reg_write+0xf8>)
    4de6:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4de8:	2001      	movs	r0, #1
    4dea:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    4dec:	4202      	tst	r2, r0
    4dee:	d0fc      	beq.n	4dea <trx_reg_write+0x7e>
    4df0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4df2:	07d1      	lsls	r1, r2, #31
    4df4:	d500      	bpl.n	4df8 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4df6:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4df8:	2102      	movs	r1, #2
    4dfa:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    4dfc:	420a      	tst	r2, r1
    4dfe:	d0fc      	beq.n	4dfa <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4e00:	2104      	movs	r1, #4
    4e02:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4e04:	420a      	tst	r2, r1
    4e06:	d0fc      	beq.n	4e02 <trx_reg_write+0x96>
    4e08:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4e0a:	0751      	lsls	r1, r2, #29
    4e0c:	d514      	bpl.n	4e38 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e0e:	8b5a      	ldrh	r2, [r3, #26]
    4e10:	0751      	lsls	r1, r2, #29
    4e12:	d503      	bpl.n	4e1c <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4e14:	8b59      	ldrh	r1, [r3, #26]
    4e16:	2204      	movs	r2, #4
    4e18:	430a      	orrs	r2, r1
    4e1a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e1c:	4a0e      	ldr	r2, [pc, #56]	; (4e58 <trx_reg_write+0xec>)
    4e1e:	7992      	ldrb	r2, [r2, #6]
    4e20:	2a01      	cmp	r2, #1
    4e22:	d105      	bne.n	4e30 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e26:	05d2      	lsls	r2, r2, #23
    4e28:	0dd2      	lsrs	r2, r2, #23
    4e2a:	4b0e      	ldr	r3, [pc, #56]	; (4e64 <trx_reg_write+0xf8>)
    4e2c:	801a      	strh	r2, [r3, #0]
    4e2e:	e003      	b.n	4e38 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e32:	b2d2      	uxtb	r2, r2
    4e34:	4b0b      	ldr	r3, [pc, #44]	; (4e64 <trx_reg_write+0xf8>)
    4e36:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4e38:	4807      	ldr	r0, [pc, #28]	; (4e58 <trx_reg_write+0xec>)
    4e3a:	4908      	ldr	r1, [pc, #32]	; (4e5c <trx_reg_write+0xf0>)
    4e3c:	2200      	movs	r2, #0
    4e3e:	4b08      	ldr	r3, [pc, #32]	; (4e60 <trx_reg_write+0xf4>)
    4e40:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4e42:	2c00      	cmp	r4, #0
    4e44:	d005      	beq.n	4e52 <trx_reg_write+0xe6>
		cpu_irq_enable();
    4e46:	2201      	movs	r2, #1
    4e48:	4b02      	ldr	r3, [pc, #8]	; (4e54 <trx_reg_write+0xe8>)
    4e4a:	701a      	strb	r2, [r3, #0]
    4e4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4e50:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e54:	20000008 	.word	0x20000008
    4e58:	20000fbc 	.word	0x20000fbc
    4e5c:	20000f80 	.word	0x20000f80
    4e60:	00000c69 	.word	0x00000c69
    4e64:	20000f78 	.word	0x20000f78

00004e68 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    4e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6a:	465f      	mov	r7, fp
    4e6c:	4656      	mov	r6, sl
    4e6e:	464d      	mov	r5, r9
    4e70:	4644      	mov	r4, r8
    4e72:	b4f0      	push	{r4, r5, r6, r7}
    4e74:	b083      	sub	sp, #12
    4e76:	1c06      	adds	r6, r0, #0
    4e78:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4e7a:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4e7e:	4278      	negs	r0, r7
    4e80:	4178      	adcs	r0, r7
    4e82:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4e84:	b672      	cpsid	i
    4e86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4e8a:	2200      	movs	r2, #0
    4e8c:	4b41      	ldr	r3, [pc, #260]	; (4f94 <trx_frame_read+0x12c>)
    4e8e:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4e90:	4d41      	ldr	r5, [pc, #260]	; (4f98 <trx_frame_read+0x130>)
    4e92:	1c28      	adds	r0, r5, #0
    4e94:	4941      	ldr	r1, [pc, #260]	; (4f9c <trx_frame_read+0x134>)
    4e96:	2201      	movs	r2, #1
    4e98:	4b41      	ldr	r3, [pc, #260]	; (4fa0 <trx_frame_read+0x138>)
    4e9a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e9c:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4e9e:	2101      	movs	r1, #1
    4ea0:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4ea2:	420a      	tst	r2, r1
    4ea4:	d0fc      	beq.n	4ea0 <trx_frame_read+0x38>
    4ea6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4ea8:	07d1      	lsls	r1, r2, #31
    4eaa:	d501      	bpl.n	4eb0 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4eac:	2220      	movs	r2, #32
    4eae:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4eb0:	2102      	movs	r1, #2
    4eb2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4eb4:	420a      	tst	r2, r1
    4eb6:	d0fc      	beq.n	4eb2 <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4eb8:	2004      	movs	r0, #4
    4eba:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4ebc:	4202      	tst	r2, r0
    4ebe:	d0fc      	beq.n	4eba <trx_frame_read+0x52>
    4ec0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4ec2:	0750      	lsls	r0, r2, #29
    4ec4:	d50f      	bpl.n	4ee6 <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ec6:	8b5a      	ldrh	r2, [r3, #26]
    4ec8:	0751      	lsls	r1, r2, #29
    4eca:	d503      	bpl.n	4ed4 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4ecc:	8b59      	ldrh	r1, [r3, #26]
    4ece:	2204      	movs	r2, #4
    4ed0:	430a      	orrs	r2, r1
    4ed2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ed4:	4a30      	ldr	r2, [pc, #192]	; (4f98 <trx_frame_read+0x130>)
    4ed6:	7992      	ldrb	r2, [r2, #6]
    4ed8:	2a01      	cmp	r2, #1
    4eda:	d109      	bne.n	4ef0 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ede:	05d2      	lsls	r2, r2, #23
    4ee0:	0dd2      	lsrs	r2, r2, #23
    4ee2:	4b30      	ldr	r3, [pc, #192]	; (4fa4 <trx_frame_read+0x13c>)
    4ee4:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4ee6:	1e63      	subs	r3, r4, #1
    4ee8:	b2db      	uxtb	r3, r3
    4eea:	2c00      	cmp	r4, #0
    4eec:	d105      	bne.n	4efa <trx_frame_read+0x92>
    4eee:	e03c      	b.n	4f6a <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ef2:	b2d2      	uxtb	r2, r2
    4ef4:	4b2b      	ldr	r3, [pc, #172]	; (4fa4 <trx_frame_read+0x13c>)
    4ef6:	801a      	strh	r2, [r3, #0]
    4ef8:	e7f5      	b.n	4ee6 <trx_frame_read+0x7e>
    4efa:	3301      	adds	r3, #1
    4efc:	199b      	adds	r3, r3, r6
    4efe:	4699      	mov	r9, r3
    4f00:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f02:	4a25      	ldr	r2, [pc, #148]	; (4f98 <trx_frame_read+0x130>)
    4f04:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f06:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f08:	2300      	movs	r3, #0
    4f0a:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4f0c:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f0e:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f10:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4f12:	2204      	movs	r2, #4
    4f14:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f16:	4642      	mov	r2, r8
    4f18:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4f1a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4f1c:	4222      	tst	r2, r4
    4f1e:	d0fc      	beq.n	4f1a <trx_frame_read+0xb2>
    4f20:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4f22:	4222      	tst	r2, r4
    4f24:	d001      	beq.n	4f2a <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f26:	4652      	mov	r2, sl
    4f28:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4f2a:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4f2c:	422a      	tst	r2, r5
    4f2e:	d0fc      	beq.n	4f2a <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f30:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4f32:	420a      	tst	r2, r1
    4f34:	d0fc      	beq.n	4f30 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4f36:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f38:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4f3a:	420a      	tst	r2, r1
    4f3c:	d011      	beq.n	4f62 <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f3e:	8b5a      	ldrh	r2, [r3, #26]
    4f40:	420a      	tst	r2, r1
    4f42:	d004      	beq.n	4f4e <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4f44:	8b5a      	ldrh	r2, [r3, #26]
    4f46:	4658      	mov	r0, fp
    4f48:	4302      	orrs	r2, r0
    4f4a:	b292      	uxth	r2, r2
    4f4c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f4e:	4812      	ldr	r0, [pc, #72]	; (4f98 <trx_frame_read+0x130>)
    4f50:	7982      	ldrb	r2, [r0, #6]
    4f52:	2a01      	cmp	r2, #1
    4f54:	d103      	bne.n	4f5e <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f56:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f58:	05c0      	lsls	r0, r0, #23
    4f5a:	0dc0      	lsrs	r0, r0, #23
    4f5c:	e001      	b.n	4f62 <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4f5e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f60:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    4f62:	7030      	strb	r0, [r6, #0]
		data++;
    4f64:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4f66:	454e      	cmp	r6, r9
    4f68:	d1d5      	bne.n	4f16 <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4f6a:	480b      	ldr	r0, [pc, #44]	; (4f98 <trx_frame_read+0x130>)
    4f6c:	490b      	ldr	r1, [pc, #44]	; (4f9c <trx_frame_read+0x134>)
    4f6e:	2200      	movs	r2, #0
    4f70:	4b0b      	ldr	r3, [pc, #44]	; (4fa0 <trx_frame_read+0x138>)
    4f72:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4f74:	9901      	ldr	r1, [sp, #4]
    4f76:	2900      	cmp	r1, #0
    4f78:	d005      	beq.n	4f86 <trx_frame_read+0x11e>
		cpu_irq_enable();
    4f7a:	2201      	movs	r2, #1
    4f7c:	4b05      	ldr	r3, [pc, #20]	; (4f94 <trx_frame_read+0x12c>)
    4f7e:	701a      	strb	r2, [r3, #0]
    4f80:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4f84:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4f86:	b003      	add	sp, #12
    4f88:	bc3c      	pop	{r2, r3, r4, r5}
    4f8a:	4690      	mov	r8, r2
    4f8c:	4699      	mov	r9, r3
    4f8e:	46a2      	mov	sl, r4
    4f90:	46ab      	mov	fp, r5
    4f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f94:	20000008 	.word	0x20000008
    4f98:	20000fbc 	.word	0x20000fbc
    4f9c:	20000f80 	.word	0x20000f80
    4fa0:	00000c69 	.word	0x00000c69
    4fa4:	20000f78 	.word	0x20000f78

00004fa8 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    4fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4faa:	464f      	mov	r7, r9
    4fac:	4646      	mov	r6, r8
    4fae:	b4c0      	push	{r6, r7}
    4fb0:	1c04      	adds	r4, r0, #0
    4fb2:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4fb4:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4fb8:	4271      	negs	r1, r6
    4fba:	4171      	adcs	r1, r6
    4fbc:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4fbe:	b672      	cpsid	i
    4fc0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4fc4:	2200      	movs	r2, #0
    4fc6:	4b3c      	ldr	r3, [pc, #240]	; (50b8 <trx_frame_write+0x110>)
    4fc8:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4fca:	4f3c      	ldr	r7, [pc, #240]	; (50bc <trx_frame_write+0x114>)
    4fcc:	1c38      	adds	r0, r7, #0
    4fce:	493c      	ldr	r1, [pc, #240]	; (50c0 <trx_frame_write+0x118>)
    4fd0:	2201      	movs	r2, #1
    4fd2:	4b3c      	ldr	r3, [pc, #240]	; (50c4 <trx_frame_write+0x11c>)
    4fd4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4fd6:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fd8:	2101      	movs	r1, #1
    4fda:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4fdc:	420a      	tst	r2, r1
    4fde:	d0fc      	beq.n	4fda <trx_frame_write+0x32>
    4fe0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4fe2:	07d1      	lsls	r1, r2, #31
    4fe4:	d501      	bpl.n	4fea <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4fe6:	2260      	movs	r2, #96	; 0x60
    4fe8:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4fea:	2102      	movs	r1, #2
    4fec:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4fee:	420a      	tst	r2, r1
    4ff0:	d0fc      	beq.n	4fec <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ff2:	2104      	movs	r1, #4
    4ff4:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4ff6:	420a      	tst	r2, r1
    4ff8:	d0fc      	beq.n	4ff4 <trx_frame_write+0x4c>
    4ffa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4ffc:	0751      	lsls	r1, r2, #29
    4ffe:	d50f      	bpl.n	5020 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5000:	8b5a      	ldrh	r2, [r3, #26]
    5002:	0751      	lsls	r1, r2, #29
    5004:	d503      	bpl.n	500e <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    5006:	8b59      	ldrh	r1, [r3, #26]
    5008:	2204      	movs	r2, #4
    500a:	430a      	orrs	r2, r1
    500c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    500e:	4a2b      	ldr	r2, [pc, #172]	; (50bc <trx_frame_write+0x114>)
    5010:	7992      	ldrb	r2, [r2, #6]
    5012:	2a01      	cmp	r2, #1
    5014:	d10e      	bne.n	5034 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5016:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5018:	05c9      	lsls	r1, r1, #23
    501a:	0dc9      	lsrs	r1, r1, #23
    501c:	4a2a      	ldr	r2, [pc, #168]	; (50c8 <trx_frame_write+0x120>)
    501e:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5020:	4a26      	ldr	r2, [pc, #152]	; (50bc <trx_frame_write+0x114>)
    5022:	7992      	ldrb	r2, [r2, #6]
    5024:	4690      	mov	r8, r2
    5026:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5028:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    502a:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    502c:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    502e:	2204      	movs	r2, #4
    5030:	4694      	mov	ip, r2
    5032:	e02b      	b.n	508c <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5034:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5036:	b2c9      	uxtb	r1, r1
    5038:	4a23      	ldr	r2, [pc, #140]	; (50c8 <trx_frame_write+0x120>)
    503a:	8011      	strh	r1, [r2, #0]
    503c:	e7f0      	b.n	5020 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    503e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    5040:	423a      	tst	r2, r7
    5042:	d0fc      	beq.n	503e <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    5044:	7831      	ldrb	r1, [r6, #0]
    5046:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5048:	423a      	tst	r2, r7
    504a:	d000      	beq.n	504e <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    504c:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    504e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    5050:	4202      	tst	r2, r0
    5052:	d0fc      	beq.n	504e <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5054:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5056:	4222      	tst	r2, r4
    5058:	d0fc      	beq.n	5054 <trx_frame_write+0xac>
    505a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    505c:	4222      	tst	r2, r4
    505e:	d014      	beq.n	508a <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5060:	8b5a      	ldrh	r2, [r3, #26]
    5062:	4222      	tst	r2, r4
    5064:	d004      	beq.n	5070 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    5066:	8b5a      	ldrh	r2, [r3, #26]
    5068:	4661      	mov	r1, ip
    506a:	430a      	orrs	r2, r1
    506c:	b292      	uxth	r2, r2
    506e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5070:	4642      	mov	r2, r8
    5072:	2a01      	cmp	r2, #1
    5074:	d105      	bne.n	5082 <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5078:	05d2      	lsls	r2, r2, #23
    507a:	0dd2      	lsrs	r2, r2, #23
    507c:	4912      	ldr	r1, [pc, #72]	; (50c8 <trx_frame_write+0x120>)
    507e:	800a      	strh	r2, [r1, #0]
    5080:	e003      	b.n	508a <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5084:	b2d2      	uxtb	r2, r2
    5086:	4910      	ldr	r1, [pc, #64]	; (50c8 <trx_frame_write+0x120>)
    5088:	800a      	strh	r2, [r1, #0]
    508a:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    508c:	3d01      	subs	r5, #1
    508e:	b2ed      	uxtb	r5, r5
    5090:	2dff      	cmp	r5, #255	; 0xff
    5092:	d1d4      	bne.n	503e <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    5094:	4809      	ldr	r0, [pc, #36]	; (50bc <trx_frame_write+0x114>)
    5096:	490a      	ldr	r1, [pc, #40]	; (50c0 <trx_frame_write+0x118>)
    5098:	2200      	movs	r2, #0
    509a:	4b0a      	ldr	r3, [pc, #40]	; (50c4 <trx_frame_write+0x11c>)
    509c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    509e:	464a      	mov	r2, r9
    50a0:	2a00      	cmp	r2, #0
    50a2:	d005      	beq.n	50b0 <trx_frame_write+0x108>
		cpu_irq_enable();
    50a4:	2201      	movs	r2, #1
    50a6:	4b04      	ldr	r3, [pc, #16]	; (50b8 <trx_frame_write+0x110>)
    50a8:	701a      	strb	r2, [r3, #0]
    50aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    50ae:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    50b0:	bc0c      	pop	{r2, r3}
    50b2:	4690      	mov	r8, r2
    50b4:	4699      	mov	r9, r3
    50b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50b8:	20000008 	.word	0x20000008
    50bc:	20000fbc 	.word	0x20000fbc
    50c0:	20000f80 	.word	0x20000f80
    50c4:	00000c69 	.word	0x00000c69
    50c8:	20000f78 	.word	0x20000f78

000050cc <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    50cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ce:	464f      	mov	r7, r9
    50d0:	4646      	mov	r6, r8
    50d2:	b4c0      	push	{r6, r7}
    50d4:	1c07      	adds	r7, r0, #0
    50d6:	1c0c      	adds	r4, r1, #0
    50d8:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    50da:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    50de:	4271      	negs	r1, r6
    50e0:	4171      	adcs	r1, r6
    50e2:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    50e4:	b672      	cpsid	i
    50e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    50ea:	2200      	movs	r2, #0
    50ec:	4b50      	ldr	r3, [pc, #320]	; (5230 <trx_sram_write+0x164>)
    50ee:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    50f0:	4e50      	ldr	r6, [pc, #320]	; (5234 <trx_sram_write+0x168>)
    50f2:	1c30      	adds	r0, r6, #0
    50f4:	4950      	ldr	r1, [pc, #320]	; (5238 <trx_sram_write+0x16c>)
    50f6:	2201      	movs	r2, #1
    50f8:	4b50      	ldr	r3, [pc, #320]	; (523c <trx_sram_write+0x170>)
    50fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    50fc:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50fe:	2101      	movs	r1, #1
    5100:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5102:	420a      	tst	r2, r1
    5104:	d0fc      	beq.n	5100 <trx_sram_write+0x34>
    5106:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5108:	07d1      	lsls	r1, r2, #31
    510a:	d501      	bpl.n	5110 <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    510c:	2240      	movs	r2, #64	; 0x40
    510e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5110:	2102      	movs	r1, #2
    5112:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5114:	420a      	tst	r2, r1
    5116:	d0fc      	beq.n	5112 <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5118:	2104      	movs	r1, #4
    511a:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    511c:	420a      	tst	r2, r1
    511e:	d0fc      	beq.n	511a <trx_sram_write+0x4e>
    5120:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5122:	0751      	lsls	r1, r2, #29
    5124:	d514      	bpl.n	5150 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5126:	8b5a      	ldrh	r2, [r3, #26]
    5128:	0751      	lsls	r1, r2, #29
    512a:	d503      	bpl.n	5134 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    512c:	8b59      	ldrh	r1, [r3, #26]
    512e:	2204      	movs	r2, #4
    5130:	430a      	orrs	r2, r1
    5132:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5134:	4a3f      	ldr	r2, [pc, #252]	; (5234 <trx_sram_write+0x168>)
    5136:	7992      	ldrb	r2, [r2, #6]
    5138:	2a01      	cmp	r2, #1
    513a:	d105      	bne.n	5148 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    513c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    513e:	05c9      	lsls	r1, r1, #23
    5140:	0dc9      	lsrs	r1, r1, #23
    5142:	4a3f      	ldr	r2, [pc, #252]	; (5240 <trx_sram_write+0x174>)
    5144:	8011      	strh	r1, [r2, #0]
    5146:	e003      	b.n	5150 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5148:	6a99      	ldr	r1, [r3, #40]	; 0x28
    514a:	b2c9      	uxtb	r1, r1
    514c:	4a3c      	ldr	r2, [pc, #240]	; (5240 <trx_sram_write+0x174>)
    514e:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5150:	2101      	movs	r1, #1
    5152:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    5154:	420a      	tst	r2, r1
    5156:	d0fc      	beq.n	5152 <trx_sram_write+0x86>
    5158:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    515a:	07d1      	lsls	r1, r2, #31
    515c:	d500      	bpl.n	5160 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    515e:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5160:	2102      	movs	r1, #2
    5162:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5164:	420a      	tst	r2, r1
    5166:	d0fc      	beq.n	5162 <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5168:	2104      	movs	r1, #4
    516a:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    516c:	420a      	tst	r2, r1
    516e:	d0fc      	beq.n	516a <trx_sram_write+0x9e>
    5170:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5172:	0751      	lsls	r1, r2, #29
    5174:	d50f      	bpl.n	5196 <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5176:	8b5a      	ldrh	r2, [r3, #26]
    5178:	0751      	lsls	r1, r2, #29
    517a:	d503      	bpl.n	5184 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    517c:	8b59      	ldrh	r1, [r3, #26]
    517e:	2204      	movs	r2, #4
    5180:	430a      	orrs	r2, r1
    5182:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5184:	4a2b      	ldr	r2, [pc, #172]	; (5234 <trx_sram_write+0x168>)
    5186:	7992      	ldrb	r2, [r2, #6]
    5188:	2a01      	cmp	r2, #1
    518a:	d10e      	bne.n	51aa <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    518c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    518e:	05c9      	lsls	r1, r1, #23
    5190:	0dc9      	lsrs	r1, r1, #23
    5192:	4a2b      	ldr	r2, [pc, #172]	; (5240 <trx_sram_write+0x174>)
    5194:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5196:	4a27      	ldr	r2, [pc, #156]	; (5234 <trx_sram_write+0x168>)
    5198:	7992      	ldrb	r2, [r2, #6]
    519a:	4690      	mov	r8, r2
    519c:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    519e:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    51a0:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51a2:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    51a4:	2204      	movs	r2, #4
    51a6:	4694      	mov	ip, r2
    51a8:	e02b      	b.n	5202 <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    51ac:	b2c9      	uxtb	r1, r1
    51ae:	4a24      	ldr	r2, [pc, #144]	; (5240 <trx_sram_write+0x174>)
    51b0:	8011      	strh	r1, [r2, #0]
    51b2:	e7f0      	b.n	5196 <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    51b4:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    51b6:	4238      	tst	r0, r7
    51b8:	d0fc      	beq.n	51b4 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    51ba:	7832      	ldrb	r2, [r6, #0]
    51bc:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    51be:	4238      	tst	r0, r7
    51c0:	d000      	beq.n	51c4 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    51c2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    51c4:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    51c6:	4208      	tst	r0, r1
    51c8:	d0fc      	beq.n	51c4 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51ca:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    51cc:	4220      	tst	r0, r4
    51ce:	d0fc      	beq.n	51ca <trx_sram_write+0xfe>
    51d0:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    51d2:	4220      	tst	r0, r4
    51d4:	d014      	beq.n	5200 <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    51d6:	8b58      	ldrh	r0, [r3, #26]
    51d8:	4220      	tst	r0, r4
    51da:	d004      	beq.n	51e6 <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    51dc:	8b58      	ldrh	r0, [r3, #26]
    51de:	4662      	mov	r2, ip
    51e0:	4310      	orrs	r0, r2
    51e2:	b280      	uxth	r0, r0
    51e4:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51e6:	4642      	mov	r2, r8
    51e8:	2a01      	cmp	r2, #1
    51ea:	d105      	bne.n	51f8 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    51ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
    51ee:	05c0      	lsls	r0, r0, #23
    51f0:	0dc0      	lsrs	r0, r0, #23
    51f2:	4a13      	ldr	r2, [pc, #76]	; (5240 <trx_sram_write+0x174>)
    51f4:	8010      	strh	r0, [r2, #0]
    51f6:	e003      	b.n	5200 <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    51fa:	b2c0      	uxtb	r0, r0
    51fc:	4a10      	ldr	r2, [pc, #64]	; (5240 <trx_sram_write+0x174>)
    51fe:	8010      	strh	r0, [r2, #0]
    5200:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    5202:	3d01      	subs	r5, #1
    5204:	b2ed      	uxtb	r5, r5
    5206:	2dff      	cmp	r5, #255	; 0xff
    5208:	d1d4      	bne.n	51b4 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    520a:	480a      	ldr	r0, [pc, #40]	; (5234 <trx_sram_write+0x168>)
    520c:	490a      	ldr	r1, [pc, #40]	; (5238 <trx_sram_write+0x16c>)
    520e:	2200      	movs	r2, #0
    5210:	4b0a      	ldr	r3, [pc, #40]	; (523c <trx_sram_write+0x170>)
    5212:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    5214:	464b      	mov	r3, r9
    5216:	2b00      	cmp	r3, #0
    5218:	d005      	beq.n	5226 <trx_sram_write+0x15a>
		cpu_irq_enable();
    521a:	2201      	movs	r2, #1
    521c:	4b04      	ldr	r3, [pc, #16]	; (5230 <trx_sram_write+0x164>)
    521e:	701a      	strb	r2, [r3, #0]
    5220:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    5224:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    5226:	bc0c      	pop	{r2, r3}
    5228:	4690      	mov	r8, r2
    522a:	4699      	mov	r9, r3
    522c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	20000008 	.word	0x20000008
    5234:	20000fbc 	.word	0x20000fbc
    5238:	20000f80 	.word	0x20000f80
    523c:	00000c69 	.word	0x00000c69
    5240:	20000f78 	.word	0x20000f78

00005244 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    5244:	b5f0      	push	{r4, r5, r6, r7, lr}
    5246:	465f      	mov	r7, fp
    5248:	4656      	mov	r6, sl
    524a:	464d      	mov	r5, r9
    524c:	4644      	mov	r4, r8
    524e:	b4f0      	push	{r4, r5, r6, r7}
    5250:	b083      	sub	sp, #12
    5252:	1c05      	adds	r5, r0, #0
    5254:	1c0e      	adds	r6, r1, #0
    5256:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    5258:	2001      	movs	r0, #1
    525a:	4b5b      	ldr	r3, [pc, #364]	; (53c8 <trx_sram_read+0x184>)
    525c:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    525e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    5262:	4279      	negs	r1, r7
    5264:	4179      	adcs	r1, r7
    5266:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    5268:	b672      	cpsid	i
    526a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    526e:	2200      	movs	r2, #0
    5270:	4b56      	ldr	r3, [pc, #344]	; (53cc <trx_sram_read+0x188>)
    5272:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5274:	4f56      	ldr	r7, [pc, #344]	; (53d0 <trx_sram_read+0x18c>)
    5276:	1c38      	adds	r0, r7, #0
    5278:	4956      	ldr	r1, [pc, #344]	; (53d4 <trx_sram_read+0x190>)
    527a:	2201      	movs	r2, #1
    527c:	4b56      	ldr	r3, [pc, #344]	; (53d8 <trx_sram_read+0x194>)
    527e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5280:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5282:	2101      	movs	r1, #1
    5284:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    5286:	420a      	tst	r2, r1
    5288:	d0fc      	beq.n	5284 <trx_sram_read+0x40>
    528a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    528c:	07d1      	lsls	r1, r2, #31
    528e:	d501      	bpl.n	5294 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5290:	2200      	movs	r2, #0
    5292:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5294:	2102      	movs	r1, #2
    5296:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5298:	420a      	tst	r2, r1
    529a:	d0fc      	beq.n	5296 <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    529c:	2204      	movs	r2, #4
    529e:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    52a0:	4211      	tst	r1, r2
    52a2:	d0fc      	beq.n	529e <trx_sram_read+0x5a>
    52a4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    52a6:	0751      	lsls	r1, r2, #29
    52a8:	d514      	bpl.n	52d4 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52aa:	8b5a      	ldrh	r2, [r3, #26]
    52ac:	0751      	lsls	r1, r2, #29
    52ae:	d503      	bpl.n	52b8 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    52b0:	8b59      	ldrh	r1, [r3, #26]
    52b2:	2204      	movs	r2, #4
    52b4:	430a      	orrs	r2, r1
    52b6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52b8:	4a45      	ldr	r2, [pc, #276]	; (53d0 <trx_sram_read+0x18c>)
    52ba:	7992      	ldrb	r2, [r2, #6]
    52bc:	2a01      	cmp	r2, #1
    52be:	d105      	bne.n	52cc <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    52c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    52c2:	05c9      	lsls	r1, r1, #23
    52c4:	0dc9      	lsrs	r1, r1, #23
    52c6:	4a45      	ldr	r2, [pc, #276]	; (53dc <trx_sram_read+0x198>)
    52c8:	8011      	strh	r1, [r2, #0]
    52ca:	e003      	b.n	52d4 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    52cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    52ce:	b2c9      	uxtb	r1, r1
    52d0:	4a42      	ldr	r2, [pc, #264]	; (53dc <trx_sram_read+0x198>)
    52d2:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    52d4:	2201      	movs	r2, #1
    52d6:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    52d8:	4211      	tst	r1, r2
    52da:	d0fc      	beq.n	52d6 <trx_sram_read+0x92>
    52dc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    52de:	07d1      	lsls	r1, r2, #31
    52e0:	d500      	bpl.n	52e4 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    52e2:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    52e4:	2202      	movs	r2, #2
    52e6:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    52e8:	4211      	tst	r1, r2
    52ea:	d0fc      	beq.n	52e6 <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    52ec:	2204      	movs	r2, #4
    52ee:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    52f0:	4211      	tst	r1, r2
    52f2:	d0fc      	beq.n	52ee <trx_sram_read+0xaa>
    52f4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    52f6:	0751      	lsls	r1, r2, #29
    52f8:	d50f      	bpl.n	531a <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52fa:	8b5a      	ldrh	r2, [r3, #26]
    52fc:	0751      	lsls	r1, r2, #29
    52fe:	d503      	bpl.n	5308 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    5300:	8b59      	ldrh	r1, [r3, #26]
    5302:	2204      	movs	r2, #4
    5304:	430a      	orrs	r2, r1
    5306:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5308:	4a31      	ldr	r2, [pc, #196]	; (53d0 <trx_sram_read+0x18c>)
    530a:	7992      	ldrb	r2, [r2, #6]
    530c:	2a01      	cmp	r2, #1
    530e:	d109      	bne.n	5324 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5312:	05d2      	lsls	r2, r2, #23
    5314:	0dd2      	lsrs	r2, r2, #23
    5316:	4b31      	ldr	r3, [pc, #196]	; (53dc <trx_sram_read+0x198>)
    5318:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    531a:	1e63      	subs	r3, r4, #1
    531c:	b2db      	uxtb	r3, r3
    531e:	2c00      	cmp	r4, #0
    5320:	d105      	bne.n	532e <trx_sram_read+0xea>
    5322:	e03b      	b.n	539c <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5326:	b2d2      	uxtb	r2, r2
    5328:	4b2c      	ldr	r3, [pc, #176]	; (53dc <trx_sram_read+0x198>)
    532a:	801a      	strh	r2, [r3, #0]
    532c:	e7f5      	b.n	531a <trx_sram_read+0xd6>
    532e:	3301      	adds	r3, #1
    5330:	199b      	adds	r3, r3, r6
    5332:	4699      	mov	r9, r3
    5334:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5336:	4a26      	ldr	r2, [pc, #152]	; (53d0 <trx_sram_read+0x18c>)
    5338:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    533a:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    533c:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    533e:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5340:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5342:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    5344:	2204      	movs	r2, #4
    5346:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5348:	4642      	mov	r2, r8
    534a:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    534c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    534e:	4222      	tst	r2, r4
    5350:	d0fc      	beq.n	534c <trx_sram_read+0x108>
    5352:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5354:	4222      	tst	r2, r4
    5356:	d001      	beq.n	535c <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5358:	4652      	mov	r2, sl
    535a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    535c:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    535e:	422a      	tst	r2, r5
    5360:	d0fc      	beq.n	535c <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5362:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    5364:	4202      	tst	r2, r0
    5366:	d0fc      	beq.n	5362 <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5368:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    536a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    536c:	4202      	tst	r2, r0
    536e:	d011      	beq.n	5394 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5370:	8b5a      	ldrh	r2, [r3, #26]
    5372:	4202      	tst	r2, r0
    5374:	d004      	beq.n	5380 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    5376:	8b5a      	ldrh	r2, [r3, #26]
    5378:	4659      	mov	r1, fp
    537a:	430a      	orrs	r2, r1
    537c:	b292      	uxth	r2, r2
    537e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5380:	4913      	ldr	r1, [pc, #76]	; (53d0 <trx_sram_read+0x18c>)
    5382:	798a      	ldrb	r2, [r1, #6]
    5384:	2a01      	cmp	r2, #1
    5386:	d103      	bne.n	5390 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5388:	6a99      	ldr	r1, [r3, #40]	; 0x28
    538a:	05c9      	lsls	r1, r1, #23
    538c:	0dc9      	lsrs	r1, r1, #23
    538e:	e001      	b.n	5394 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5390:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5392:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    5394:	7031      	strb	r1, [r6, #0]
		data++;
    5396:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    5398:	454e      	cmp	r6, r9
    539a:	d1d5      	bne.n	5348 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    539c:	480c      	ldr	r0, [pc, #48]	; (53d0 <trx_sram_read+0x18c>)
    539e:	490d      	ldr	r1, [pc, #52]	; (53d4 <trx_sram_read+0x190>)
    53a0:	2200      	movs	r2, #0
    53a2:	4b0d      	ldr	r3, [pc, #52]	; (53d8 <trx_sram_read+0x194>)
    53a4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    53a6:	9a01      	ldr	r2, [sp, #4]
    53a8:	2a00      	cmp	r2, #0
    53aa:	d005      	beq.n	53b8 <trx_sram_read+0x174>
		cpu_irq_enable();
    53ac:	2201      	movs	r2, #1
    53ae:	4b07      	ldr	r3, [pc, #28]	; (53cc <trx_sram_read+0x188>)
    53b0:	701a      	strb	r2, [r3, #0]
    53b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    53b6:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    53b8:	b003      	add	sp, #12
    53ba:	bc3c      	pop	{r2, r3, r4, r5}
    53bc:	4690      	mov	r8, r2
    53be:	4699      	mov	r9, r3
    53c0:	46a2      	mov	sl, r4
    53c2:	46ab      	mov	fp, r5
    53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c6:	46c0      	nop			; (mov r8, r8)
    53c8:	0000014d 	.word	0x0000014d
    53cc:	20000008 	.word	0x20000008
    53d0:	20000fbc 	.word	0x20000fbc
    53d4:	20000f80 	.word	0x20000f80
    53d8:	00000c69 	.word	0x00000c69
    53dc:	20000f78 	.word	0x20000f78

000053e0 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    53e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e2:	465f      	mov	r7, fp
    53e4:	4656      	mov	r6, sl
    53e6:	464d      	mov	r5, r9
    53e8:	4644      	mov	r4, r8
    53ea:	b4f0      	push	{r4, r5, r6, r7}
    53ec:	b083      	sub	sp, #12
    53ee:	1c05      	adds	r5, r0, #0
    53f0:	4688      	mov	r8, r1
    53f2:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    53f4:	2001      	movs	r0, #1
    53f6:	4b83      	ldr	r3, [pc, #524]	; (5604 <trx_aes_wrrd+0x224>)
    53f8:	4798      	blx	r3

	ENTER_TRX_REGION();
    53fa:	2000      	movs	r0, #0
    53fc:	2100      	movs	r1, #0
    53fe:	4b82      	ldr	r3, [pc, #520]	; (5608 <trx_aes_wrrd+0x228>)
    5400:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    5402:	4e82      	ldr	r6, [pc, #520]	; (560c <trx_aes_wrrd+0x22c>)
    5404:	1c30      	adds	r0, r6, #0
    5406:	4982      	ldr	r1, [pc, #520]	; (5610 <trx_aes_wrrd+0x230>)
    5408:	2201      	movs	r2, #1
    540a:	4b82      	ldr	r3, [pc, #520]	; (5614 <trx_aes_wrrd+0x234>)
    540c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    540e:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5410:	2101      	movs	r1, #1
    5412:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    5414:	420a      	tst	r2, r1
    5416:	d0fc      	beq.n	5412 <trx_aes_wrrd+0x32>
    5418:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    541a:	07d0      	lsls	r0, r2, #31
    541c:	d501      	bpl.n	5422 <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    541e:	2240      	movs	r2, #64	; 0x40
    5420:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5422:	2102      	movs	r1, #2
    5424:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    5426:	420a      	tst	r2, r1
    5428:	d0fc      	beq.n	5424 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    542a:	2104      	movs	r1, #4
    542c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    542e:	420a      	tst	r2, r1
    5430:	d0fc      	beq.n	542c <trx_aes_wrrd+0x4c>
    5432:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5434:	0751      	lsls	r1, r2, #29
    5436:	d514      	bpl.n	5462 <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5438:	8b5a      	ldrh	r2, [r3, #26]
    543a:	0756      	lsls	r6, r2, #29
    543c:	d503      	bpl.n	5446 <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    543e:	8b59      	ldrh	r1, [r3, #26]
    5440:	2204      	movs	r2, #4
    5442:	430a      	orrs	r2, r1
    5444:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5446:	4a71      	ldr	r2, [pc, #452]	; (560c <trx_aes_wrrd+0x22c>)
    5448:	7992      	ldrb	r2, [r2, #6]
    544a:	2a01      	cmp	r2, #1
    544c:	d105      	bne.n	545a <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    544e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5450:	05c9      	lsls	r1, r1, #23
    5452:	0dc9      	lsrs	r1, r1, #23
    5454:	4a70      	ldr	r2, [pc, #448]	; (5618 <trx_aes_wrrd+0x238>)
    5456:	8011      	strh	r1, [r2, #0]
    5458:	e003      	b.n	5462 <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    545a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    545c:	b2c9      	uxtb	r1, r1
    545e:	4a6e      	ldr	r2, [pc, #440]	; (5618 <trx_aes_wrrd+0x238>)
    5460:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5462:	2101      	movs	r1, #1
    5464:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    5466:	420a      	tst	r2, r1
    5468:	d0fc      	beq.n	5464 <trx_aes_wrrd+0x84>
    546a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    546c:	07d0      	lsls	r0, r2, #31
    546e:	d500      	bpl.n	5472 <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5470:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5472:	2102      	movs	r1, #2
    5474:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    5476:	420a      	tst	r2, r1
    5478:	d0fc      	beq.n	5474 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    547a:	2204      	movs	r2, #4
    547c:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    547e:	4211      	tst	r1, r2
    5480:	d0fc      	beq.n	547c <trx_aes_wrrd+0x9c>
    5482:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5484:	0751      	lsls	r1, r2, #29
    5486:	d514      	bpl.n	54b2 <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5488:	8b5a      	ldrh	r2, [r3, #26]
    548a:	0756      	lsls	r6, r2, #29
    548c:	d503      	bpl.n	5496 <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    548e:	8b59      	ldrh	r1, [r3, #26]
    5490:	2204      	movs	r2, #4
    5492:	430a      	orrs	r2, r1
    5494:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5496:	4a5d      	ldr	r2, [pc, #372]	; (560c <trx_aes_wrrd+0x22c>)
    5498:	7992      	ldrb	r2, [r2, #6]
    549a:	2a01      	cmp	r2, #1
    549c:	d105      	bne.n	54aa <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    549e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    54a0:	05c9      	lsls	r1, r1, #23
    54a2:	0dc9      	lsrs	r1, r1, #23
    54a4:	4a5c      	ldr	r2, [pc, #368]	; (5618 <trx_aes_wrrd+0x238>)
    54a6:	8011      	strh	r1, [r2, #0]
    54a8:	e003      	b.n	54b2 <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    54aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    54ac:	b2c9      	uxtb	r1, r1
    54ae:	4a5a      	ldr	r2, [pc, #360]	; (5618 <trx_aes_wrrd+0x238>)
    54b0:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54b2:	2201      	movs	r2, #1
    54b4:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    54b6:	4211      	tst	r1, r2
    54b8:	d0fc      	beq.n	54b4 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    54ba:	4640      	mov	r0, r8
    54bc:	7801      	ldrb	r1, [r0, #0]
    54be:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    54c0:	07d6      	lsls	r6, r2, #31
    54c2:	d500      	bpl.n	54c6 <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    54c4:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    54c6:	2202      	movs	r2, #2
    54c8:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    54ca:	4211      	tst	r1, r2
    54cc:	d0fc      	beq.n	54c8 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54ce:	2204      	movs	r2, #4
    54d0:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    54d2:	4211      	tst	r1, r2
    54d4:	d0fc      	beq.n	54d0 <trx_aes_wrrd+0xf0>
    54d6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    54d8:	0750      	lsls	r0, r2, #29
    54da:	d50f      	bpl.n	54fc <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    54dc:	8b5a      	ldrh	r2, [r3, #26]
    54de:	0751      	lsls	r1, r2, #29
    54e0:	d503      	bpl.n	54ea <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    54e2:	8b59      	ldrh	r1, [r3, #26]
    54e4:	2204      	movs	r2, #4
    54e6:	430a      	orrs	r2, r1
    54e8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    54ea:	4a48      	ldr	r2, [pc, #288]	; (560c <trx_aes_wrrd+0x22c>)
    54ec:	7992      	ldrb	r2, [r2, #6]
    54ee:	2a01      	cmp	r2, #1
    54f0:	d108      	bne.n	5504 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    54f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    54f4:	05d2      	lsls	r2, r2, #23
    54f6:	0dd2      	lsrs	r2, r2, #23
    54f8:	4b47      	ldr	r3, [pc, #284]	; (5618 <trx_aes_wrrd+0x238>)
    54fa:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    54fc:	2100      	movs	r1, #0
    54fe:	2c00      	cmp	r4, #0
    5500:	d047      	beq.n	5592 <trx_aes_wrrd+0x1b2>
    5502:	e004      	b.n	550e <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5506:	b2d2      	uxtb	r2, r2
    5508:	4b43      	ldr	r3, [pc, #268]	; (5618 <trx_aes_wrrd+0x238>)
    550a:	801a      	strh	r2, [r3, #0]
    550c:	e7f6      	b.n	54fc <trx_aes_wrrd+0x11c>
    550e:	4645      	mov	r5, r8
    5510:	3c01      	subs	r4, #1
    5512:	b2e4      	uxtb	r4, r4
    5514:	9401      	str	r4, [sp, #4]
    5516:	1c23      	adds	r3, r4, #0
    5518:	4443      	add	r3, r8
    551a:	3301      	adds	r3, #1
    551c:	469b      	mov	fp, r3
    551e:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5520:	4b3a      	ldr	r3, [pc, #232]	; (560c <trx_aes_wrrd+0x22c>)
    5522:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5524:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5526:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5528:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    552a:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    552c:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    552e:	4656      	mov	r6, sl
    5530:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5532:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    5534:	4206      	tst	r6, r0
    5536:	d0fc      	beq.n	5532 <trx_aes_wrrd+0x152>
    5538:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    553a:	786e      	ldrb	r6, [r5, #1]
    553c:	46b3      	mov	fp, r6
    553e:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5540:	4206      	tst	r6, r0
    5542:	d001      	beq.n	5548 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5544:	465e      	mov	r6, fp
    5546:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5548:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    554a:	4226      	tst	r6, r4
    554c:	d0fc      	beq.n	5548 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    554e:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    5550:	4216      	tst	r6, r2
    5552:	d0fc      	beq.n	554e <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5554:	464e      	mov	r6, r9
    5556:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5558:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    555a:	4216      	tst	r6, r2
    555c:	d011      	beq.n	5582 <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    555e:	8b59      	ldrh	r1, [r3, #26]
    5560:	4211      	tst	r1, r2
    5562:	d004      	beq.n	556e <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    5564:	8b59      	ldrh	r1, [r3, #26]
    5566:	2604      	movs	r6, #4
    5568:	4331      	orrs	r1, r6
    556a:	b289      	uxth	r1, r1
    556c:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    556e:	4e27      	ldr	r6, [pc, #156]	; (560c <trx_aes_wrrd+0x22c>)
    5570:	79b1      	ldrb	r1, [r6, #6]
    5572:	2901      	cmp	r1, #1
    5574:	d103      	bne.n	557e <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5576:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5578:	05c9      	lsls	r1, r1, #23
    557a:	0dc9      	lsrs	r1, r1, #23
    557c:	e001      	b.n	5582 <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    557e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5580:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    5582:	4663      	mov	r3, ip
    5584:	7019      	strb	r1, [r3, #0]
    5586:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    5588:	42bd      	cmp	r5, r7
    558a:	d1d0      	bne.n	552e <trx_aes_wrrd+0x14e>
    558c:	9b01      	ldr	r3, [sp, #4]
    558e:	3301      	adds	r3, #1
    5590:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5592:	4b1e      	ldr	r3, [pc, #120]	; (560c <trx_aes_wrrd+0x22c>)
    5594:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5596:	2001      	movs	r0, #1
    5598:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    559a:	4202      	tst	r2, r0
    559c:	d0fc      	beq.n	5598 <trx_aes_wrrd+0x1b8>
    559e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    55a0:	07d6      	lsls	r6, r2, #31
    55a2:	d501      	bpl.n	55a8 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    55a4:	2200      	movs	r2, #0
    55a6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    55a8:	2002      	movs	r0, #2
    55aa:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    55ac:	4202      	tst	r2, r0
    55ae:	d0fc      	beq.n	55aa <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    55b0:	2004      	movs	r0, #4
    55b2:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    55b4:	4202      	tst	r2, r0
    55b6:	d0fc      	beq.n	55b2 <trx_aes_wrrd+0x1d2>
    55b8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    55ba:	0750      	lsls	r0, r2, #29
    55bc:	d510      	bpl.n	55e0 <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    55be:	8b5a      	ldrh	r2, [r3, #26]
    55c0:	0751      	lsls	r1, r2, #29
    55c2:	d503      	bpl.n	55cc <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    55c4:	8b59      	ldrh	r1, [r3, #26]
    55c6:	2204      	movs	r2, #4
    55c8:	430a      	orrs	r2, r1
    55ca:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    55cc:	4a0f      	ldr	r2, [pc, #60]	; (560c <trx_aes_wrrd+0x22c>)
    55ce:	7992      	ldrb	r2, [r2, #6]
    55d0:	2a01      	cmp	r2, #1
    55d2:	d103      	bne.n	55dc <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    55d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    55d6:	05c9      	lsls	r1, r1, #23
    55d8:	0dc9      	lsrs	r1, r1, #23
    55da:	e001      	b.n	55e0 <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    55dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    55de:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    55e0:	4642      	mov	r2, r8
    55e2:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    55e4:	4809      	ldr	r0, [pc, #36]	; (560c <trx_aes_wrrd+0x22c>)
    55e6:	490a      	ldr	r1, [pc, #40]	; (5610 <trx_aes_wrrd+0x230>)
    55e8:	2200      	movs	r2, #0
    55ea:	4b0a      	ldr	r3, [pc, #40]	; (5614 <trx_aes_wrrd+0x234>)
    55ec:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    55ee:	2000      	movs	r0, #0
    55f0:	2100      	movs	r1, #0
    55f2:	4b0a      	ldr	r3, [pc, #40]	; (561c <trx_aes_wrrd+0x23c>)
    55f4:	4798      	blx	r3
}
    55f6:	b003      	add	sp, #12
    55f8:	bc3c      	pop	{r2, r3, r4, r5}
    55fa:	4690      	mov	r8, r2
    55fc:	4699      	mov	r9, r3
    55fe:	46a2      	mov	sl, r4
    5600:	46ab      	mov	fp, r5
    5602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5604:	0000014d 	.word	0x0000014d
    5608:	00000309 	.word	0x00000309
    560c:	20000fbc 	.word	0x20000fbc
    5610:	20000f80 	.word	0x20000f80
    5614:	00000c69 	.word	0x00000c69
    5618:	20000f78 	.word	0x20000f78
    561c:	000002e9 	.word	0x000002e9

00005620 <main>:

 #include "wsndemo.h"
 #include "asf.h"

int main(void)
{
    5620:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	
	#if SAMD || SAMR21
	system_init();
    5622:	4b07      	ldr	r3, [pc, #28]	; (5640 <main+0x20>)
    5624:	4798      	blx	r3
	delay_init();
    5626:	4b07      	ldr	r3, [pc, #28]	; (5644 <main+0x24>)
    5628:	4798      	blx	r3
	#else
	sysclk_init();
	board_init();
	#endif
	
	wsndemo_init();
    562a:	4b07      	ldr	r3, [pc, #28]	; (5648 <main+0x28>)
    562c:	4798      	blx	r3
	cpu_irq_enable();
    562e:	2201      	movs	r2, #1
    5630:	4b06      	ldr	r3, [pc, #24]	; (564c <main+0x2c>)
    5632:	701a      	strb	r2, [r3, #0]
    5634:	f3bf 8f5f 	dmb	sy
    5638:	b662      	cpsie	i
	
	while(1)
	{
	wsndemo_task();	
    563a:	4c05      	ldr	r4, [pc, #20]	; (5650 <main+0x30>)
    563c:	47a0      	blx	r4
    563e:	e7fd      	b.n	563c <main+0x1c>
    5640:	00001c0d 	.word	0x00001c0d
    5644:	00000111 	.word	0x00000111
    5648:	000029b1 	.word	0x000029b1
    564c:	20000008 	.word	0x20000008
    5650:	000029e9 	.word	0x000029e9

00005654 <common_tc_delay>:
    5654:	b510      	push	{r4, lr}
    5656:	1c04      	adds	r4, r0, #0
    5658:	4b13      	ldr	r3, [pc, #76]	; (56a8 <common_tc_delay+0x54>)
    565a:	4798      	blx	r3
    565c:	4b13      	ldr	r3, [pc, #76]	; (56ac <common_tc_delay+0x58>)
    565e:	781a      	ldrb	r2, [r3, #0]
    5660:	4362      	muls	r2, r4
    5662:	1881      	adds	r1, r0, r2
    5664:	4b12      	ldr	r3, [pc, #72]	; (56b0 <common_tc_delay+0x5c>)
    5666:	6059      	str	r1, [r3, #4]
    5668:	6859      	ldr	r1, [r3, #4]
    566a:	0c09      	lsrs	r1, r1, #16
    566c:	6059      	str	r1, [r3, #4]
    566e:	685b      	ldr	r3, [r3, #4]
    5670:	2b00      	cmp	r3, #0
    5672:	d007      	beq.n	5684 <common_tc_delay+0x30>
    5674:	4b0e      	ldr	r3, [pc, #56]	; (56b0 <common_tc_delay+0x5c>)
    5676:	6859      	ldr	r1, [r3, #4]
    5678:	3201      	adds	r2, #1
    567a:	1880      	adds	r0, r0, r2
    567c:	8118      	strh	r0, [r3, #8]
    567e:	4b0d      	ldr	r3, [pc, #52]	; (56b4 <common_tc_delay+0x60>)
    5680:	4798      	blx	r3
    5682:	e004      	b.n	568e <common_tc_delay+0x3a>
    5684:	1882      	adds	r2, r0, r2
    5686:	4b0a      	ldr	r3, [pc, #40]	; (56b0 <common_tc_delay+0x5c>)
    5688:	811a      	strh	r2, [r3, #8]
    568a:	4b0b      	ldr	r3, [pc, #44]	; (56b8 <common_tc_delay+0x64>)
    568c:	4798      	blx	r3
    568e:	4b08      	ldr	r3, [pc, #32]	; (56b0 <common_tc_delay+0x5c>)
    5690:	891b      	ldrh	r3, [r3, #8]
    5692:	2b63      	cmp	r3, #99	; 0x63
    5694:	d802      	bhi.n	569c <common_tc_delay+0x48>
    5696:	3364      	adds	r3, #100	; 0x64
    5698:	4a05      	ldr	r2, [pc, #20]	; (56b0 <common_tc_delay+0x5c>)
    569a:	8113      	strh	r3, [r2, #8]
    569c:	4b04      	ldr	r3, [pc, #16]	; (56b0 <common_tc_delay+0x5c>)
    569e:	8918      	ldrh	r0, [r3, #8]
    56a0:	4b06      	ldr	r3, [pc, #24]	; (56bc <common_tc_delay+0x68>)
    56a2:	4798      	blx	r3
    56a4:	bd10      	pop	{r4, pc}
    56a6:	46c0      	nop			; (mov r8, r8)
    56a8:	000047ed 	.word	0x000047ed
    56ac:	20000fc8 	.word	0x20000fc8
    56b0:	20000e20 	.word	0x20000e20
    56b4:	00004801 	.word	0x00004801
    56b8:	00004815 	.word	0x00004815
    56bc:	00004851 	.word	0x00004851

000056c0 <common_tc_init>:
    56c0:	b508      	push	{r3, lr}
    56c2:	2200      	movs	r2, #0
    56c4:	4b03      	ldr	r3, [pc, #12]	; (56d4 <common_tc_init+0x14>)
    56c6:	701a      	strb	r2, [r3, #0]
    56c8:	4b03      	ldr	r3, [pc, #12]	; (56d8 <common_tc_init+0x18>)
    56ca:	4798      	blx	r3
    56cc:	4b03      	ldr	r3, [pc, #12]	; (56dc <common_tc_init+0x1c>)
    56ce:	7018      	strb	r0, [r3, #0]
    56d0:	bd08      	pop	{r3, pc}
    56d2:	46c0      	nop			; (mov r8, r8)
    56d4:	20000e20 	.word	0x20000e20
    56d8:	00004869 	.word	0x00004869
    56dc:	20000fc8 	.word	0x20000fc8

000056e0 <tmr_ovf_callback>:
    56e0:	b508      	push	{r3, lr}
    56e2:	4b0e      	ldr	r3, [pc, #56]	; (571c <tmr_ovf_callback+0x3c>)
    56e4:	685b      	ldr	r3, [r3, #4]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d007      	beq.n	56fa <tmr_ovf_callback+0x1a>
    56ea:	4a0c      	ldr	r2, [pc, #48]	; (571c <tmr_ovf_callback+0x3c>)
    56ec:	6853      	ldr	r3, [r2, #4]
    56ee:	3b01      	subs	r3, #1
    56f0:	6053      	str	r3, [r2, #4]
    56f2:	2b00      	cmp	r3, #0
    56f4:	d101      	bne.n	56fa <tmr_ovf_callback+0x1a>
    56f6:	4b0a      	ldr	r3, [pc, #40]	; (5720 <tmr_ovf_callback+0x40>)
    56f8:	4798      	blx	r3
    56fa:	4a08      	ldr	r2, [pc, #32]	; (571c <tmr_ovf_callback+0x3c>)
    56fc:	7813      	ldrb	r3, [r2, #0]
    56fe:	3301      	adds	r3, #1
    5700:	b2db      	uxtb	r3, r3
    5702:	7013      	strb	r3, [r2, #0]
    5704:	4a07      	ldr	r2, [pc, #28]	; (5724 <tmr_ovf_callback+0x44>)
    5706:	7812      	ldrb	r2, [r2, #0]
    5708:	429a      	cmp	r2, r3
    570a:	d806      	bhi.n	571a <tmr_ovf_callback+0x3a>
    570c:	4b03      	ldr	r3, [pc, #12]	; (571c <tmr_ovf_callback+0x3c>)
    570e:	2200      	movs	r2, #0
    5710:	701a      	strb	r2, [r3, #0]
    5712:	68db      	ldr	r3, [r3, #12]
    5714:	2b00      	cmp	r3, #0
    5716:	d000      	beq.n	571a <tmr_ovf_callback+0x3a>
    5718:	4798      	blx	r3
    571a:	bd08      	pop	{r3, pc}
    571c:	20000e20 	.word	0x20000e20
    5720:	00004815 	.word	0x00004815
    5724:	20000fc8 	.word	0x20000fc8

00005728 <tmr_cca_callback>:
    5728:	b508      	push	{r3, lr}
    572a:	4b04      	ldr	r3, [pc, #16]	; (573c <tmr_cca_callback+0x14>)
    572c:	4798      	blx	r3
    572e:	4b04      	ldr	r3, [pc, #16]	; (5740 <tmr_cca_callback+0x18>)
    5730:	691b      	ldr	r3, [r3, #16]
    5732:	2b00      	cmp	r3, #0
    5734:	d000      	beq.n	5738 <tmr_cca_callback+0x10>
    5736:	4798      	blx	r3
    5738:	bd08      	pop	{r3, pc}
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	00004801 	.word	0x00004801
    5740:	20000e20 	.word	0x20000e20

00005744 <set_common_tc_expiry_callback>:
    5744:	4b01      	ldr	r3, [pc, #4]	; (574c <set_common_tc_expiry_callback+0x8>)
    5746:	6118      	str	r0, [r3, #16]
    5748:	4770      	bx	lr
    574a:	46c0      	nop			; (mov r8, r8)
    574c:	20000e20 	.word	0x20000e20

00005750 <__aeabi_uidiv>:
    5750:	2900      	cmp	r1, #0
    5752:	d034      	beq.n	57be <.udivsi3_skip_div0_test+0x6a>

00005754 <.udivsi3_skip_div0_test>:
    5754:	2301      	movs	r3, #1
    5756:	2200      	movs	r2, #0
    5758:	b410      	push	{r4}
    575a:	4288      	cmp	r0, r1
    575c:	d32c      	bcc.n	57b8 <.udivsi3_skip_div0_test+0x64>
    575e:	2401      	movs	r4, #1
    5760:	0724      	lsls	r4, r4, #28
    5762:	42a1      	cmp	r1, r4
    5764:	d204      	bcs.n	5770 <.udivsi3_skip_div0_test+0x1c>
    5766:	4281      	cmp	r1, r0
    5768:	d202      	bcs.n	5770 <.udivsi3_skip_div0_test+0x1c>
    576a:	0109      	lsls	r1, r1, #4
    576c:	011b      	lsls	r3, r3, #4
    576e:	e7f8      	b.n	5762 <.udivsi3_skip_div0_test+0xe>
    5770:	00e4      	lsls	r4, r4, #3
    5772:	42a1      	cmp	r1, r4
    5774:	d204      	bcs.n	5780 <.udivsi3_skip_div0_test+0x2c>
    5776:	4281      	cmp	r1, r0
    5778:	d202      	bcs.n	5780 <.udivsi3_skip_div0_test+0x2c>
    577a:	0049      	lsls	r1, r1, #1
    577c:	005b      	lsls	r3, r3, #1
    577e:	e7f8      	b.n	5772 <.udivsi3_skip_div0_test+0x1e>
    5780:	4288      	cmp	r0, r1
    5782:	d301      	bcc.n	5788 <.udivsi3_skip_div0_test+0x34>
    5784:	1a40      	subs	r0, r0, r1
    5786:	431a      	orrs	r2, r3
    5788:	084c      	lsrs	r4, r1, #1
    578a:	42a0      	cmp	r0, r4
    578c:	d302      	bcc.n	5794 <.udivsi3_skip_div0_test+0x40>
    578e:	1b00      	subs	r0, r0, r4
    5790:	085c      	lsrs	r4, r3, #1
    5792:	4322      	orrs	r2, r4
    5794:	088c      	lsrs	r4, r1, #2
    5796:	42a0      	cmp	r0, r4
    5798:	d302      	bcc.n	57a0 <.udivsi3_skip_div0_test+0x4c>
    579a:	1b00      	subs	r0, r0, r4
    579c:	089c      	lsrs	r4, r3, #2
    579e:	4322      	orrs	r2, r4
    57a0:	08cc      	lsrs	r4, r1, #3
    57a2:	42a0      	cmp	r0, r4
    57a4:	d302      	bcc.n	57ac <.udivsi3_skip_div0_test+0x58>
    57a6:	1b00      	subs	r0, r0, r4
    57a8:	08dc      	lsrs	r4, r3, #3
    57aa:	4322      	orrs	r2, r4
    57ac:	2800      	cmp	r0, #0
    57ae:	d003      	beq.n	57b8 <.udivsi3_skip_div0_test+0x64>
    57b0:	091b      	lsrs	r3, r3, #4
    57b2:	d001      	beq.n	57b8 <.udivsi3_skip_div0_test+0x64>
    57b4:	0909      	lsrs	r1, r1, #4
    57b6:	e7e3      	b.n	5780 <.udivsi3_skip_div0_test+0x2c>
    57b8:	1c10      	adds	r0, r2, #0
    57ba:	bc10      	pop	{r4}
    57bc:	4770      	bx	lr
    57be:	2800      	cmp	r0, #0
    57c0:	d001      	beq.n	57c6 <.udivsi3_skip_div0_test+0x72>
    57c2:	2000      	movs	r0, #0
    57c4:	43c0      	mvns	r0, r0
    57c6:	b407      	push	{r0, r1, r2}
    57c8:	4802      	ldr	r0, [pc, #8]	; (57d4 <.udivsi3_skip_div0_test+0x80>)
    57ca:	a102      	add	r1, pc, #8	; (adr r1, 57d4 <.udivsi3_skip_div0_test+0x80>)
    57cc:	1840      	adds	r0, r0, r1
    57ce:	9002      	str	r0, [sp, #8]
    57d0:	bd03      	pop	{r0, r1, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	00000019 	.word	0x00000019

000057d8 <__aeabi_uidivmod>:
    57d8:	2900      	cmp	r1, #0
    57da:	d0f0      	beq.n	57be <.udivsi3_skip_div0_test+0x6a>
    57dc:	b503      	push	{r0, r1, lr}
    57de:	f7ff ffb9 	bl	5754 <.udivsi3_skip_div0_test>
    57e2:	bc0e      	pop	{r1, r2, r3}
    57e4:	4342      	muls	r2, r0
    57e6:	1a89      	subs	r1, r1, r2
    57e8:	4718      	bx	r3
    57ea:	46c0      	nop			; (mov r8, r8)

000057ec <__aeabi_idiv0>:
    57ec:	4770      	bx	lr
    57ee:	46c0      	nop			; (mov r8, r8)

000057f0 <__aeabi_lmul>:
    57f0:	469c      	mov	ip, r3
    57f2:	0403      	lsls	r3, r0, #16
    57f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57f6:	0c1b      	lsrs	r3, r3, #16
    57f8:	0417      	lsls	r7, r2, #16
    57fa:	0c3f      	lsrs	r7, r7, #16
    57fc:	0c15      	lsrs	r5, r2, #16
    57fe:	1c1e      	adds	r6, r3, #0
    5800:	1c04      	adds	r4, r0, #0
    5802:	0c00      	lsrs	r0, r0, #16
    5804:	437e      	muls	r6, r7
    5806:	436b      	muls	r3, r5
    5808:	4347      	muls	r7, r0
    580a:	4345      	muls	r5, r0
    580c:	18fb      	adds	r3, r7, r3
    580e:	0c30      	lsrs	r0, r6, #16
    5810:	1818      	adds	r0, r3, r0
    5812:	4287      	cmp	r7, r0
    5814:	d902      	bls.n	581c <__aeabi_lmul+0x2c>
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	025b      	lsls	r3, r3, #9
    581a:	18ed      	adds	r5, r5, r3
    581c:	0c03      	lsrs	r3, r0, #16
    581e:	18ed      	adds	r5, r5, r3
    5820:	4663      	mov	r3, ip
    5822:	435c      	muls	r4, r3
    5824:	434a      	muls	r2, r1
    5826:	0436      	lsls	r6, r6, #16
    5828:	0c36      	lsrs	r6, r6, #16
    582a:	18a1      	adds	r1, r4, r2
    582c:	0400      	lsls	r0, r0, #16
    582e:	1980      	adds	r0, r0, r6
    5830:	1949      	adds	r1, r1, r5
    5832:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005834 <__libc_init_array>:
    5834:	b570      	push	{r4, r5, r6, lr}
    5836:	4b0e      	ldr	r3, [pc, #56]	; (5870 <__libc_init_array+0x3c>)
    5838:	4d0e      	ldr	r5, [pc, #56]	; (5874 <__libc_init_array+0x40>)
    583a:	2400      	movs	r4, #0
    583c:	1aed      	subs	r5, r5, r3
    583e:	10ad      	asrs	r5, r5, #2
    5840:	1c1e      	adds	r6, r3, #0
    5842:	42ac      	cmp	r4, r5
    5844:	d004      	beq.n	5850 <__libc_init_array+0x1c>
    5846:	00a3      	lsls	r3, r4, #2
    5848:	58f3      	ldr	r3, [r6, r3]
    584a:	4798      	blx	r3
    584c:	3401      	adds	r4, #1
    584e:	e7f8      	b.n	5842 <__libc_init_array+0xe>
    5850:	f000 fc96 	bl	6180 <_init>
    5854:	4b08      	ldr	r3, [pc, #32]	; (5878 <__libc_init_array+0x44>)
    5856:	4d09      	ldr	r5, [pc, #36]	; (587c <__libc_init_array+0x48>)
    5858:	2400      	movs	r4, #0
    585a:	1aed      	subs	r5, r5, r3
    585c:	10ad      	asrs	r5, r5, #2
    585e:	1c1e      	adds	r6, r3, #0
    5860:	42ac      	cmp	r4, r5
    5862:	d004      	beq.n	586e <__libc_init_array+0x3a>
    5864:	00a3      	lsls	r3, r4, #2
    5866:	58f3      	ldr	r3, [r6, r3]
    5868:	4798      	blx	r3
    586a:	3401      	adds	r4, #1
    586c:	e7f8      	b.n	5860 <__libc_init_array+0x2c>
    586e:	bd70      	pop	{r4, r5, r6, pc}
    5870:	0000618c 	.word	0x0000618c
    5874:	0000618c 	.word	0x0000618c
    5878:	0000618c 	.word	0x0000618c
    587c:	00006190 	.word	0x00006190

00005880 <memcpy>:
    5880:	b510      	push	{r4, lr}
    5882:	2300      	movs	r3, #0
    5884:	4293      	cmp	r3, r2
    5886:	d003      	beq.n	5890 <memcpy+0x10>
    5888:	5ccc      	ldrb	r4, [r1, r3]
    588a:	54c4      	strb	r4, [r0, r3]
    588c:	3301      	adds	r3, #1
    588e:	e7f9      	b.n	5884 <memcpy+0x4>
    5890:	bd10      	pop	{r4, pc}

00005892 <memset>:
    5892:	1c03      	adds	r3, r0, #0
    5894:	1882      	adds	r2, r0, r2
    5896:	4293      	cmp	r3, r2
    5898:	d002      	beq.n	58a0 <memset+0xe>
    589a:	7019      	strb	r1, [r3, #0]
    589c:	3301      	adds	r3, #1
    589e:	e7fa      	b.n	5896 <memset+0x4>
    58a0:	4770      	bx	lr
	...

000058a4 <srand>:
    58a4:	b538      	push	{r3, r4, r5, lr}
    58a6:	4b10      	ldr	r3, [pc, #64]	; (58e8 <srand+0x44>)
    58a8:	1c05      	adds	r5, r0, #0
    58aa:	681c      	ldr	r4, [r3, #0]
    58ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    58ae:	2b00      	cmp	r3, #0
    58b0:	d115      	bne.n	58de <srand+0x3a>
    58b2:	2018      	movs	r0, #24
    58b4:	f000 fa6a 	bl	5d8c <malloc>
    58b8:	4b0c      	ldr	r3, [pc, #48]	; (58ec <srand+0x48>)
    58ba:	63a0      	str	r0, [r4, #56]	; 0x38
    58bc:	8003      	strh	r3, [r0, #0]
    58be:	4b0c      	ldr	r3, [pc, #48]	; (58f0 <srand+0x4c>)
    58c0:	8043      	strh	r3, [r0, #2]
    58c2:	4b0c      	ldr	r3, [pc, #48]	; (58f4 <srand+0x50>)
    58c4:	8083      	strh	r3, [r0, #4]
    58c6:	4b0c      	ldr	r3, [pc, #48]	; (58f8 <srand+0x54>)
    58c8:	80c3      	strh	r3, [r0, #6]
    58ca:	4b0c      	ldr	r3, [pc, #48]	; (58fc <srand+0x58>)
    58cc:	8103      	strh	r3, [r0, #8]
    58ce:	2305      	movs	r3, #5
    58d0:	8143      	strh	r3, [r0, #10]
    58d2:	230b      	movs	r3, #11
    58d4:	8183      	strh	r3, [r0, #12]
    58d6:	2201      	movs	r2, #1
    58d8:	2300      	movs	r3, #0
    58da:	6102      	str	r2, [r0, #16]
    58dc:	6143      	str	r3, [r0, #20]
    58de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    58e0:	2200      	movs	r2, #0
    58e2:	611d      	str	r5, [r3, #16]
    58e4:	615a      	str	r2, [r3, #20]
    58e6:	bd38      	pop	{r3, r4, r5, pc}
    58e8:	2000006c 	.word	0x2000006c
    58ec:	0000330e 	.word	0x0000330e
    58f0:	ffffabcd 	.word	0xffffabcd
    58f4:	00001234 	.word	0x00001234
    58f8:	ffffe66d 	.word	0xffffe66d
    58fc:	ffffdeec 	.word	0xffffdeec

00005900 <rand>:
    5900:	4b17      	ldr	r3, [pc, #92]	; (5960 <rand+0x60>)
    5902:	b510      	push	{r4, lr}
    5904:	681c      	ldr	r4, [r3, #0]
    5906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5908:	2b00      	cmp	r3, #0
    590a:	d115      	bne.n	5938 <rand+0x38>
    590c:	2018      	movs	r0, #24
    590e:	f000 fa3d 	bl	5d8c <malloc>
    5912:	4b14      	ldr	r3, [pc, #80]	; (5964 <rand+0x64>)
    5914:	63a0      	str	r0, [r4, #56]	; 0x38
    5916:	8003      	strh	r3, [r0, #0]
    5918:	4b13      	ldr	r3, [pc, #76]	; (5968 <rand+0x68>)
    591a:	8043      	strh	r3, [r0, #2]
    591c:	4b13      	ldr	r3, [pc, #76]	; (596c <rand+0x6c>)
    591e:	8083      	strh	r3, [r0, #4]
    5920:	4b13      	ldr	r3, [pc, #76]	; (5970 <rand+0x70>)
    5922:	80c3      	strh	r3, [r0, #6]
    5924:	4b13      	ldr	r3, [pc, #76]	; (5974 <rand+0x74>)
    5926:	8103      	strh	r3, [r0, #8]
    5928:	2305      	movs	r3, #5
    592a:	8143      	strh	r3, [r0, #10]
    592c:	230b      	movs	r3, #11
    592e:	8183      	strh	r3, [r0, #12]
    5930:	2201      	movs	r2, #1
    5932:	2300      	movs	r3, #0
    5934:	6102      	str	r2, [r0, #16]
    5936:	6143      	str	r3, [r0, #20]
    5938:	4b08      	ldr	r3, [pc, #32]	; (595c <rand+0x5c>)
    593a:	4a07      	ldr	r2, [pc, #28]	; (5958 <rand+0x58>)
    593c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    593e:	6920      	ldr	r0, [r4, #16]
    5940:	6961      	ldr	r1, [r4, #20]
    5942:	f7ff ff55 	bl	57f0 <__aeabi_lmul>
    5946:	2201      	movs	r2, #1
    5948:	2300      	movs	r3, #0
    594a:	1880      	adds	r0, r0, r2
    594c:	4159      	adcs	r1, r3
    594e:	6120      	str	r0, [r4, #16]
    5950:	6161      	str	r1, [r4, #20]
    5952:	0048      	lsls	r0, r1, #1
    5954:	0840      	lsrs	r0, r0, #1
    5956:	bd10      	pop	{r4, pc}
    5958:	4c957f2d 	.word	0x4c957f2d
    595c:	5851f42d 	.word	0x5851f42d
    5960:	2000006c 	.word	0x2000006c
    5964:	0000330e 	.word	0x0000330e
    5968:	ffffabcd 	.word	0xffffabcd
    596c:	00001234 	.word	0x00001234
    5970:	ffffe66d 	.word	0xffffe66d
    5974:	ffffdeec 	.word	0xffffdeec

00005978 <setbuf>:
    5978:	b508      	push	{r3, lr}
    597a:	424a      	negs	r2, r1
    597c:	414a      	adcs	r2, r1
    597e:	2380      	movs	r3, #128	; 0x80
    5980:	0052      	lsls	r2, r2, #1
    5982:	00db      	lsls	r3, r3, #3
    5984:	f000 f802 	bl	598c <setvbuf>
    5988:	bd08      	pop	{r3, pc}
	...

0000598c <setvbuf>:
    598c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    598e:	1c1e      	adds	r6, r3, #0
    5990:	4b3c      	ldr	r3, [pc, #240]	; (5a84 <setvbuf+0xf8>)
    5992:	1c04      	adds	r4, r0, #0
    5994:	681d      	ldr	r5, [r3, #0]
    5996:	1c0f      	adds	r7, r1, #0
    5998:	9201      	str	r2, [sp, #4]
    599a:	2d00      	cmp	r5, #0
    599c:	d005      	beq.n	59aa <setvbuf+0x1e>
    599e:	69aa      	ldr	r2, [r5, #24]
    59a0:	2a00      	cmp	r2, #0
    59a2:	d102      	bne.n	59aa <setvbuf+0x1e>
    59a4:	1c28      	adds	r0, r5, #0
    59a6:	f000 f981 	bl	5cac <__sinit>
    59aa:	4b37      	ldr	r3, [pc, #220]	; (5a88 <setvbuf+0xfc>)
    59ac:	429c      	cmp	r4, r3
    59ae:	d101      	bne.n	59b4 <setvbuf+0x28>
    59b0:	686c      	ldr	r4, [r5, #4]
    59b2:	e008      	b.n	59c6 <setvbuf+0x3a>
    59b4:	4b35      	ldr	r3, [pc, #212]	; (5a8c <setvbuf+0x100>)
    59b6:	429c      	cmp	r4, r3
    59b8:	d101      	bne.n	59be <setvbuf+0x32>
    59ba:	68ac      	ldr	r4, [r5, #8]
    59bc:	e003      	b.n	59c6 <setvbuf+0x3a>
    59be:	4b34      	ldr	r3, [pc, #208]	; (5a90 <setvbuf+0x104>)
    59c0:	429c      	cmp	r4, r3
    59c2:	d100      	bne.n	59c6 <setvbuf+0x3a>
    59c4:	68ec      	ldr	r4, [r5, #12]
    59c6:	9b01      	ldr	r3, [sp, #4]
    59c8:	2b02      	cmp	r3, #2
    59ca:	d857      	bhi.n	5a7c <setvbuf+0xf0>
    59cc:	2e00      	cmp	r6, #0
    59ce:	db55      	blt.n	5a7c <setvbuf+0xf0>
    59d0:	1c28      	adds	r0, r5, #0
    59d2:	1c21      	adds	r1, r4, #0
    59d4:	f000 f8ea 	bl	5bac <_fflush_r>
    59d8:	2300      	movs	r3, #0
    59da:	6063      	str	r3, [r4, #4]
    59dc:	61a3      	str	r3, [r4, #24]
    59de:	89a3      	ldrh	r3, [r4, #12]
    59e0:	061a      	lsls	r2, r3, #24
    59e2:	d503      	bpl.n	59ec <setvbuf+0x60>
    59e4:	1c28      	adds	r0, r5, #0
    59e6:	6921      	ldr	r1, [r4, #16]
    59e8:	f000 f9da 	bl	5da0 <_free_r>
    59ec:	89a3      	ldrh	r3, [r4, #12]
    59ee:	2283      	movs	r2, #131	; 0x83
    59f0:	4393      	bics	r3, r2
    59f2:	81a3      	strh	r3, [r4, #12]
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	2b02      	cmp	r3, #2
    59f8:	d013      	beq.n	5a22 <setvbuf+0x96>
    59fa:	2f00      	cmp	r7, #0
    59fc:	d125      	bne.n	5a4a <setvbuf+0xbe>
    59fe:	2e00      	cmp	r6, #0
    5a00:	d101      	bne.n	5a06 <setvbuf+0x7a>
    5a02:	2680      	movs	r6, #128	; 0x80
    5a04:	00f6      	lsls	r6, r6, #3
    5a06:	1c30      	adds	r0, r6, #0
    5a08:	f000 f9c0 	bl	5d8c <malloc>
    5a0c:	1e07      	subs	r7, r0, #0
    5a0e:	d118      	bne.n	5a42 <setvbuf+0xb6>
    5a10:	2080      	movs	r0, #128	; 0x80
    5a12:	00c0      	lsls	r0, r0, #3
    5a14:	f000 f9ba 	bl	5d8c <malloc>
    5a18:	1e07      	subs	r7, r0, #0
    5a1a:	d110      	bne.n	5a3e <setvbuf+0xb2>
    5a1c:	2001      	movs	r0, #1
    5a1e:	4240      	negs	r0, r0
    5a20:	e000      	b.n	5a24 <setvbuf+0x98>
    5a22:	2000      	movs	r0, #0
    5a24:	89a3      	ldrh	r3, [r4, #12]
    5a26:	2202      	movs	r2, #2
    5a28:	4313      	orrs	r3, r2
    5a2a:	81a3      	strh	r3, [r4, #12]
    5a2c:	2300      	movs	r3, #0
    5a2e:	60a3      	str	r3, [r4, #8]
    5a30:	1c23      	adds	r3, r4, #0
    5a32:	3347      	adds	r3, #71	; 0x47
    5a34:	6023      	str	r3, [r4, #0]
    5a36:	6123      	str	r3, [r4, #16]
    5a38:	2301      	movs	r3, #1
    5a3a:	6163      	str	r3, [r4, #20]
    5a3c:	e020      	b.n	5a80 <setvbuf+0xf4>
    5a3e:	2680      	movs	r6, #128	; 0x80
    5a40:	00f6      	lsls	r6, r6, #3
    5a42:	89a3      	ldrh	r3, [r4, #12]
    5a44:	2280      	movs	r2, #128	; 0x80
    5a46:	4313      	orrs	r3, r2
    5a48:	81a3      	strh	r3, [r4, #12]
    5a4a:	9a01      	ldr	r2, [sp, #4]
    5a4c:	2a01      	cmp	r2, #1
    5a4e:	d104      	bne.n	5a5a <setvbuf+0xce>
    5a50:	89a3      	ldrh	r3, [r4, #12]
    5a52:	4313      	orrs	r3, r2
    5a54:	81a3      	strh	r3, [r4, #12]
    5a56:	4273      	negs	r3, r6
    5a58:	61a3      	str	r3, [r4, #24]
    5a5a:	4b0e      	ldr	r3, [pc, #56]	; (5a94 <setvbuf+0x108>)
    5a5c:	2000      	movs	r0, #0
    5a5e:	62ab      	str	r3, [r5, #40]	; 0x28
    5a60:	89a3      	ldrh	r3, [r4, #12]
    5a62:	6027      	str	r7, [r4, #0]
    5a64:	6127      	str	r7, [r4, #16]
    5a66:	6166      	str	r6, [r4, #20]
    5a68:	071a      	lsls	r2, r3, #28
    5a6a:	d509      	bpl.n	5a80 <setvbuf+0xf4>
    5a6c:	2203      	movs	r2, #3
    5a6e:	4013      	ands	r3, r2
    5a70:	425a      	negs	r2, r3
    5a72:	4153      	adcs	r3, r2
    5a74:	425b      	negs	r3, r3
    5a76:	401e      	ands	r6, r3
    5a78:	60a6      	str	r6, [r4, #8]
    5a7a:	e001      	b.n	5a80 <setvbuf+0xf4>
    5a7c:	2001      	movs	r0, #1
    5a7e:	4240      	negs	r0, r0
    5a80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	2000006c 	.word	0x2000006c
    5a88:	00006120 	.word	0x00006120
    5a8c:	00006140 	.word	0x00006140
    5a90:	00006160 	.word	0x00006160
    5a94:	00005c05 	.word	0x00005c05

00005a98 <__sflush_r>:
    5a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5a9a:	898b      	ldrh	r3, [r1, #12]
    5a9c:	1c05      	adds	r5, r0, #0
    5a9e:	1c0c      	adds	r4, r1, #0
    5aa0:	0719      	lsls	r1, r3, #28
    5aa2:	d45e      	bmi.n	5b62 <__sflush_r+0xca>
    5aa4:	6862      	ldr	r2, [r4, #4]
    5aa6:	2a00      	cmp	r2, #0
    5aa8:	dc02      	bgt.n	5ab0 <__sflush_r+0x18>
    5aaa:	6c27      	ldr	r7, [r4, #64]	; 0x40
    5aac:	2f00      	cmp	r7, #0
    5aae:	dd1a      	ble.n	5ae6 <__sflush_r+0x4e>
    5ab0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5ab2:	2f00      	cmp	r7, #0
    5ab4:	d017      	beq.n	5ae6 <__sflush_r+0x4e>
    5ab6:	2200      	movs	r2, #0
    5ab8:	682e      	ldr	r6, [r5, #0]
    5aba:	602a      	str	r2, [r5, #0]
    5abc:	2280      	movs	r2, #128	; 0x80
    5abe:	0152      	lsls	r2, r2, #5
    5ac0:	401a      	ands	r2, r3
    5ac2:	d001      	beq.n	5ac8 <__sflush_r+0x30>
    5ac4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5ac6:	e015      	b.n	5af4 <__sflush_r+0x5c>
    5ac8:	1c28      	adds	r0, r5, #0
    5aca:	6a21      	ldr	r1, [r4, #32]
    5acc:	2301      	movs	r3, #1
    5ace:	47b8      	blx	r7
    5ad0:	1c02      	adds	r2, r0, #0
    5ad2:	1c41      	adds	r1, r0, #1
    5ad4:	d10e      	bne.n	5af4 <__sflush_r+0x5c>
    5ad6:	682b      	ldr	r3, [r5, #0]
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d00b      	beq.n	5af4 <__sflush_r+0x5c>
    5adc:	2b1d      	cmp	r3, #29
    5ade:	d001      	beq.n	5ae4 <__sflush_r+0x4c>
    5ae0:	2b16      	cmp	r3, #22
    5ae2:	d102      	bne.n	5aea <__sflush_r+0x52>
    5ae4:	602e      	str	r6, [r5, #0]
    5ae6:	2000      	movs	r0, #0
    5ae8:	e05e      	b.n	5ba8 <__sflush_r+0x110>
    5aea:	89a3      	ldrh	r3, [r4, #12]
    5aec:	2140      	movs	r1, #64	; 0x40
    5aee:	430b      	orrs	r3, r1
    5af0:	81a3      	strh	r3, [r4, #12]
    5af2:	e059      	b.n	5ba8 <__sflush_r+0x110>
    5af4:	89a3      	ldrh	r3, [r4, #12]
    5af6:	075f      	lsls	r7, r3, #29
    5af8:	d506      	bpl.n	5b08 <__sflush_r+0x70>
    5afa:	6861      	ldr	r1, [r4, #4]
    5afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5afe:	1a52      	subs	r2, r2, r1
    5b00:	2b00      	cmp	r3, #0
    5b02:	d001      	beq.n	5b08 <__sflush_r+0x70>
    5b04:	6c27      	ldr	r7, [r4, #64]	; 0x40
    5b06:	1bd2      	subs	r2, r2, r7
    5b08:	1c28      	adds	r0, r5, #0
    5b0a:	6a21      	ldr	r1, [r4, #32]
    5b0c:	2300      	movs	r3, #0
    5b0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5b10:	47b8      	blx	r7
    5b12:	89a2      	ldrh	r2, [r4, #12]
    5b14:	1c41      	adds	r1, r0, #1
    5b16:	d106      	bne.n	5b26 <__sflush_r+0x8e>
    5b18:	682b      	ldr	r3, [r5, #0]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d003      	beq.n	5b26 <__sflush_r+0x8e>
    5b1e:	2b1d      	cmp	r3, #29
    5b20:	d001      	beq.n	5b26 <__sflush_r+0x8e>
    5b22:	2b16      	cmp	r3, #22
    5b24:	d119      	bne.n	5b5a <__sflush_r+0xc2>
    5b26:	2300      	movs	r3, #0
    5b28:	6063      	str	r3, [r4, #4]
    5b2a:	6923      	ldr	r3, [r4, #16]
    5b2c:	6023      	str	r3, [r4, #0]
    5b2e:	04d7      	lsls	r7, r2, #19
    5b30:	d505      	bpl.n	5b3e <__sflush_r+0xa6>
    5b32:	1c41      	adds	r1, r0, #1
    5b34:	d102      	bne.n	5b3c <__sflush_r+0xa4>
    5b36:	682a      	ldr	r2, [r5, #0]
    5b38:	2a00      	cmp	r2, #0
    5b3a:	d100      	bne.n	5b3e <__sflush_r+0xa6>
    5b3c:	6560      	str	r0, [r4, #84]	; 0x54
    5b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5b40:	602e      	str	r6, [r5, #0]
    5b42:	2900      	cmp	r1, #0
    5b44:	d0cf      	beq.n	5ae6 <__sflush_r+0x4e>
    5b46:	1c23      	adds	r3, r4, #0
    5b48:	3344      	adds	r3, #68	; 0x44
    5b4a:	4299      	cmp	r1, r3
    5b4c:	d002      	beq.n	5b54 <__sflush_r+0xbc>
    5b4e:	1c28      	adds	r0, r5, #0
    5b50:	f000 f926 	bl	5da0 <_free_r>
    5b54:	2000      	movs	r0, #0
    5b56:	6360      	str	r0, [r4, #52]	; 0x34
    5b58:	e026      	b.n	5ba8 <__sflush_r+0x110>
    5b5a:	2340      	movs	r3, #64	; 0x40
    5b5c:	431a      	orrs	r2, r3
    5b5e:	81a2      	strh	r2, [r4, #12]
    5b60:	e022      	b.n	5ba8 <__sflush_r+0x110>
    5b62:	6926      	ldr	r6, [r4, #16]
    5b64:	2e00      	cmp	r6, #0
    5b66:	d0be      	beq.n	5ae6 <__sflush_r+0x4e>
    5b68:	6827      	ldr	r7, [r4, #0]
    5b6a:	2200      	movs	r2, #0
    5b6c:	1bbf      	subs	r7, r7, r6
    5b6e:	9701      	str	r7, [sp, #4]
    5b70:	6026      	str	r6, [r4, #0]
    5b72:	0799      	lsls	r1, r3, #30
    5b74:	d100      	bne.n	5b78 <__sflush_r+0xe0>
    5b76:	6962      	ldr	r2, [r4, #20]
    5b78:	60a2      	str	r2, [r4, #8]
    5b7a:	9f01      	ldr	r7, [sp, #4]
    5b7c:	2f00      	cmp	r7, #0
    5b7e:	ddb2      	ble.n	5ae6 <__sflush_r+0x4e>
    5b80:	1c28      	adds	r0, r5, #0
    5b82:	6a21      	ldr	r1, [r4, #32]
    5b84:	1c32      	adds	r2, r6, #0
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    5b8a:	47b8      	blx	r7
    5b8c:	2800      	cmp	r0, #0
    5b8e:	dc06      	bgt.n	5b9e <__sflush_r+0x106>
    5b90:	89a3      	ldrh	r3, [r4, #12]
    5b92:	2240      	movs	r2, #64	; 0x40
    5b94:	4313      	orrs	r3, r2
    5b96:	2001      	movs	r0, #1
    5b98:	81a3      	strh	r3, [r4, #12]
    5b9a:	4240      	negs	r0, r0
    5b9c:	e004      	b.n	5ba8 <__sflush_r+0x110>
    5b9e:	9f01      	ldr	r7, [sp, #4]
    5ba0:	1836      	adds	r6, r6, r0
    5ba2:	1a3f      	subs	r7, r7, r0
    5ba4:	9701      	str	r7, [sp, #4]
    5ba6:	e7e8      	b.n	5b7a <__sflush_r+0xe2>
    5ba8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005bac <_fflush_r>:
    5bac:	690a      	ldr	r2, [r1, #16]
    5bae:	b538      	push	{r3, r4, r5, lr}
    5bb0:	1c05      	adds	r5, r0, #0
    5bb2:	1c0c      	adds	r4, r1, #0
    5bb4:	2a00      	cmp	r2, #0
    5bb6:	d101      	bne.n	5bbc <_fflush_r+0x10>
    5bb8:	2000      	movs	r0, #0
    5bba:	e01c      	b.n	5bf6 <_fflush_r+0x4a>
    5bbc:	2800      	cmp	r0, #0
    5bbe:	d004      	beq.n	5bca <_fflush_r+0x1e>
    5bc0:	6983      	ldr	r3, [r0, #24]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d101      	bne.n	5bca <_fflush_r+0x1e>
    5bc6:	f000 f871 	bl	5cac <__sinit>
    5bca:	4b0b      	ldr	r3, [pc, #44]	; (5bf8 <_fflush_r+0x4c>)
    5bcc:	429c      	cmp	r4, r3
    5bce:	d101      	bne.n	5bd4 <_fflush_r+0x28>
    5bd0:	686c      	ldr	r4, [r5, #4]
    5bd2:	e008      	b.n	5be6 <_fflush_r+0x3a>
    5bd4:	4b09      	ldr	r3, [pc, #36]	; (5bfc <_fflush_r+0x50>)
    5bd6:	429c      	cmp	r4, r3
    5bd8:	d101      	bne.n	5bde <_fflush_r+0x32>
    5bda:	68ac      	ldr	r4, [r5, #8]
    5bdc:	e003      	b.n	5be6 <_fflush_r+0x3a>
    5bde:	4b08      	ldr	r3, [pc, #32]	; (5c00 <_fflush_r+0x54>)
    5be0:	429c      	cmp	r4, r3
    5be2:	d100      	bne.n	5be6 <_fflush_r+0x3a>
    5be4:	68ec      	ldr	r4, [r5, #12]
    5be6:	220c      	movs	r2, #12
    5be8:	5ea3      	ldrsh	r3, [r4, r2]
    5bea:	2b00      	cmp	r3, #0
    5bec:	d0e4      	beq.n	5bb8 <_fflush_r+0xc>
    5bee:	1c28      	adds	r0, r5, #0
    5bf0:	1c21      	adds	r1, r4, #0
    5bf2:	f7ff ff51 	bl	5a98 <__sflush_r>
    5bf6:	bd38      	pop	{r3, r4, r5, pc}
    5bf8:	00006120 	.word	0x00006120
    5bfc:	00006140 	.word	0x00006140
    5c00:	00006160 	.word	0x00006160

00005c04 <_cleanup_r>:
    5c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c06:	1c04      	adds	r4, r0, #0
    5c08:	1c07      	adds	r7, r0, #0
    5c0a:	3448      	adds	r4, #72	; 0x48
    5c0c:	2c00      	cmp	r4, #0
    5c0e:	d012      	beq.n	5c36 <_cleanup_r+0x32>
    5c10:	68a5      	ldr	r5, [r4, #8]
    5c12:	6866      	ldr	r6, [r4, #4]
    5c14:	3e01      	subs	r6, #1
    5c16:	d40c      	bmi.n	5c32 <_cleanup_r+0x2e>
    5c18:	89ab      	ldrh	r3, [r5, #12]
    5c1a:	2b01      	cmp	r3, #1
    5c1c:	d907      	bls.n	5c2e <_cleanup_r+0x2a>
    5c1e:	220e      	movs	r2, #14
    5c20:	5eab      	ldrsh	r3, [r5, r2]
    5c22:	3301      	adds	r3, #1
    5c24:	d003      	beq.n	5c2e <_cleanup_r+0x2a>
    5c26:	1c38      	adds	r0, r7, #0
    5c28:	1c29      	adds	r1, r5, #0
    5c2a:	f7ff ffbf 	bl	5bac <_fflush_r>
    5c2e:	3568      	adds	r5, #104	; 0x68
    5c30:	e7f0      	b.n	5c14 <_cleanup_r+0x10>
    5c32:	6824      	ldr	r4, [r4, #0]
    5c34:	e7ea      	b.n	5c0c <_cleanup_r+0x8>
    5c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005c38 <std.isra.0>:
    5c38:	2300      	movs	r3, #0
    5c3a:	b510      	push	{r4, lr}
    5c3c:	1c04      	adds	r4, r0, #0
    5c3e:	6003      	str	r3, [r0, #0]
    5c40:	6043      	str	r3, [r0, #4]
    5c42:	6083      	str	r3, [r0, #8]
    5c44:	8181      	strh	r1, [r0, #12]
    5c46:	6643      	str	r3, [r0, #100]	; 0x64
    5c48:	81c2      	strh	r2, [r0, #14]
    5c4a:	6103      	str	r3, [r0, #16]
    5c4c:	6143      	str	r3, [r0, #20]
    5c4e:	6183      	str	r3, [r0, #24]
    5c50:	1c19      	adds	r1, r3, #0
    5c52:	2208      	movs	r2, #8
    5c54:	305c      	adds	r0, #92	; 0x5c
    5c56:	f7ff fe1c 	bl	5892 <memset>
    5c5a:	4b05      	ldr	r3, [pc, #20]	; (5c70 <std.isra.0+0x38>)
    5c5c:	6224      	str	r4, [r4, #32]
    5c5e:	6263      	str	r3, [r4, #36]	; 0x24
    5c60:	4b04      	ldr	r3, [pc, #16]	; (5c74 <std.isra.0+0x3c>)
    5c62:	62a3      	str	r3, [r4, #40]	; 0x28
    5c64:	4b04      	ldr	r3, [pc, #16]	; (5c78 <std.isra.0+0x40>)
    5c66:	62e3      	str	r3, [r4, #44]	; 0x2c
    5c68:	4b04      	ldr	r3, [pc, #16]	; (5c7c <std.isra.0+0x44>)
    5c6a:	6323      	str	r3, [r4, #48]	; 0x30
    5c6c:	bd10      	pop	{r4, pc}
    5c6e:	46c0      	nop			; (mov r8, r8)
    5c70:	00005efd 	.word	0x00005efd
    5c74:	00005f25 	.word	0x00005f25
    5c78:	00005f5d 	.word	0x00005f5d
    5c7c:	00005f89 	.word	0x00005f89

00005c80 <__sfmoreglue>:
    5c80:	b570      	push	{r4, r5, r6, lr}
    5c82:	1e4b      	subs	r3, r1, #1
    5c84:	2568      	movs	r5, #104	; 0x68
    5c86:	435d      	muls	r5, r3
    5c88:	1c0e      	adds	r6, r1, #0
    5c8a:	1c29      	adds	r1, r5, #0
    5c8c:	3174      	adds	r1, #116	; 0x74
    5c8e:	f000 f8cf 	bl	5e30 <_malloc_r>
    5c92:	1e04      	subs	r4, r0, #0
    5c94:	d008      	beq.n	5ca8 <__sfmoreglue+0x28>
    5c96:	2100      	movs	r1, #0
    5c98:	6001      	str	r1, [r0, #0]
    5c9a:	6046      	str	r6, [r0, #4]
    5c9c:	1c2a      	adds	r2, r5, #0
    5c9e:	300c      	adds	r0, #12
    5ca0:	60a0      	str	r0, [r4, #8]
    5ca2:	3268      	adds	r2, #104	; 0x68
    5ca4:	f7ff fdf5 	bl	5892 <memset>
    5ca8:	1c20      	adds	r0, r4, #0
    5caa:	bd70      	pop	{r4, r5, r6, pc}

00005cac <__sinit>:
    5cac:	6983      	ldr	r3, [r0, #24]
    5cae:	b513      	push	{r0, r1, r4, lr}
    5cb0:	1c04      	adds	r4, r0, #0
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d127      	bne.n	5d06 <__sinit+0x5a>
    5cb6:	6483      	str	r3, [r0, #72]	; 0x48
    5cb8:	64c3      	str	r3, [r0, #76]	; 0x4c
    5cba:	6503      	str	r3, [r0, #80]	; 0x50
    5cbc:	4b12      	ldr	r3, [pc, #72]	; (5d08 <__sinit+0x5c>)
    5cbe:	4a13      	ldr	r2, [pc, #76]	; (5d0c <__sinit+0x60>)
    5cc0:	681b      	ldr	r3, [r3, #0]
    5cc2:	6282      	str	r2, [r0, #40]	; 0x28
    5cc4:	4298      	cmp	r0, r3
    5cc6:	d101      	bne.n	5ccc <__sinit+0x20>
    5cc8:	2301      	movs	r3, #1
    5cca:	6183      	str	r3, [r0, #24]
    5ccc:	1c20      	adds	r0, r4, #0
    5cce:	f000 f81f 	bl	5d10 <__sfp>
    5cd2:	6060      	str	r0, [r4, #4]
    5cd4:	1c20      	adds	r0, r4, #0
    5cd6:	f000 f81b 	bl	5d10 <__sfp>
    5cda:	60a0      	str	r0, [r4, #8]
    5cdc:	1c20      	adds	r0, r4, #0
    5cde:	f000 f817 	bl	5d10 <__sfp>
    5ce2:	2104      	movs	r1, #4
    5ce4:	60e0      	str	r0, [r4, #12]
    5ce6:	2200      	movs	r2, #0
    5ce8:	6860      	ldr	r0, [r4, #4]
    5cea:	f7ff ffa5 	bl	5c38 <std.isra.0>
    5cee:	68a0      	ldr	r0, [r4, #8]
    5cf0:	2109      	movs	r1, #9
    5cf2:	2201      	movs	r2, #1
    5cf4:	f7ff ffa0 	bl	5c38 <std.isra.0>
    5cf8:	68e0      	ldr	r0, [r4, #12]
    5cfa:	2112      	movs	r1, #18
    5cfc:	2202      	movs	r2, #2
    5cfe:	f7ff ff9b 	bl	5c38 <std.isra.0>
    5d02:	2301      	movs	r3, #1
    5d04:	61a3      	str	r3, [r4, #24]
    5d06:	bd13      	pop	{r0, r1, r4, pc}
    5d08:	0000611c 	.word	0x0000611c
    5d0c:	00005c05 	.word	0x00005c05

00005d10 <__sfp>:
    5d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d12:	4b1d      	ldr	r3, [pc, #116]	; (5d88 <__sfp+0x78>)
    5d14:	1c07      	adds	r7, r0, #0
    5d16:	681e      	ldr	r6, [r3, #0]
    5d18:	69b2      	ldr	r2, [r6, #24]
    5d1a:	2a00      	cmp	r2, #0
    5d1c:	d102      	bne.n	5d24 <__sfp+0x14>
    5d1e:	1c30      	adds	r0, r6, #0
    5d20:	f7ff ffc4 	bl	5cac <__sinit>
    5d24:	3648      	adds	r6, #72	; 0x48
    5d26:	68b4      	ldr	r4, [r6, #8]
    5d28:	6873      	ldr	r3, [r6, #4]
    5d2a:	3b01      	subs	r3, #1
    5d2c:	d405      	bmi.n	5d3a <__sfp+0x2a>
    5d2e:	220c      	movs	r2, #12
    5d30:	5ea5      	ldrsh	r5, [r4, r2]
    5d32:	2d00      	cmp	r5, #0
    5d34:	d010      	beq.n	5d58 <__sfp+0x48>
    5d36:	3468      	adds	r4, #104	; 0x68
    5d38:	e7f7      	b.n	5d2a <__sfp+0x1a>
    5d3a:	6833      	ldr	r3, [r6, #0]
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d106      	bne.n	5d4e <__sfp+0x3e>
    5d40:	1c38      	adds	r0, r7, #0
    5d42:	2104      	movs	r1, #4
    5d44:	f7ff ff9c 	bl	5c80 <__sfmoreglue>
    5d48:	6030      	str	r0, [r6, #0]
    5d4a:	2800      	cmp	r0, #0
    5d4c:	d001      	beq.n	5d52 <__sfp+0x42>
    5d4e:	6836      	ldr	r6, [r6, #0]
    5d50:	e7e9      	b.n	5d26 <__sfp+0x16>
    5d52:	230c      	movs	r3, #12
    5d54:	603b      	str	r3, [r7, #0]
    5d56:	e016      	b.n	5d86 <__sfp+0x76>
    5d58:	2301      	movs	r3, #1
    5d5a:	425b      	negs	r3, r3
    5d5c:	81e3      	strh	r3, [r4, #14]
    5d5e:	1c20      	adds	r0, r4, #0
    5d60:	2301      	movs	r3, #1
    5d62:	81a3      	strh	r3, [r4, #12]
    5d64:	6665      	str	r5, [r4, #100]	; 0x64
    5d66:	6025      	str	r5, [r4, #0]
    5d68:	60a5      	str	r5, [r4, #8]
    5d6a:	6065      	str	r5, [r4, #4]
    5d6c:	6125      	str	r5, [r4, #16]
    5d6e:	6165      	str	r5, [r4, #20]
    5d70:	61a5      	str	r5, [r4, #24]
    5d72:	305c      	adds	r0, #92	; 0x5c
    5d74:	1c29      	adds	r1, r5, #0
    5d76:	2208      	movs	r2, #8
    5d78:	f7ff fd8b 	bl	5892 <memset>
    5d7c:	6365      	str	r5, [r4, #52]	; 0x34
    5d7e:	63a5      	str	r5, [r4, #56]	; 0x38
    5d80:	64a5      	str	r5, [r4, #72]	; 0x48
    5d82:	64e5      	str	r5, [r4, #76]	; 0x4c
    5d84:	1c20      	adds	r0, r4, #0
    5d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d88:	0000611c 	.word	0x0000611c

00005d8c <malloc>:
    5d8c:	b508      	push	{r3, lr}
    5d8e:	4b03      	ldr	r3, [pc, #12]	; (5d9c <malloc+0x10>)
    5d90:	1c01      	adds	r1, r0, #0
    5d92:	6818      	ldr	r0, [r3, #0]
    5d94:	f000 f84c 	bl	5e30 <_malloc_r>
    5d98:	bd08      	pop	{r3, pc}
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	2000006c 	.word	0x2000006c

00005da0 <_free_r>:
    5da0:	b530      	push	{r4, r5, lr}
    5da2:	2900      	cmp	r1, #0
    5da4:	d040      	beq.n	5e28 <_free_r+0x88>
    5da6:	3904      	subs	r1, #4
    5da8:	680b      	ldr	r3, [r1, #0]
    5daa:	2b00      	cmp	r3, #0
    5dac:	da00      	bge.n	5db0 <_free_r+0x10>
    5dae:	18c9      	adds	r1, r1, r3
    5db0:	4a1e      	ldr	r2, [pc, #120]	; (5e2c <_free_r+0x8c>)
    5db2:	6813      	ldr	r3, [r2, #0]
    5db4:	1c14      	adds	r4, r2, #0
    5db6:	2b00      	cmp	r3, #0
    5db8:	d102      	bne.n	5dc0 <_free_r+0x20>
    5dba:	604b      	str	r3, [r1, #4]
    5dbc:	6011      	str	r1, [r2, #0]
    5dbe:	e033      	b.n	5e28 <_free_r+0x88>
    5dc0:	4299      	cmp	r1, r3
    5dc2:	d20f      	bcs.n	5de4 <_free_r+0x44>
    5dc4:	6808      	ldr	r0, [r1, #0]
    5dc6:	180a      	adds	r2, r1, r0
    5dc8:	429a      	cmp	r2, r3
    5dca:	d105      	bne.n	5dd8 <_free_r+0x38>
    5dcc:	6813      	ldr	r3, [r2, #0]
    5dce:	6852      	ldr	r2, [r2, #4]
    5dd0:	18c0      	adds	r0, r0, r3
    5dd2:	6008      	str	r0, [r1, #0]
    5dd4:	604a      	str	r2, [r1, #4]
    5dd6:	e000      	b.n	5dda <_free_r+0x3a>
    5dd8:	604b      	str	r3, [r1, #4]
    5dda:	6021      	str	r1, [r4, #0]
    5ddc:	e024      	b.n	5e28 <_free_r+0x88>
    5dde:	428a      	cmp	r2, r1
    5de0:	d803      	bhi.n	5dea <_free_r+0x4a>
    5de2:	1c13      	adds	r3, r2, #0
    5de4:	685a      	ldr	r2, [r3, #4]
    5de6:	2a00      	cmp	r2, #0
    5de8:	d1f9      	bne.n	5dde <_free_r+0x3e>
    5dea:	681d      	ldr	r5, [r3, #0]
    5dec:	195c      	adds	r4, r3, r5
    5dee:	428c      	cmp	r4, r1
    5df0:	d10b      	bne.n	5e0a <_free_r+0x6a>
    5df2:	6809      	ldr	r1, [r1, #0]
    5df4:	1869      	adds	r1, r5, r1
    5df6:	1858      	adds	r0, r3, r1
    5df8:	6019      	str	r1, [r3, #0]
    5dfa:	4290      	cmp	r0, r2
    5dfc:	d114      	bne.n	5e28 <_free_r+0x88>
    5dfe:	6814      	ldr	r4, [r2, #0]
    5e00:	6852      	ldr	r2, [r2, #4]
    5e02:	1909      	adds	r1, r1, r4
    5e04:	6019      	str	r1, [r3, #0]
    5e06:	605a      	str	r2, [r3, #4]
    5e08:	e00e      	b.n	5e28 <_free_r+0x88>
    5e0a:	428c      	cmp	r4, r1
    5e0c:	d902      	bls.n	5e14 <_free_r+0x74>
    5e0e:	230c      	movs	r3, #12
    5e10:	6003      	str	r3, [r0, #0]
    5e12:	e009      	b.n	5e28 <_free_r+0x88>
    5e14:	6808      	ldr	r0, [r1, #0]
    5e16:	180c      	adds	r4, r1, r0
    5e18:	4294      	cmp	r4, r2
    5e1a:	d103      	bne.n	5e24 <_free_r+0x84>
    5e1c:	6814      	ldr	r4, [r2, #0]
    5e1e:	6852      	ldr	r2, [r2, #4]
    5e20:	1900      	adds	r0, r0, r4
    5e22:	6008      	str	r0, [r1, #0]
    5e24:	604a      	str	r2, [r1, #4]
    5e26:	6059      	str	r1, [r3, #4]
    5e28:	bd30      	pop	{r4, r5, pc}
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	20000e38 	.word	0x20000e38

00005e30 <_malloc_r>:
    5e30:	b570      	push	{r4, r5, r6, lr}
    5e32:	2303      	movs	r3, #3
    5e34:	1ccd      	adds	r5, r1, #3
    5e36:	439d      	bics	r5, r3
    5e38:	3508      	adds	r5, #8
    5e3a:	1c06      	adds	r6, r0, #0
    5e3c:	2d0c      	cmp	r5, #12
    5e3e:	d201      	bcs.n	5e44 <_malloc_r+0x14>
    5e40:	250c      	movs	r5, #12
    5e42:	e001      	b.n	5e48 <_malloc_r+0x18>
    5e44:	2d00      	cmp	r5, #0
    5e46:	db3f      	blt.n	5ec8 <_malloc_r+0x98>
    5e48:	428d      	cmp	r5, r1
    5e4a:	d33d      	bcc.n	5ec8 <_malloc_r+0x98>
    5e4c:	4b20      	ldr	r3, [pc, #128]	; (5ed0 <_malloc_r+0xa0>)
    5e4e:	681c      	ldr	r4, [r3, #0]
    5e50:	1c1a      	adds	r2, r3, #0
    5e52:	1c21      	adds	r1, r4, #0
    5e54:	2900      	cmp	r1, #0
    5e56:	d013      	beq.n	5e80 <_malloc_r+0x50>
    5e58:	6808      	ldr	r0, [r1, #0]
    5e5a:	1b43      	subs	r3, r0, r5
    5e5c:	d40d      	bmi.n	5e7a <_malloc_r+0x4a>
    5e5e:	2b0b      	cmp	r3, #11
    5e60:	d902      	bls.n	5e68 <_malloc_r+0x38>
    5e62:	600b      	str	r3, [r1, #0]
    5e64:	18cc      	adds	r4, r1, r3
    5e66:	e01e      	b.n	5ea6 <_malloc_r+0x76>
    5e68:	428c      	cmp	r4, r1
    5e6a:	d102      	bne.n	5e72 <_malloc_r+0x42>
    5e6c:	6863      	ldr	r3, [r4, #4]
    5e6e:	6013      	str	r3, [r2, #0]
    5e70:	e01a      	b.n	5ea8 <_malloc_r+0x78>
    5e72:	6848      	ldr	r0, [r1, #4]
    5e74:	6060      	str	r0, [r4, #4]
    5e76:	1c0c      	adds	r4, r1, #0
    5e78:	e016      	b.n	5ea8 <_malloc_r+0x78>
    5e7a:	1c0c      	adds	r4, r1, #0
    5e7c:	6849      	ldr	r1, [r1, #4]
    5e7e:	e7e9      	b.n	5e54 <_malloc_r+0x24>
    5e80:	4c14      	ldr	r4, [pc, #80]	; (5ed4 <_malloc_r+0xa4>)
    5e82:	6820      	ldr	r0, [r4, #0]
    5e84:	2800      	cmp	r0, #0
    5e86:	d103      	bne.n	5e90 <_malloc_r+0x60>
    5e88:	1c30      	adds	r0, r6, #0
    5e8a:	f000 f825 	bl	5ed8 <_sbrk_r>
    5e8e:	6020      	str	r0, [r4, #0]
    5e90:	1c30      	adds	r0, r6, #0
    5e92:	1c29      	adds	r1, r5, #0
    5e94:	f000 f820 	bl	5ed8 <_sbrk_r>
    5e98:	1c43      	adds	r3, r0, #1
    5e9a:	d015      	beq.n	5ec8 <_malloc_r+0x98>
    5e9c:	1cc4      	adds	r4, r0, #3
    5e9e:	2303      	movs	r3, #3
    5ea0:	439c      	bics	r4, r3
    5ea2:	4284      	cmp	r4, r0
    5ea4:	d10a      	bne.n	5ebc <_malloc_r+0x8c>
    5ea6:	6025      	str	r5, [r4, #0]
    5ea8:	1c20      	adds	r0, r4, #0
    5eaa:	300b      	adds	r0, #11
    5eac:	2207      	movs	r2, #7
    5eae:	1d23      	adds	r3, r4, #4
    5eb0:	4390      	bics	r0, r2
    5eb2:	1ac3      	subs	r3, r0, r3
    5eb4:	d00b      	beq.n	5ece <_malloc_r+0x9e>
    5eb6:	425a      	negs	r2, r3
    5eb8:	50e2      	str	r2, [r4, r3]
    5eba:	e008      	b.n	5ece <_malloc_r+0x9e>
    5ebc:	1a21      	subs	r1, r4, r0
    5ebe:	1c30      	adds	r0, r6, #0
    5ec0:	f000 f80a 	bl	5ed8 <_sbrk_r>
    5ec4:	3001      	adds	r0, #1
    5ec6:	d1ee      	bne.n	5ea6 <_malloc_r+0x76>
    5ec8:	230c      	movs	r3, #12
    5eca:	6033      	str	r3, [r6, #0]
    5ecc:	2000      	movs	r0, #0
    5ece:	bd70      	pop	{r4, r5, r6, pc}
    5ed0:	20000e38 	.word	0x20000e38
    5ed4:	20000e34 	.word	0x20000e34

00005ed8 <_sbrk_r>:
    5ed8:	b538      	push	{r3, r4, r5, lr}
    5eda:	4c07      	ldr	r4, [pc, #28]	; (5ef8 <_sbrk_r+0x20>)
    5edc:	2300      	movs	r3, #0
    5ede:	1c05      	adds	r5, r0, #0
    5ee0:	1c08      	adds	r0, r1, #0
    5ee2:	6023      	str	r3, [r4, #0]
    5ee4:	f7fc f932 	bl	214c <_sbrk>
    5ee8:	1c43      	adds	r3, r0, #1
    5eea:	d103      	bne.n	5ef4 <_sbrk_r+0x1c>
    5eec:	6823      	ldr	r3, [r4, #0]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d000      	beq.n	5ef4 <_sbrk_r+0x1c>
    5ef2:	602b      	str	r3, [r5, #0]
    5ef4:	bd38      	pop	{r3, r4, r5, pc}
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	20000fcc 	.word	0x20000fcc

00005efc <__sread>:
    5efc:	b538      	push	{r3, r4, r5, lr}
    5efe:	1c0c      	adds	r4, r1, #0
    5f00:	250e      	movs	r5, #14
    5f02:	5f49      	ldrsh	r1, [r1, r5]
    5f04:	f000 f880 	bl	6008 <_read_r>
    5f08:	2800      	cmp	r0, #0
    5f0a:	db03      	blt.n	5f14 <__sread+0x18>
    5f0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5f0e:	1813      	adds	r3, r2, r0
    5f10:	6563      	str	r3, [r4, #84]	; 0x54
    5f12:	e003      	b.n	5f1c <__sread+0x20>
    5f14:	89a2      	ldrh	r2, [r4, #12]
    5f16:	4b02      	ldr	r3, [pc, #8]	; (5f20 <__sread+0x24>)
    5f18:	4013      	ands	r3, r2
    5f1a:	81a3      	strh	r3, [r4, #12]
    5f1c:	bd38      	pop	{r3, r4, r5, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	ffffefff 	.word	0xffffefff

00005f24 <__swrite>:
    5f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f26:	1c1e      	adds	r6, r3, #0
    5f28:	898b      	ldrh	r3, [r1, #12]
    5f2a:	1c05      	adds	r5, r0, #0
    5f2c:	1c0c      	adds	r4, r1, #0
    5f2e:	1c17      	adds	r7, r2, #0
    5f30:	05da      	lsls	r2, r3, #23
    5f32:	d505      	bpl.n	5f40 <__swrite+0x1c>
    5f34:	230e      	movs	r3, #14
    5f36:	5ec9      	ldrsh	r1, [r1, r3]
    5f38:	2200      	movs	r2, #0
    5f3a:	2302      	movs	r3, #2
    5f3c:	f000 f850 	bl	5fe0 <_lseek_r>
    5f40:	89a2      	ldrh	r2, [r4, #12]
    5f42:	4b05      	ldr	r3, [pc, #20]	; (5f58 <__swrite+0x34>)
    5f44:	1c28      	adds	r0, r5, #0
    5f46:	4013      	ands	r3, r2
    5f48:	81a3      	strh	r3, [r4, #12]
    5f4a:	220e      	movs	r2, #14
    5f4c:	5ea1      	ldrsh	r1, [r4, r2]
    5f4e:	1c33      	adds	r3, r6, #0
    5f50:	1c3a      	adds	r2, r7, #0
    5f52:	f000 f81f 	bl	5f94 <_write_r>
    5f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f58:	ffffefff 	.word	0xffffefff

00005f5c <__sseek>:
    5f5c:	b538      	push	{r3, r4, r5, lr}
    5f5e:	1c0c      	adds	r4, r1, #0
    5f60:	250e      	movs	r5, #14
    5f62:	5f49      	ldrsh	r1, [r1, r5]
    5f64:	f000 f83c 	bl	5fe0 <_lseek_r>
    5f68:	89a3      	ldrh	r3, [r4, #12]
    5f6a:	1c42      	adds	r2, r0, #1
    5f6c:	d103      	bne.n	5f76 <__sseek+0x1a>
    5f6e:	4a05      	ldr	r2, [pc, #20]	; (5f84 <__sseek+0x28>)
    5f70:	4013      	ands	r3, r2
    5f72:	81a3      	strh	r3, [r4, #12]
    5f74:	e004      	b.n	5f80 <__sseek+0x24>
    5f76:	2280      	movs	r2, #128	; 0x80
    5f78:	0152      	lsls	r2, r2, #5
    5f7a:	4313      	orrs	r3, r2
    5f7c:	81a3      	strh	r3, [r4, #12]
    5f7e:	6560      	str	r0, [r4, #84]	; 0x54
    5f80:	bd38      	pop	{r3, r4, r5, pc}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	ffffefff 	.word	0xffffefff

00005f88 <__sclose>:
    5f88:	b508      	push	{r3, lr}
    5f8a:	230e      	movs	r3, #14
    5f8c:	5ec9      	ldrsh	r1, [r1, r3]
    5f8e:	f000 f815 	bl	5fbc <_close_r>
    5f92:	bd08      	pop	{r3, pc}

00005f94 <_write_r>:
    5f94:	b538      	push	{r3, r4, r5, lr}
    5f96:	4c08      	ldr	r4, [pc, #32]	; (5fb8 <_write_r+0x24>)
    5f98:	1c05      	adds	r5, r0, #0
    5f9a:	2000      	movs	r0, #0
    5f9c:	6020      	str	r0, [r4, #0]
    5f9e:	1c08      	adds	r0, r1, #0
    5fa0:	1c11      	adds	r1, r2, #0
    5fa2:	1c1a      	adds	r2, r3, #0
    5fa4:	f7fc f8a8 	bl	20f8 <_write>
    5fa8:	1c43      	adds	r3, r0, #1
    5faa:	d103      	bne.n	5fb4 <_write_r+0x20>
    5fac:	6823      	ldr	r3, [r4, #0]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d000      	beq.n	5fb4 <_write_r+0x20>
    5fb2:	602b      	str	r3, [r5, #0]
    5fb4:	bd38      	pop	{r3, r4, r5, pc}
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	20000fcc 	.word	0x20000fcc

00005fbc <_close_r>:
    5fbc:	b538      	push	{r3, r4, r5, lr}
    5fbe:	4c07      	ldr	r4, [pc, #28]	; (5fdc <_close_r+0x20>)
    5fc0:	2300      	movs	r3, #0
    5fc2:	1c05      	adds	r5, r0, #0
    5fc4:	1c08      	adds	r0, r1, #0
    5fc6:	6023      	str	r3, [r4, #0]
    5fc8:	f7fc f8d2 	bl	2170 <_close>
    5fcc:	1c43      	adds	r3, r0, #1
    5fce:	d103      	bne.n	5fd8 <_close_r+0x1c>
    5fd0:	6823      	ldr	r3, [r4, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d000      	beq.n	5fd8 <_close_r+0x1c>
    5fd6:	602b      	str	r3, [r5, #0]
    5fd8:	bd38      	pop	{r3, r4, r5, pc}
    5fda:	46c0      	nop			; (mov r8, r8)
    5fdc:	20000fcc 	.word	0x20000fcc

00005fe0 <_lseek_r>:
    5fe0:	b538      	push	{r3, r4, r5, lr}
    5fe2:	4c08      	ldr	r4, [pc, #32]	; (6004 <_lseek_r+0x24>)
    5fe4:	1c05      	adds	r5, r0, #0
    5fe6:	2000      	movs	r0, #0
    5fe8:	6020      	str	r0, [r4, #0]
    5fea:	1c08      	adds	r0, r1, #0
    5fec:	1c11      	adds	r1, r2, #0
    5fee:	1c1a      	adds	r2, r3, #0
    5ff0:	f7fc f8c2 	bl	2178 <_lseek>
    5ff4:	1c43      	adds	r3, r0, #1
    5ff6:	d103      	bne.n	6000 <_lseek_r+0x20>
    5ff8:	6823      	ldr	r3, [r4, #0]
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d000      	beq.n	6000 <_lseek_r+0x20>
    5ffe:	602b      	str	r3, [r5, #0]
    6000:	bd38      	pop	{r3, r4, r5, pc}
    6002:	46c0      	nop			; (mov r8, r8)
    6004:	20000fcc 	.word	0x20000fcc

00006008 <_read_r>:
    6008:	b538      	push	{r3, r4, r5, lr}
    600a:	4c08      	ldr	r4, [pc, #32]	; (602c <_read_r+0x24>)
    600c:	1c05      	adds	r5, r0, #0
    600e:	2000      	movs	r0, #0
    6010:	6020      	str	r0, [r4, #0]
    6012:	1c08      	adds	r0, r1, #0
    6014:	1c11      	adds	r1, r2, #0
    6016:	1c1a      	adds	r2, r3, #0
    6018:	f7fc f84c 	bl	20b4 <_read>
    601c:	1c43      	adds	r3, r0, #1
    601e:	d103      	bne.n	6028 <_read_r+0x20>
    6020:	6823      	ldr	r3, [r4, #0]
    6022:	2b00      	cmp	r3, #0
    6024:	d000      	beq.n	6028 <_read_r+0x20>
    6026:	602b      	str	r3, [r5, #0]
    6028:	bd38      	pop	{r3, r4, r5, pc}
    602a:	46c0      	nop			; (mov r8, r8)
    602c:	20000fcc 	.word	0x20000fcc
    6030:	42000800 	.word	0x42000800
    6034:	42000c00 	.word	0x42000c00
    6038:	42001000 	.word	0x42001000
    603c:	42001400 	.word	0x42001400
    6040:	42001800 	.word	0x42001800
    6044:	42001c00 	.word	0x42001c00
    6048:	0c0b0a09 	.word	0x0c0b0a09
    604c:	00000e0d 	.word	0x00000e0d
    6050:	0000140c 	.word	0x0000140c
    6054:	00001468 	.word	0x00001468
    6058:	00001468 	.word	0x00001468
    605c:	00001406 	.word	0x00001406
    6060:	00001406 	.word	0x00001406
    6064:	00001422 	.word	0x00001422
    6068:	00001412 	.word	0x00001412
    606c:	00001428 	.word	0x00001428
    6070:	00001456 	.word	0x00001456
    6074:	00001690 	.word	0x00001690
    6078:	000016f0 	.word	0x000016f0
    607c:	000016f0 	.word	0x000016f0
    6080:	00001670 	.word	0x00001670
    6084:	00001682 	.word	0x00001682
    6088:	0000169e 	.word	0x0000169e
    608c:	00001674 	.word	0x00001674
    6090:	000016ac 	.word	0x000016ac
    6094:	000016e0 	.word	0x000016e0
    6098:	42002c00 	.word	0x42002c00
    609c:	42003000 	.word	0x42003000
    60a0:	42003400 	.word	0x42003400
    60a4:	001c1c1b 	.word	0x001c1c1b
    60a8:	10000800 	.word	0x10000800
    60ac:	00002000 	.word	0x00002000
    60b0:	0000265a 	.word	0x0000265a
    60b4:	00002674 	.word	0x00002674
    60b8:	00002690 	.word	0x00002690
    60bc:	000026c2 	.word	0x000026c2
    60c0:	00002704 	.word	0x00002704
    60c4:	67616d49 	.word	0x67616d49
    60c8:	00676e69 	.word	0x00676e69
    60cc:	74736554 	.word	0x74736554
    60d0:	75636553 	.word	0x75636553
    60d4:	79746972 	.word	0x79746972
    60d8:	3079654b 	.word	0x3079654b
    60dc:	00000000 	.word	0x00000000
    60e0:	00003904 	.word	0x00003904
    60e4:	00003a7c 	.word	0x00003a7c
    60e8:	00003a86 	.word	0x00003a86
    60ec:	00003c22 	.word	0x00003c22
    60f0:	00003c2a 	.word	0x00003c2a
    60f4:	00004206 	.word	0x00004206
    60f8:	000042c4 	.word	0x000042c4
    60fc:	00004210 	.word	0x00004210
    6100:	00004230 	.word	0x00004230
    6104:	000042c4 	.word	0x000042c4
    6108:	00004252 	.word	0x00004252
    610c:	000042c4 	.word	0x000042c4
    6110:	00004294 	.word	0x00004294

00006114 <tc_interrupt_vectors.11765>:
    6114:	00141312 00000043                       ....C...

0000611c <_global_impure_ptr>:
    611c:	2000000c                                ... 

00006120 <__sf_fake_stdin>:
	...

00006140 <__sf_fake_stdout>:
	...

00006160 <__sf_fake_stderr>:
	...

00006180 <_init>:
    6180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6186:	bc08      	pop	{r3}
    6188:	469e      	mov	lr, r3
    618a:	4770      	bx	lr

0000618c <__init_array_start>:
    618c:	000000d9 	.word	0x000000d9

00006190 <_fini>:
    6190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6192:	46c0      	nop			; (mov r8, r8)
    6194:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6196:	bc08      	pop	{r3}
    6198:	469e      	mov	lr, r3
    619a:	4770      	bx	lr

0000619c <__fini_array_start>:
    619c:	000000b1 	.word	0x000000b1
