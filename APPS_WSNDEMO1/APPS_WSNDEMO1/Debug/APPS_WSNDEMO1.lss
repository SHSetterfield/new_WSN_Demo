
APPS_WSNDEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005150  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00005150  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e54  20000078  000051c8  00010078  2**2
                  ALLOC
  3 .stack        00002004  20000ecc  0000601c  00010078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00035936  00000000  00000000  0001012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000067ed  00000000  00000000  00045a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c2d3  00000000  00000000  0004c251  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c40  00000000  00000000  00058524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010e8  00000000  00000000  00059164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000e1af  00000000  00000000  0005a24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b7ff  00000000  00000000  000683fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008683f  00000000  00000000  00083bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000203c  00000000  00000000  0010a43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002ed0 	.word	0x20002ed0
       4:	000019b5 	.word	0x000019b5
       8:	000019b1 	.word	0x000019b1
       c:	000019b1 	.word	0x000019b1
	...
      2c:	000019b1 	.word	0x000019b1
	...
      38:	000019b1 	.word	0x000019b1
      3c:	000019b1 	.word	0x000019b1
      40:	000019b1 	.word	0x000019b1
      44:	000019b1 	.word	0x000019b1
      48:	000019b1 	.word	0x000019b1
      4c:	00000721 	.word	0x00000721
      50:	00000329 	.word	0x00000329
      54:	000019b1 	.word	0x000019b1
      58:	000019b1 	.word	0x000019b1
      5c:	00000000 	.word	0x00000000
      60:	000019b1 	.word	0x000019b1
      64:	000009ad 	.word	0x000009ad
      68:	000009bd 	.word	0x000009bd
      6c:	000009cd 	.word	0x000009cd
      70:	000009dd 	.word	0x000009dd
	...
      7c:	000019b1 	.word	0x000019b1
      80:	000019b1 	.word	0x000019b1
      84:	000019b1 	.word	0x000019b1
      88:	00001651 	.word	0x00001651
      8c:	00001661 	.word	0x00001661
      90:	00001671 	.word	0x00001671
	...
      ac:	000019b1 	.word	0x000019b1

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000078 	.word	0x20000078
      d0:	00000000 	.word	0x00000000
      d4:	00005150 	.word	0x00005150

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00005150 	.word	0x00005150
     104:	2000007c 	.word	0x2000007c
     108:	00005150 	.word	0x00005150
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00001379 	.word	0x00001379
     13c:	00004ccd 	.word	0x00004ccd
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_us+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_us+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000000 	.word	0x20000000
     174:	e000e010 	.word	0xe000e010

00000178 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     178:	4b0c      	ldr	r3, [pc, #48]	; (1ac <cpu_irq_enter_critical+0x34>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	2b00      	cmp	r3, #0
     17e:	d110      	bne.n	1a2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     184:	2b00      	cmp	r3, #0
     186:	d109      	bne.n	19c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     188:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     18a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     18e:	2200      	movs	r2, #0
     190:	4b07      	ldr	r3, [pc, #28]	; (1b0 <cpu_irq_enter_critical+0x38>)
     192:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     194:	2201      	movs	r2, #1
     196:	4b07      	ldr	r3, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x3c>)
     198:	701a      	strb	r2, [r3, #0]
     19a:	e002      	b.n	1a2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     19c:	2200      	movs	r2, #0
     19e:	4b05      	ldr	r3, [pc, #20]	; (1b4 <cpu_irq_enter_critical+0x3c>)
     1a0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <cpu_irq_enter_critical+0x34>)
     1a4:	681a      	ldr	r2, [r3, #0]
     1a6:	3201      	adds	r2, #1
     1a8:	601a      	str	r2, [r3, #0]
}
     1aa:	4770      	bx	lr
     1ac:	20000094 	.word	0x20000094
     1b0:	20000008 	.word	0x20000008
     1b4:	20000098 	.word	0x20000098

000001b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1b8:	4b08      	ldr	r3, [pc, #32]	; (1dc <cpu_irq_leave_critical+0x24>)
     1ba:	681a      	ldr	r2, [r3, #0]
     1bc:	3a01      	subs	r2, #1
     1be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c0:	681b      	ldr	r3, [r3, #0]
     1c2:	2b00      	cmp	r3, #0
     1c4:	d109      	bne.n	1da <cpu_irq_leave_critical+0x22>
     1c6:	4b06      	ldr	r3, [pc, #24]	; (1e0 <cpu_irq_leave_critical+0x28>)
     1c8:	781b      	ldrb	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d005      	beq.n	1da <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1ce:	2201      	movs	r2, #1
     1d0:	4b04      	ldr	r3, [pc, #16]	; (1e4 <cpu_irq_leave_critical+0x2c>)
     1d2:	701a      	strb	r2, [r3, #0]
     1d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1d8:	b662      	cpsie	i
	}
}
     1da:	4770      	bx	lr
     1dc:	20000094 	.word	0x20000094
     1e0:	20000098 	.word	0x20000098
     1e4:	20000008 	.word	0x20000008

000001e8 <system_board_init>:




void system_board_init(void)
{
     1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ea:	4647      	mov	r7, r8
     1ec:	b480      	push	{r7}
     1ee:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f0:	ac01      	add	r4, sp, #4
     1f2:	2601      	movs	r6, #1
     1f4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1f6:	2700      	movs	r7, #0
     1f8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1fc:	2013      	movs	r0, #19
     1fe:	1c21      	adds	r1, r4, #0
     200:	4d27      	ldr	r5, [pc, #156]	; (2a0 <system_board_init+0xb8>)
     202:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     204:	4a27      	ldr	r2, [pc, #156]	; (2a4 <system_board_init+0xbc>)
     206:	4690      	mov	r8, r2
     208:	2380      	movs	r3, #128	; 0x80
     20a:	031b      	lsls	r3, r3, #12
     20c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     20e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     210:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     212:	201c      	movs	r0, #28
     214:	1c21      	adds	r1, r4, #0
     216:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     218:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     21a:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     21c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     21e:	2052      	movs	r0, #82	; 0x52
     220:	1c21      	adds	r1, r4, #0
     222:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     224:	203e      	movs	r0, #62	; 0x3e
     226:	1c21      	adds	r1, r4, #0
     228:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     22a:	203f      	movs	r0, #63	; 0x3f
     22c:	1c21      	adds	r1, r4, #0
     22e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     230:	202f      	movs	r0, #47	; 0x2f
     232:	1c21      	adds	r1, r4, #0
     234:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     236:	2014      	movs	r0, #20
     238:	1c21      	adds	r1, r4, #0
     23a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23c:	2280      	movs	r2, #128	; 0x80
     23e:	02d2      	lsls	r2, r2, #11
     240:	4b19      	ldr	r3, [pc, #100]	; (2a8 <system_board_init+0xc0>)
     242:	619a      	str	r2, [r3, #24]
     244:	3b80      	subs	r3, #128	; 0x80
     246:	2280      	movs	r2, #128	; 0x80
     248:	05d2      	lsls	r2, r2, #23
     24a:	619a      	str	r2, [r3, #24]
     24c:	2280      	movs	r2, #128	; 0x80
     24e:	0612      	lsls	r2, r2, #24
     250:	619a      	str	r2, [r3, #24]
     252:	2280      	movs	r2, #128	; 0x80
     254:	0212      	lsls	r2, r2, #8
     256:	619a      	str	r2, [r3, #24]
     258:	2380      	movs	r3, #128	; 0x80
     25a:	035b      	lsls	r3, r3, #13
     25c:	4642      	mov	r2, r8
     25e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     260:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     262:	2053      	movs	r0, #83	; 0x53
     264:	1c21      	adds	r1, r4, #0
     266:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     268:	4b10      	ldr	r3, [pc, #64]	; (2ac <system_board_init+0xc4>)
     26a:	6a19      	ldr	r1, [r3, #32]
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	0392      	lsls	r2, r2, #14
     270:	430a      	orrs	r2, r1
     272:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     274:	2204      	movs	r2, #4
     276:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <system_board_init+0xc8>)
     278:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     27a:	466b      	mov	r3, sp
     27c:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     27e:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     280:	2305      	movs	r3, #5
     282:	466a      	mov	r2, sp
     284:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     286:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     288:	2009      	movs	r0, #9
     28a:	4669      	mov	r1, sp
     28c:	4c09      	ldr	r4, [pc, #36]	; (2b4 <system_board_init+0xcc>)
     28e:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     290:	200c      	movs	r0, #12
     292:	4669      	mov	r1, sp
     294:	47a0      	blx	r4
#endif

}
     296:	b002      	add	sp, #8
     298:	bc04      	pop	{r2}
     29a:	4690      	mov	r8, r2
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	000004a9 	.word	0x000004a9
     2a4:	41004400 	.word	0x41004400
     2a8:	41004500 	.word	0x41004500
     2ac:	40000400 	.word	0x40000400
     2b0:	42005400 	.word	0x42005400
     2b4:	0000156d 	.word	0x0000156d

000002b8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2b8:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2ba:	2a00      	cmp	r2, #0
     2bc:	d10f      	bne.n	2de <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2be:	008b      	lsls	r3, r1, #2
     2c0:	4a08      	ldr	r2, [pc, #32]	; (2e4 <extint_register_callback+0x2c>)
     2c2:	589a      	ldr	r2, [r3, r2]
     2c4:	2a00      	cmp	r2, #0
     2c6:	d104      	bne.n	2d2 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     2c8:	1c19      	adds	r1, r3, #0
     2ca:	4b06      	ldr	r3, [pc, #24]	; (2e4 <extint_register_callback+0x2c>)
     2cc:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     2ce:	2300      	movs	r3, #0
     2d0:	e005      	b.n	2de <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2d2:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2d4:	1a12      	subs	r2, r2, r0
     2d6:	1e50      	subs	r0, r2, #1
     2d8:	4182      	sbcs	r2, r0
     2da:	4252      	negs	r2, r2
     2dc:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2de:	1c18      	adds	r0, r3, #0
     2e0:	4770      	bx	lr
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	20000d5c 	.word	0x20000d5c

000002e8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2e8:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ea:	2900      	cmp	r1, #0
     2ec:	d107      	bne.n	2fe <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2ee:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2f0:	281f      	cmp	r0, #31
     2f2:	d800      	bhi.n	2f6 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2f4:	4b03      	ldr	r3, [pc, #12]	; (304 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2f6:	2201      	movs	r2, #1
     2f8:	4082      	lsls	r2, r0
     2fa:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     2fc:	2300      	movs	r3, #0
}
     2fe:	1c18      	adds	r0, r3, #0
     300:	4770      	bx	lr
     302:	46c0      	nop			; (mov r8, r8)
     304:	40001800 	.word	0x40001800

00000308 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     308:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     30a:	2900      	cmp	r1, #0
     30c:	d107      	bne.n	31e <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     30e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     310:	281f      	cmp	r0, #31
     312:	d800      	bhi.n	316 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     314:	4b03      	ldr	r3, [pc, #12]	; (324 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     316:	2201      	movs	r2, #1
     318:	4082      	lsls	r2, r0
     31a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     31c:	2300      	movs	r3, #0
}
     31e:	1c18      	adds	r0, r3, #0
     320:	4770      	bx	lr
     322:	46c0      	nop			; (mov r8, r8)
     324:	40001800 	.word	0x40001800

00000328 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     328:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     32a:	2200      	movs	r2, #0
     32c:	4b16      	ldr	r3, [pc, #88]	; (388 <EIC_Handler+0x60>)
     32e:	701a      	strb	r2, [r3, #0]
     330:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     332:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     334:	4d15      	ldr	r5, [pc, #84]	; (38c <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     336:	4c14      	ldr	r4, [pc, #80]	; (388 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     338:	2b1f      	cmp	r3, #31
     33a:	d910      	bls.n	35e <EIC_Handler+0x36>
     33c:	e019      	b.n	372 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     33e:	4914      	ldr	r1, [pc, #80]	; (390 <EIC_Handler+0x68>)
     340:	e000      	b.n	344 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     342:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     344:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     346:	009b      	lsls	r3, r3, #2
     348:	595b      	ldr	r3, [r3, r5]
     34a:	2b00      	cmp	r3, #0
     34c:	d000      	beq.n	350 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     34e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     350:	7823      	ldrb	r3, [r4, #0]
     352:	3301      	adds	r3, #1
     354:	b2db      	uxtb	r3, r3
     356:	7023      	strb	r3, [r4, #0]
     358:	2b0f      	cmp	r3, #15
     35a:	d814      	bhi.n	386 <EIC_Handler+0x5e>
     35c:	e7ec      	b.n	338 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     35e:	1c32      	adds	r2, r6, #0
     360:	401a      	ands	r2, r3
     362:	2101      	movs	r1, #1
     364:	4091      	lsls	r1, r2
     366:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     368:	4909      	ldr	r1, [pc, #36]	; (390 <EIC_Handler+0x68>)
     36a:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     36c:	4211      	tst	r1, r2
     36e:	d1e6      	bne.n	33e <EIC_Handler+0x16>
     370:	e7ee      	b.n	350 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     372:	1c32      	adds	r2, r6, #0
     374:	401a      	ands	r2, r3
     376:	2101      	movs	r1, #1
     378:	4091      	lsls	r1, r2
     37a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     37c:	2100      	movs	r1, #0
     37e:	6909      	ldr	r1, [r1, #16]
     380:	4211      	tst	r1, r2
     382:	d1de      	bne.n	342 <EIC_Handler+0x1a>
     384:	e7e4      	b.n	350 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     386:	bd70      	pop	{r4, r5, r6, pc}
     388:	20000d58 	.word	0x20000d58
     38c:	20000d5c 	.word	0x20000d5c
     390:	40001800 	.word	0x40001800

00000394 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     394:	4b05      	ldr	r3, [pc, #20]	; (3ac <_extint_enable+0x18>)
     396:	7819      	ldrb	r1, [r3, #0]
     398:	2202      	movs	r2, #2
     39a:	430a      	orrs	r2, r1
     39c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     39e:	1c1a      	adds	r2, r3, #0
     3a0:	7853      	ldrb	r3, [r2, #1]
     3a2:	b25b      	sxtb	r3, r3
     3a4:	2b00      	cmp	r3, #0
     3a6:	dbfb      	blt.n	3a0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3a8:	4770      	bx	lr
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	40001800 	.word	0x40001800

000003b0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3b0:	b500      	push	{lr}
     3b2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3b4:	4b12      	ldr	r3, [pc, #72]	; (400 <_system_extint_init+0x50>)
     3b6:	6999      	ldr	r1, [r3, #24]
     3b8:	2240      	movs	r2, #64	; 0x40
     3ba:	430a      	orrs	r2, r1
     3bc:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3be:	a901      	add	r1, sp, #4
     3c0:	2300      	movs	r3, #0
     3c2:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3c4:	2005      	movs	r0, #5
     3c6:	4b0f      	ldr	r3, [pc, #60]	; (404 <_system_extint_init+0x54>)
     3c8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3ca:	2005      	movs	r0, #5
     3cc:	4b0e      	ldr	r3, [pc, #56]	; (408 <_system_extint_init+0x58>)
     3ce:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3d0:	4b0e      	ldr	r3, [pc, #56]	; (40c <_system_extint_init+0x5c>)
     3d2:	7819      	ldrb	r1, [r3, #0]
     3d4:	2201      	movs	r2, #1
     3d6:	430a      	orrs	r2, r1
     3d8:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3da:	1c1a      	adds	r2, r3, #0
     3dc:	7853      	ldrb	r3, [r2, #1]
     3de:	b25b      	sxtb	r3, r3
     3e0:	2b00      	cmp	r3, #0
     3e2:	dbfb      	blt.n	3dc <_system_extint_init+0x2c>
     3e4:	4b0a      	ldr	r3, [pc, #40]	; (410 <_system_extint_init+0x60>)
     3e6:	1c19      	adds	r1, r3, #0
     3e8:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3ea:	2200      	movs	r2, #0
     3ec:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3ee:	428b      	cmp	r3, r1
     3f0:	d1fc      	bne.n	3ec <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3f2:	2210      	movs	r2, #16
     3f4:	4b07      	ldr	r3, [pc, #28]	; (414 <_system_extint_init+0x64>)
     3f6:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_system_extint_init+0x68>)
     3fa:	4798      	blx	r3
}
     3fc:	b003      	add	sp, #12
     3fe:	bd00      	pop	{pc}
     400:	40000400 	.word	0x40000400
     404:	00001491 	.word	0x00001491
     408:	00001405 	.word	0x00001405
     40c:	40001800 	.word	0x40001800
     410:	20000d5c 	.word	0x20000d5c
     414:	e000e100 	.word	0xe000e100
     418:	00000395 	.word	0x00000395

0000041c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     41c:	2300      	movs	r3, #0
     41e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     420:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     422:	2201      	movs	r2, #1
     424:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     426:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     428:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     42a:	2302      	movs	r3, #2
     42c:	72c3      	strb	r3, [r0, #11]
}
     42e:	4770      	bx	lr

00000430 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     430:	b5f0      	push	{r4, r5, r6, r7, lr}
     432:	b083      	sub	sp, #12
     434:	1c05      	adds	r5, r0, #0
     436:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     438:	a901      	add	r1, sp, #4
     43a:	2300      	movs	r3, #0
     43c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     43e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     440:	6863      	ldr	r3, [r4, #4]
     442:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     444:	7a23      	ldrb	r3, [r4, #8]
     446:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     448:	7820      	ldrb	r0, [r4, #0]
     44a:	4b15      	ldr	r3, [pc, #84]	; (4a0 <extint_chan_set_config+0x70>)
     44c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     44e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     450:	2d1f      	cmp	r5, #31
     452:	d800      	bhi.n	456 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     454:	4b13      	ldr	r3, [pc, #76]	; (4a4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     456:	2107      	movs	r1, #7
     458:	4029      	ands	r1, r5
     45a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     45c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     45e:	7aa2      	ldrb	r2, [r4, #10]
     460:	2a00      	cmp	r2, #0
     462:	d001      	beq.n	468 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     464:	2208      	movs	r2, #8
     466:	4310      	orrs	r0, r2
     468:	08ea      	lsrs	r2, r5, #3
     46a:	0092      	lsls	r2, r2, #2
     46c:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     46e:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     470:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     472:	270f      	movs	r7, #15
     474:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     476:	43be      	bics	r6, r7
     478:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47a:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47c:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     47e:	7a62      	ldrb	r2, [r4, #9]
     480:	2a00      	cmp	r2, #0
     482:	d006      	beq.n	492 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     484:	695a      	ldr	r2, [r3, #20]
     486:	2101      	movs	r1, #1
     488:	40a9      	lsls	r1, r5
     48a:	1c0d      	adds	r5, r1, #0
     48c:	4315      	orrs	r5, r2
     48e:	615d      	str	r5, [r3, #20]
     490:	e004      	b.n	49c <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     492:	695a      	ldr	r2, [r3, #20]
     494:	2101      	movs	r1, #1
     496:	40a9      	lsls	r1, r5
     498:	438a      	bics	r2, r1
     49a:	615a      	str	r2, [r3, #20]
	}
}
     49c:	b003      	add	sp, #12
     49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a0:	0000156d 	.word	0x0000156d
     4a4:	40001800 	.word	0x40001800

000004a8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4a8:	b500      	push	{lr}
     4aa:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4ac:	ab01      	add	r3, sp, #4
     4ae:	2280      	movs	r2, #128	; 0x80
     4b0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4b2:	780a      	ldrb	r2, [r1, #0]
     4b4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4b6:	784a      	ldrb	r2, [r1, #1]
     4b8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4ba:	788a      	ldrb	r2, [r1, #2]
     4bc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4be:	1c19      	adds	r1, r3, #0
     4c0:	4b01      	ldr	r3, [pc, #4]	; (4c8 <port_pin_set_config+0x20>)
     4c2:	4798      	blx	r3
}
     4c4:	b003      	add	sp, #12
     4c6:	bd00      	pop	{pc}
     4c8:	0000156d 	.word	0x0000156d

000004cc <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4cc:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     4ce:	7a98      	ldrb	r0, [r3, #10]
     4d0:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     4d2:	4770      	bx	lr

000004d4 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4d8:	6806      	ldr	r6, [r0, #0]
     4da:	2208      	movs	r2, #8
     4dc:	4b05      	ldr	r3, [pc, #20]	; (4f4 <rtc_count_enable+0x20>)
     4de:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     4e0:	4d05      	ldr	r5, [pc, #20]	; (4f8 <rtc_count_enable+0x24>)
     4e2:	1c20      	adds	r0, r4, #0
     4e4:	47a8      	blx	r5
     4e6:	2800      	cmp	r0, #0
     4e8:	d1fb      	bne.n	4e2 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     4ea:	8832      	ldrh	r2, [r6, #0]
     4ec:	2302      	movs	r3, #2
     4ee:	4313      	orrs	r3, r2
     4f0:	8033      	strh	r3, [r6, #0]
}
     4f2:	bd70      	pop	{r4, r5, r6, pc}
     4f4:	e000e100 	.word	0xe000e100
     4f8:	000004cd 	.word	0x000004cd

000004fc <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     4fc:	b570      	push	{r4, r5, r6, lr}
     4fe:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     500:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     502:	2108      	movs	r1, #8
     504:	2380      	movs	r3, #128	; 0x80
     506:	4a06      	ldr	r2, [pc, #24]	; (520 <rtc_count_disable+0x24>)
     508:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     50a:	4d06      	ldr	r5, [pc, #24]	; (524 <rtc_count_disable+0x28>)
     50c:	1c20      	adds	r0, r4, #0
     50e:	47a8      	blx	r5
     510:	2800      	cmp	r0, #0
     512:	d1fb      	bne.n	50c <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     514:	8833      	ldrh	r3, [r6, #0]
     516:	2202      	movs	r2, #2
     518:	4393      	bics	r3, r2
     51a:	8033      	strh	r3, [r6, #0]
}
     51c:	bd70      	pop	{r4, r5, r6, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	e000e100 	.word	0xe000e100
     524:	000004cd 	.word	0x000004cd

00000528 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     528:	b570      	push	{r4, r5, r6, lr}
     52a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     52c:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     52e:	4b07      	ldr	r3, [pc, #28]	; (54c <rtc_count_reset+0x24>)
     530:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     532:	2300      	movs	r3, #0
     534:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     536:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     538:	4d05      	ldr	r5, [pc, #20]	; (550 <rtc_count_reset+0x28>)
     53a:	1c20      	adds	r0, r4, #0
     53c:	47a8      	blx	r5
     53e:	2800      	cmp	r0, #0
     540:	d1fb      	bne.n	53a <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     542:	8832      	ldrh	r2, [r6, #0]
     544:	2301      	movs	r3, #1
     546:	4313      	orrs	r3, r2
     548:	8033      	strh	r3, [r6, #0]
}
     54a:	bd70      	pop	{r4, r5, r6, pc}
     54c:	000004fd 	.word	0x000004fd
     550:	000004cd 	.word	0x000004cd

00000554 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     554:	b5f0      	push	{r4, r5, r6, r7, lr}
     556:	4647      	mov	r7, r8
     558:	b480      	push	{r7}
     55a:	1c04      	adds	r4, r0, #0
     55c:	1c0f      	adds	r7, r1, #0
     55e:	1c16      	adds	r6, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     560:	6803      	ldr	r3, [r0, #0]
     562:	4698      	mov	r8, r3

	while (rtc_count_is_syncing(module)) {
     564:	4d11      	ldr	r5, [pc, #68]	; (5ac <rtc_count_set_compare+0x58>)
     566:	1c20      	adds	r0, r4, #0
     568:	47a8      	blx	r5
     56a:	2800      	cmp	r0, #0
     56c:	d1fb      	bne.n	566 <rtc_count_set_compare+0x12>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     56e:	7923      	ldrb	r3, [r4, #4]
     570:	2b00      	cmp	r3, #0
     572:	d00b      	beq.n	58c <rtc_count_set_compare+0x38>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     574:	201a      	movs	r0, #26
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     576:	2b01      	cmp	r3, #1
     578:	d115      	bne.n	5a6 <rtc_count_set_compare+0x52>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     57a:	2017      	movs	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     57c:	2e01      	cmp	r6, #1
     57e:	d812      	bhi.n	5a6 <rtc_count_set_compare+0x52>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     580:	3606      	adds	r6, #6
     582:	00b6      	lsls	r6, r6, #2
     584:	4643      	mov	r3, r8
     586:	50f7      	str	r7, [r6, r3]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     588:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
     58a:	e00c      	b.n	5a6 <rtc_count_set_compare+0x52>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
     58c:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     58e:	2e02      	cmp	r6, #2
     590:	d809      	bhi.n	5a6 <rtc_count_set_compare+0x52>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     592:	4b07      	ldr	r3, [pc, #28]	; (5b0 <rtc_count_set_compare+0x5c>)
     594:	429f      	cmp	r7, r3
     596:	d806      	bhi.n	5a6 <rtc_count_set_compare+0x52>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     598:	b2bf      	uxth	r7, r7
     59a:	360c      	adds	r6, #12
     59c:	0076      	lsls	r6, r6, #1
     59e:	4643      	mov	r3, r8
     5a0:	52f7      	strh	r7, [r6, r3]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     5a2:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
     5a4:	e7ff      	b.n	5a6 <rtc_count_set_compare+0x52>
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     5a6:	bc04      	pop	{r2}
     5a8:	4690      	mov	r8, r2
     5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ac:	000004cd 	.word	0x000004cd
     5b0:	0000ffff 	.word	0x0000ffff

000005b4 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b6:	b083      	sub	sp, #12
     5b8:	1c04      	adds	r4, r0, #0
     5ba:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     5bc:	6001      	str	r1, [r0, #0]
     5be:	4b2f      	ldr	r3, [pc, #188]	; (67c <rtc_count_init+0xc8>)
     5c0:	6999      	ldr	r1, [r3, #24]
     5c2:	2220      	movs	r2, #32
     5c4:	430a      	orrs	r2, r1
     5c6:	619a      	str	r2, [r3, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     5c8:	a901      	add	r1, sp, #4
     5ca:	2302      	movs	r3, #2
     5cc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     5ce:	2004      	movs	r0, #4
     5d0:	4b2b      	ldr	r3, [pc, #172]	; (680 <rtc_count_init+0xcc>)
     5d2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     5d4:	2004      	movs	r0, #4
     5d6:	4b2b      	ldr	r3, [pc, #172]	; (684 <rtc_count_init+0xd0>)
     5d8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     5da:	1c20      	adds	r0, r4, #0
     5dc:	4b2a      	ldr	r3, [pc, #168]	; (688 <rtc_count_init+0xd4>)
     5de:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     5e0:	78b3      	ldrb	r3, [r6, #2]
     5e2:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     5e4:	7933      	ldrb	r3, [r6, #4]
     5e6:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     5e8:	4b28      	ldr	r3, [pc, #160]	; (68c <rtc_count_init+0xd8>)
     5ea:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5ec:	6827      	ldr	r7, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     5ee:	8833      	ldrh	r3, [r6, #0]
     5f0:	803b      	strh	r3, [r7, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     5f2:	78b3      	ldrb	r3, [r6, #2]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d017      	beq.n	628 <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     5f8:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     5fa:	2b01      	cmp	r3, #1
     5fc:	d13c      	bne.n	678 <rtc_count_init+0xc4>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     5fe:	883b      	ldrh	r3, [r7, #0]
     600:	b29b      	uxth	r3, r3
     602:	803b      	strh	r3, [r7, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     604:	78f3      	ldrb	r3, [r6, #3]
     606:	2b00      	cmp	r3, #0
     608:	d034      	beq.n	674 <rtc_count_init+0xc0>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     60a:	883a      	ldrh	r2, [r7, #0]
     60c:	2380      	movs	r3, #128	; 0x80
     60e:	4313      	orrs	r3, r2
     610:	803b      	strh	r3, [r7, #0]
     612:	e02f      	b.n	674 <rtc_count_init+0xc0>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     614:	1c20      	adds	r0, r4, #0
     616:	47a8      	blx	r5
     618:	2800      	cmp	r0, #0
     61a:	d1fb      	bne.n	614 <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     61c:	1c20      	adds	r0, r4, #0
     61e:	68b1      	ldr	r1, [r6, #8]
     620:	2200      	movs	r2, #0
     622:	4b1b      	ldr	r3, [pc, #108]	; (690 <rtc_count_init+0xdc>)
     624:	4798      	blx	r3
     626:	e01b      	b.n	660 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     628:	883a      	ldrh	r2, [r7, #0]
     62a:	2304      	movs	r3, #4
     62c:	4313      	orrs	r3, r2
     62e:	803b      	strh	r3, [r7, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     630:	78f3      	ldrb	r3, [r6, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     634:	2b00      	cmp	r3, #0
     636:	d11f      	bne.n	678 <rtc_count_init+0xc4>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     638:	4d16      	ldr	r5, [pc, #88]	; (694 <rtc_count_init+0xe0>)
     63a:	1c20      	adds	r0, r4, #0
     63c:	47a8      	blx	r5
     63e:	2800      	cmp	r0, #0
     640:	d1fb      	bne.n	63a <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     642:	1c20      	adds	r0, r4, #0
     644:	68b1      	ldr	r1, [r6, #8]
     646:	2200      	movs	r2, #0
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <rtc_count_init+0xdc>)
     64a:	4798      	blx	r3
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     64c:	4d11      	ldr	r5, [pc, #68]	; (694 <rtc_count_init+0xe0>)
     64e:	1c20      	adds	r0, r4, #0
     650:	47a8      	blx	r5
     652:	2800      	cmp	r0, #0
     654:	d1fb      	bne.n	64e <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     656:	1c20      	adds	r0, r4, #0
     658:	68f1      	ldr	r1, [r6, #12]
     65a:	2201      	movs	r2, #1
     65c:	4b0c      	ldr	r3, [pc, #48]	; (690 <rtc_count_init+0xdc>)
     65e:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     660:	7933      	ldrb	r3, [r6, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     662:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     664:	2b00      	cmp	r3, #0
     666:	d007      	beq.n	678 <rtc_count_init+0xc4>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     668:	887a      	ldrh	r2, [r7, #2]
     66a:	2380      	movs	r3, #128	; 0x80
     66c:	01db      	lsls	r3, r3, #7
     66e:	4313      	orrs	r3, r2
     670:	807b      	strh	r3, [r7, #2]
     672:	e001      	b.n	678 <rtc_count_init+0xc4>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     674:	4d07      	ldr	r5, [pc, #28]	; (694 <rtc_count_init+0xe0>)
     676:	e7cd      	b.n	614 <rtc_count_init+0x60>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
     678:	b003      	add	sp, #12
     67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     67c:	40000400 	.word	0x40000400
     680:	00001491 	.word	0x00001491
     684:	00001405 	.word	0x00001405
     688:	00000529 	.word	0x00000529
     68c:	20000d9c 	.word	0x20000d9c
     690:	00000555 	.word	0x00000555
     694:	000004cd 	.word	0x000004cd

00000698 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode.
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     69a:	1c04      	adds	r4, r0, #0
     69c:	1c0f      	adds	r7, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     69e:	6806      	ldr	r6, [r0, #0]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     6a0:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     6a2:	2015      	movs	r0, #21
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     6a4:	2b00      	cmp	r3, #0
     6a6:	d105      	bne.n	6b4 <rtc_count_set_period+0x1c>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	while (rtc_count_is_syncing(module)) {
     6a8:	4d03      	ldr	r5, [pc, #12]	; (6b8 <rtc_count_set_period+0x20>)
     6aa:	1c20      	adds	r0, r4, #0
     6ac:	47a8      	blx	r5
     6ae:	2800      	cmp	r0, #0
     6b0:	d1fb      	bne.n	6aa <rtc_count_set_period+0x12>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     6b2:	82b7      	strh	r7, [r6, #20]

	return STATUS_OK;
}
     6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	000004cd 	.word	0x000004cd

000006bc <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     6bc:	2a02      	cmp	r2, #2
     6be:	d00b      	beq.n	6d8 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     6c0:	7903      	ldrb	r3, [r0, #4]
     6c2:	2b00      	cmp	r3, #0
     6c4:	d005      	beq.n	6d2 <rtc_count_register_callback+0x16>
     6c6:	2b01      	cmp	r3, #1
     6c8:	d112      	bne.n	6f0 <rtc_count_register_callback+0x34>
     6ca:	2317      	movs	r3, #23
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     6cc:	2a01      	cmp	r2, #1
     6ce:	d810      	bhi.n	6f2 <rtc_count_register_callback+0x36>
     6d0:	e002      	b.n	6d8 <rtc_count_register_callback+0x1c>
     6d2:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     6d4:	2a02      	cmp	r2, #2
     6d6:	d80c      	bhi.n	6f2 <rtc_count_register_callback+0x36>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     6d8:	1c93      	adds	r3, r2, #2
     6da:	009b      	lsls	r3, r3, #2
     6dc:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     6de:	8a83      	ldrh	r3, [r0, #20]
     6e0:	2101      	movs	r1, #1
     6e2:	4091      	lsls	r1, r2
     6e4:	1c0a      	adds	r2, r1, #0
     6e6:	431a      	orrs	r2, r3
     6e8:	b292      	uxth	r2, r2
     6ea:	8282      	strh	r2, [r0, #20]
     6ec:	2300      	movs	r3, #0
     6ee:	e000      	b.n	6f2 <rtc_count_register_callback+0x36>
			if (callback_type > RTC_NUM_OF_COMP16) {
				status = STATUS_ERR_INVALID_ARG;
			}
			break;
		default:
			status = STATUS_ERR_INVALID_ARG;
     6f0:	2317      	movs	r3, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     6f2:	1c18      	adds	r0, r3, #0
     6f4:	4770      	bx	lr
     6f6:	46c0      	nop			; (mov r8, r8)

000006f8 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     6f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     6fa:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     6fc:	2902      	cmp	r1, #2
     6fe:	d102      	bne.n	706 <rtc_count_enable_callback+0xe>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     700:	2280      	movs	r2, #128	; 0x80
     702:	71da      	strb	r2, [r3, #7]
     704:	e004      	b.n	710 <rtc_count_enable_callback+0x18>
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     706:	2201      	movs	r2, #1
     708:	408a      	lsls	r2, r1
     70a:	2403      	movs	r4, #3
     70c:	4022      	ands	r2, r4
     70e:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     710:	8ac3      	ldrh	r3, [r0, #22]
     712:	2201      	movs	r2, #1
     714:	408a      	lsls	r2, r1
     716:	1c11      	adds	r1, r2, #0
     718:	4319      	orrs	r1, r3
     71a:	b289      	uxth	r1, r1
     71c:	82c1      	strh	r1, [r0, #22]
}
     71e:	bd10      	pop	{r4, pc}

00000720 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     720:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     722:	4b12      	ldr	r3, [pc, #72]	; (76c <RTC_Handler+0x4c>)
     724:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
     726:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     728:	8ada      	ldrh	r2, [r3, #22]
	callback_mask &= module->registered_callback;
     72a:	8a99      	ldrh	r1, [r3, #20]
     72c:	1c08      	adds	r0, r1, #0
     72e:	4010      	ands	r0, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     730:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     732:	79e1      	ldrb	r1, [r4, #7]
     734:	400a      	ands	r2, r1

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     736:	09d1      	lsrs	r1, r2, #7
     738:	d006      	beq.n	748 <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     73a:	0741      	lsls	r1, r0, #29
     73c:	d501      	bpl.n	742 <RTC_Handler+0x22>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     73e:	691b      	ldr	r3, [r3, #16]
     740:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     742:	2380      	movs	r3, #128	; 0x80
     744:	7223      	strb	r3, [r4, #8]
     746:	e010      	b.n	76a <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     748:	07d1      	lsls	r1, r2, #31
     74a:	d506      	bpl.n	75a <RTC_Handler+0x3a>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     74c:	07c2      	lsls	r2, r0, #31
     74e:	d501      	bpl.n	754 <RTC_Handler+0x34>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     750:	689b      	ldr	r3, [r3, #8]
     752:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     754:	2301      	movs	r3, #1
     756:	7223      	strb	r3, [r4, #8]
     758:	e007      	b.n	76a <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     75a:	0791      	lsls	r1, r2, #30
     75c:	d505      	bpl.n	76a <RTC_Handler+0x4a>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     75e:	0782      	lsls	r2, r0, #30
     760:	d501      	bpl.n	766 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     762:	68db      	ldr	r3, [r3, #12]
     764:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     766:	2302      	movs	r3, #2
     768:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     76a:	bd10      	pop	{r4, pc}
     76c:	20000d9c 	.word	0x20000d9c

00000770 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     770:	b510      	push	{r4, lr}
     772:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     774:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     776:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     778:	4299      	cmp	r1, r3
     77a:	d30c      	bcc.n	796 <_sercom_get_sync_baud_val+0x26>
     77c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     77e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     780:	1c60      	adds	r0, r4, #1
     782:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     784:	428b      	cmp	r3, r1
     786:	d801      	bhi.n	78c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     788:	1c04      	adds	r4, r0, #0
     78a:	e7f8      	b.n	77e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     78c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     78e:	2cff      	cmp	r4, #255	; 0xff
     790:	d801      	bhi.n	796 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     792:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     794:	2000      	movs	r0, #0
	}
}
     796:	bd10      	pop	{r4, pc}

00000798 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     798:	b510      	push	{r4, lr}
     79a:	b082      	sub	sp, #8
     79c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     79e:	4b0f      	ldr	r3, [pc, #60]	; (7dc <sercom_set_gclk_generator+0x44>)
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d001      	beq.n	7aa <sercom_set_gclk_generator+0x12>
     7a6:	2900      	cmp	r1, #0
     7a8:	d00d      	beq.n	7c6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     7aa:	a901      	add	r1, sp, #4
     7ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     7ae:	2013      	movs	r0, #19
     7b0:	4b0b      	ldr	r3, [pc, #44]	; (7e0 <sercom_set_gclk_generator+0x48>)
     7b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     7b4:	2013      	movs	r0, #19
     7b6:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <sercom_set_gclk_generator+0x4c>)
     7b8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     7ba:	4b08      	ldr	r3, [pc, #32]	; (7dc <sercom_set_gclk_generator+0x44>)
     7bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     7be:	2201      	movs	r2, #1
     7c0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     7c2:	2000      	movs	r0, #0
     7c4:	e007      	b.n	7d6 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     7c6:	4b05      	ldr	r3, [pc, #20]	; (7dc <sercom_set_gclk_generator+0x44>)
     7c8:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     7ca:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     7cc:	1b14      	subs	r4, r2, r4
     7ce:	1e62      	subs	r2, r4, #1
     7d0:	4194      	sbcs	r4, r2
     7d2:	4264      	negs	r4, r4
     7d4:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     7d6:	b002      	add	sp, #8
     7d8:	bd10      	pop	{r4, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	2000009c 	.word	0x2000009c
     7e0:	00001491 	.word	0x00001491
     7e4:	00001405 	.word	0x00001405

000007e8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7e8:	4b44      	ldr	r3, [pc, #272]	; (8fc <_sercom_get_default_pad+0x114>)
     7ea:	4298      	cmp	r0, r3
     7ec:	d033      	beq.n	856 <_sercom_get_default_pad+0x6e>
     7ee:	d806      	bhi.n	7fe <_sercom_get_default_pad+0x16>
     7f0:	4b43      	ldr	r3, [pc, #268]	; (900 <_sercom_get_default_pad+0x118>)
     7f2:	4298      	cmp	r0, r3
     7f4:	d00d      	beq.n	812 <_sercom_get_default_pad+0x2a>
     7f6:	4b43      	ldr	r3, [pc, #268]	; (904 <_sercom_get_default_pad+0x11c>)
     7f8:	4298      	cmp	r0, r3
     7fa:	d01b      	beq.n	834 <_sercom_get_default_pad+0x4c>
     7fc:	e06f      	b.n	8de <_sercom_get_default_pad+0xf6>
     7fe:	4b42      	ldr	r3, [pc, #264]	; (908 <_sercom_get_default_pad+0x120>)
     800:	4298      	cmp	r0, r3
     802:	d04a      	beq.n	89a <_sercom_get_default_pad+0xb2>
     804:	4b41      	ldr	r3, [pc, #260]	; (90c <_sercom_get_default_pad+0x124>)
     806:	4298      	cmp	r0, r3
     808:	d058      	beq.n	8bc <_sercom_get_default_pad+0xd4>
     80a:	4b41      	ldr	r3, [pc, #260]	; (910 <_sercom_get_default_pad+0x128>)
     80c:	4298      	cmp	r0, r3
     80e:	d166      	bne.n	8de <_sercom_get_default_pad+0xf6>
     810:	e032      	b.n	878 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     812:	2901      	cmp	r1, #1
     814:	d065      	beq.n	8e2 <_sercom_get_default_pad+0xfa>
     816:	2900      	cmp	r1, #0
     818:	d004      	beq.n	824 <_sercom_get_default_pad+0x3c>
     81a:	2902      	cmp	r1, #2
     81c:	d006      	beq.n	82c <_sercom_get_default_pad+0x44>
     81e:	2903      	cmp	r1, #3
     820:	d006      	beq.n	830 <_sercom_get_default_pad+0x48>
     822:	e001      	b.n	828 <_sercom_get_default_pad+0x40>
     824:	483b      	ldr	r0, [pc, #236]	; (914 <_sercom_get_default_pad+0x12c>)
     826:	e067      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     828:	2000      	movs	r0, #0
     82a:	e065      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     82c:	483a      	ldr	r0, [pc, #232]	; (918 <_sercom_get_default_pad+0x130>)
     82e:	e063      	b.n	8f8 <_sercom_get_default_pad+0x110>
     830:	483a      	ldr	r0, [pc, #232]	; (91c <_sercom_get_default_pad+0x134>)
     832:	e061      	b.n	8f8 <_sercom_get_default_pad+0x110>
     834:	2901      	cmp	r1, #1
     836:	d056      	beq.n	8e6 <_sercom_get_default_pad+0xfe>
     838:	2900      	cmp	r1, #0
     83a:	d004      	beq.n	846 <_sercom_get_default_pad+0x5e>
     83c:	2902      	cmp	r1, #2
     83e:	d006      	beq.n	84e <_sercom_get_default_pad+0x66>
     840:	2903      	cmp	r1, #3
     842:	d006      	beq.n	852 <_sercom_get_default_pad+0x6a>
     844:	e001      	b.n	84a <_sercom_get_default_pad+0x62>
     846:	2003      	movs	r0, #3
     848:	e056      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     84a:	2000      	movs	r0, #0
     84c:	e054      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     84e:	4834      	ldr	r0, [pc, #208]	; (920 <_sercom_get_default_pad+0x138>)
     850:	e052      	b.n	8f8 <_sercom_get_default_pad+0x110>
     852:	4834      	ldr	r0, [pc, #208]	; (924 <_sercom_get_default_pad+0x13c>)
     854:	e050      	b.n	8f8 <_sercom_get_default_pad+0x110>
     856:	2901      	cmp	r1, #1
     858:	d047      	beq.n	8ea <_sercom_get_default_pad+0x102>
     85a:	2900      	cmp	r1, #0
     85c:	d004      	beq.n	868 <_sercom_get_default_pad+0x80>
     85e:	2902      	cmp	r1, #2
     860:	d006      	beq.n	870 <_sercom_get_default_pad+0x88>
     862:	2903      	cmp	r1, #3
     864:	d006      	beq.n	874 <_sercom_get_default_pad+0x8c>
     866:	e001      	b.n	86c <_sercom_get_default_pad+0x84>
     868:	482f      	ldr	r0, [pc, #188]	; (928 <_sercom_get_default_pad+0x140>)
     86a:	e045      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     86c:	2000      	movs	r0, #0
     86e:	e043      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     870:	482e      	ldr	r0, [pc, #184]	; (92c <_sercom_get_default_pad+0x144>)
     872:	e041      	b.n	8f8 <_sercom_get_default_pad+0x110>
     874:	482e      	ldr	r0, [pc, #184]	; (930 <_sercom_get_default_pad+0x148>)
     876:	e03f      	b.n	8f8 <_sercom_get_default_pad+0x110>
     878:	2901      	cmp	r1, #1
     87a:	d038      	beq.n	8ee <_sercom_get_default_pad+0x106>
     87c:	2900      	cmp	r1, #0
     87e:	d004      	beq.n	88a <_sercom_get_default_pad+0xa2>
     880:	2902      	cmp	r1, #2
     882:	d006      	beq.n	892 <_sercom_get_default_pad+0xaa>
     884:	2903      	cmp	r1, #3
     886:	d006      	beq.n	896 <_sercom_get_default_pad+0xae>
     888:	e001      	b.n	88e <_sercom_get_default_pad+0xa6>
     88a:	482a      	ldr	r0, [pc, #168]	; (934 <_sercom_get_default_pad+0x14c>)
     88c:	e034      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     88e:	2000      	movs	r0, #0
     890:	e032      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     892:	4829      	ldr	r0, [pc, #164]	; (938 <_sercom_get_default_pad+0x150>)
     894:	e030      	b.n	8f8 <_sercom_get_default_pad+0x110>
     896:	4829      	ldr	r0, [pc, #164]	; (93c <_sercom_get_default_pad+0x154>)
     898:	e02e      	b.n	8f8 <_sercom_get_default_pad+0x110>
     89a:	2901      	cmp	r1, #1
     89c:	d029      	beq.n	8f2 <_sercom_get_default_pad+0x10a>
     89e:	2900      	cmp	r1, #0
     8a0:	d004      	beq.n	8ac <_sercom_get_default_pad+0xc4>
     8a2:	2902      	cmp	r1, #2
     8a4:	d006      	beq.n	8b4 <_sercom_get_default_pad+0xcc>
     8a6:	2903      	cmp	r1, #3
     8a8:	d006      	beq.n	8b8 <_sercom_get_default_pad+0xd0>
     8aa:	e001      	b.n	8b0 <_sercom_get_default_pad+0xc8>
     8ac:	4824      	ldr	r0, [pc, #144]	; (940 <_sercom_get_default_pad+0x158>)
     8ae:	e023      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     8b0:	2000      	movs	r0, #0
     8b2:	e021      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8b4:	4823      	ldr	r0, [pc, #140]	; (944 <_sercom_get_default_pad+0x15c>)
     8b6:	e01f      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8b8:	4823      	ldr	r0, [pc, #140]	; (948 <_sercom_get_default_pad+0x160>)
     8ba:	e01d      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8bc:	2901      	cmp	r1, #1
     8be:	d01a      	beq.n	8f6 <_sercom_get_default_pad+0x10e>
     8c0:	2900      	cmp	r1, #0
     8c2:	d004      	beq.n	8ce <_sercom_get_default_pad+0xe6>
     8c4:	2902      	cmp	r1, #2
     8c6:	d006      	beq.n	8d6 <_sercom_get_default_pad+0xee>
     8c8:	2903      	cmp	r1, #3
     8ca:	d006      	beq.n	8da <_sercom_get_default_pad+0xf2>
     8cc:	e001      	b.n	8d2 <_sercom_get_default_pad+0xea>
     8ce:	481f      	ldr	r0, [pc, #124]	; (94c <_sercom_get_default_pad+0x164>)
     8d0:	e012      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     8d2:	2000      	movs	r0, #0
     8d4:	e010      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8d6:	481e      	ldr	r0, [pc, #120]	; (950 <_sercom_get_default_pad+0x168>)
     8d8:	e00e      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8da:	481e      	ldr	r0, [pc, #120]	; (954 <_sercom_get_default_pad+0x16c>)
     8dc:	e00c      	b.n	8f8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     8de:	2000      	movs	r0, #0
     8e0:	e00a      	b.n	8f8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e2:	481d      	ldr	r0, [pc, #116]	; (958 <_sercom_get_default_pad+0x170>)
     8e4:	e008      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8e6:	481d      	ldr	r0, [pc, #116]	; (95c <_sercom_get_default_pad+0x174>)
     8e8:	e006      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8ea:	481d      	ldr	r0, [pc, #116]	; (960 <_sercom_get_default_pad+0x178>)
     8ec:	e004      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8ee:	481d      	ldr	r0, [pc, #116]	; (964 <_sercom_get_default_pad+0x17c>)
     8f0:	e002      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8f2:	481d      	ldr	r0, [pc, #116]	; (968 <_sercom_get_default_pad+0x180>)
     8f4:	e000      	b.n	8f8 <_sercom_get_default_pad+0x110>
     8f6:	481d      	ldr	r0, [pc, #116]	; (96c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     8f8:	4770      	bx	lr
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	42001000 	.word	0x42001000
     900:	42000800 	.word	0x42000800
     904:	42000c00 	.word	0x42000c00
     908:	42001800 	.word	0x42001800
     90c:	42001c00 	.word	0x42001c00
     910:	42001400 	.word	0x42001400
     914:	00040003 	.word	0x00040003
     918:	00060003 	.word	0x00060003
     91c:	00070003 	.word	0x00070003
     920:	001e0003 	.word	0x001e0003
     924:	001f0003 	.word	0x001f0003
     928:	000c0002 	.word	0x000c0002
     92c:	000e0002 	.word	0x000e0002
     930:	000f0002 	.word	0x000f0002
     934:	00100003 	.word	0x00100003
     938:	00120003 	.word	0x00120003
     93c:	00130003 	.word	0x00130003
     940:	00530005 	.word	0x00530005
     944:	003e0005 	.word	0x003e0005
     948:	00520005 	.word	0x00520005
     94c:	00160003 	.word	0x00160003
     950:	00180003 	.word	0x00180003
     954:	00190003 	.word	0x00190003
     958:	00050003 	.word	0x00050003
     95c:	00010003 	.word	0x00010003
     960:	000d0002 	.word	0x000d0002
     964:	00110003 	.word	0x00110003
     968:	003f0005 	.word	0x003f0005
     96c:	00170003 	.word	0x00170003

00000970 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     970:	b570      	push	{r4, r5, r6, lr}
     972:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     974:	4a0c      	ldr	r2, [pc, #48]	; (9a8 <_sercom_get_sercom_inst_index+0x38>)
     976:	466b      	mov	r3, sp
     978:	ca70      	ldmia	r2!, {r4, r5, r6}
     97a:	c370      	stmia	r3!, {r4, r5, r6}
     97c:	ca32      	ldmia	r2!, {r1, r4, r5}
     97e:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     980:	9e00      	ldr	r6, [sp, #0]
     982:	4286      	cmp	r6, r0
     984:	d006      	beq.n	994 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     986:	2301      	movs	r3, #1
     988:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     98a:	4669      	mov	r1, sp
     98c:	5852      	ldr	r2, [r2, r1]
     98e:	4282      	cmp	r2, r0
     990:	d103      	bne.n	99a <_sercom_get_sercom_inst_index+0x2a>
     992:	e000      	b.n	996 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     994:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     996:	b2d8      	uxtb	r0, r3
     998:	e003      	b.n	9a2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     99a:	3301      	adds	r3, #1
     99c:	2b06      	cmp	r3, #6
     99e:	d1f3      	bne.n	988 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     9a0:	2000      	movs	r0, #0
}
     9a2:	b006      	add	sp, #24
     9a4:	bd70      	pop	{r4, r5, r6, pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	00004fd8 	.word	0x00004fd8

000009ac <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     9ac:	b508      	push	{r3, lr}
     9ae:	4b02      	ldr	r3, [pc, #8]	; (9b8 <SERCOM0_Handler+0xc>)
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	2000      	movs	r0, #0
     9b4:	4798      	blx	r3
     9b6:	bd08      	pop	{r3, pc}
     9b8:	200000a0 	.word	0x200000a0

000009bc <SERCOM1_Handler>:
     9bc:	b508      	push	{r3, lr}
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <SERCOM1_Handler+0xc>)
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	2001      	movs	r0, #1
     9c4:	4798      	blx	r3
     9c6:	bd08      	pop	{r3, pc}
     9c8:	200000a0 	.word	0x200000a0

000009cc <SERCOM2_Handler>:
     9cc:	b508      	push	{r3, lr}
     9ce:	4b02      	ldr	r3, [pc, #8]	; (9d8 <SERCOM2_Handler+0xc>)
     9d0:	689b      	ldr	r3, [r3, #8]
     9d2:	2002      	movs	r0, #2
     9d4:	4798      	blx	r3
     9d6:	bd08      	pop	{r3, pc}
     9d8:	200000a0 	.word	0x200000a0

000009dc <SERCOM3_Handler>:
     9dc:	b508      	push	{r3, lr}
     9de:	4b02      	ldr	r3, [pc, #8]	; (9e8 <SERCOM3_Handler+0xc>)
     9e0:	68db      	ldr	r3, [r3, #12]
     9e2:	2003      	movs	r0, #3
     9e4:	4798      	blx	r3
     9e6:	bd08      	pop	{r3, pc}
     9e8:	200000a0 	.word	0x200000a0

000009ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ee:	465f      	mov	r7, fp
     9f0:	4656      	mov	r6, sl
     9f2:	464d      	mov	r5, r9
     9f4:	4644      	mov	r4, r8
     9f6:	b4f0      	push	{r4, r5, r6, r7}
     9f8:	b089      	sub	sp, #36	; 0x24
     9fa:	1c07      	adds	r7, r0, #0
     9fc:	1c0d      	adds	r5, r1, #0
     9fe:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     a00:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     a02:	680b      	ldr	r3, [r1, #0]
     a04:	0798      	lsls	r0, r3, #30
     a06:	d400      	bmi.n	a0a <spi_init+0x1e>
     a08:	e08d      	b.n	b26 <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     a0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
     a0c:	9103      	str	r1, [sp, #12]
     a0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a10:	9204      	str	r2, [sp, #16]
     a12:	6b23      	ldr	r3, [r4, #48]	; 0x30
     a14:	9305      	str	r3, [sp, #20]
     a16:	6b60      	ldr	r0, [r4, #52]	; 0x34
     a18:	9006      	str	r0, [sp, #24]
     a1a:	2600      	movs	r6, #0

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a1c:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     a1e:	221f      	movs	r2, #31
     a20:	4690      	mov	r8, r2
     a22:	b2f1      	uxtb	r1, r6
     a24:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a26:	aa03      	add	r2, sp, #12
     a28:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     a2a:	2800      	cmp	r0, #0
     a2c:	d102      	bne.n	a34 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a2e:	1c28      	adds	r0, r5, #0
     a30:	4b8f      	ldr	r3, [pc, #572]	; (c70 <spi_init+0x284>)
     a32:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     a34:	1c41      	adds	r1, r0, #1
     a36:	d029      	beq.n	a8c <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a38:	0402      	lsls	r2, r0, #16
     a3a:	0c12      	lsrs	r2, r2, #16
     a3c:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     a3e:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a40:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a42:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a44:	0618      	lsls	r0, r3, #24
     a46:	d403      	bmi.n	a50 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     a48:	0951      	lsrs	r1, r2, #5
     a4a:	01c9      	lsls	r1, r1, #7
     a4c:	4b89      	ldr	r3, [pc, #548]	; (c74 <spi_init+0x288>)
     a4e:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     a50:	4640      	mov	r0, r8
     a52:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a54:	180b      	adds	r3, r1, r0
     a56:	3340      	adds	r3, #64	; 0x40
     a58:	781b      	ldrb	r3, [r3, #0]
     a5a:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a60:	4653      	mov	r3, sl
     a62:	07db      	lsls	r3, r3, #31
     a64:	d50c      	bpl.n	a80 <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     a66:	0840      	lsrs	r0, r0, #1
     a68:	1809      	adds	r1, r1, r0
     a6a:	3130      	adds	r1, #48	; 0x30
     a6c:	780b      	ldrb	r3, [r1, #0]
     a6e:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
     a70:	07d0      	lsls	r0, r2, #31
     a72:	d502      	bpl.n	a7a <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     a74:	091b      	lsrs	r3, r3, #4
     a76:	469b      	mov	fp, r3
     a78:	e002      	b.n	a80 <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     a7a:	220f      	movs	r2, #15
     a7c:	4013      	ands	r3, r2
     a7e:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a80:	45dc      	cmp	ip, fp
     a82:	d003      	beq.n	a8c <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     a84:	2300      	movs	r3, #0
     a86:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
     a88:	201c      	movs	r0, #28
     a8a:	e0ea      	b.n	c62 <spi_init+0x276>
     a8c:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a8e:	2e04      	cmp	r6, #4
     a90:	d1c7      	bne.n	a22 <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     a92:	2013      	movs	r0, #19
     a94:	4b78      	ldr	r3, [pc, #480]	; (c78 <spi_init+0x28c>)
     a96:	4798      	blx	r3
     a98:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a9a:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     a9c:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a9e:	2b01      	cmp	r3, #1
     aa0:	d111      	bne.n	ac6 <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
     aa2:	69a0      	ldr	r0, [r4, #24]
     aa4:	aa02      	add	r2, sp, #8
     aa6:	4b75      	ldr	r3, [pc, #468]	; (c7c <spi_init+0x290>)
     aa8:	4798      	blx	r3
     aaa:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     aac:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     aae:	2b00      	cmp	r3, #0
     ab0:	d000      	beq.n	ab4 <spi_init+0xc8>
     ab2:	e0d6      	b.n	c62 <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     ab4:	7b2b      	ldrb	r3, [r5, #12]
     ab6:	b2db      	uxtb	r3, r3
     ab8:	aa02      	add	r2, sp, #8
     aba:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     abc:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     abe:	429a      	cmp	r2, r3
     ac0:	d000      	beq.n	ac4 <spi_init+0xd8>
     ac2:	e0ce      	b.n	c62 <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     ac4:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     ac6:	68a2      	ldr	r2, [r4, #8]
     ac8:	6861      	ldr	r1, [r4, #4]
     aca:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     acc:	68e3      	ldr	r3, [r4, #12]
     ace:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ad0:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
     ad2:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
     ad4:	7c61      	ldrb	r1, [r4, #17]
     ad6:	2900      	cmp	r1, #0
     ad8:	d001      	beq.n	ade <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ada:	2180      	movs	r1, #128	; 0x80
     adc:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     ade:	7ca1      	ldrb	r1, [r4, #18]
     ae0:	2900      	cmp	r1, #0
     ae2:	d002      	beq.n	aea <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ae4:	2180      	movs	r1, #128	; 0x80
     ae6:	0289      	lsls	r1, r1, #10
     ae8:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     aea:	7ce1      	ldrb	r1, [r4, #19]
     aec:	2900      	cmp	r1, #0
     aee:	d002      	beq.n	af6 <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     af0:	2180      	movs	r1, #128	; 0x80
     af2:	0089      	lsls	r1, r1, #2
     af4:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     af6:	7d21      	ldrb	r1, [r4, #20]
     af8:	2900      	cmp	r1, #0
     afa:	d002      	beq.n	b02 <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     afc:	2180      	movs	r1, #128	; 0x80
     afe:	0189      	lsls	r1, r1, #6
     b00:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     b02:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     b04:	2002      	movs	r0, #2
     b06:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     b08:	428a      	cmp	r2, r1
     b0a:	d108      	bne.n	b1e <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
     b0c:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     b0e:	429a      	cmp	r2, r3
     b10:	d105      	bne.n	b1e <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     b12:	7823      	ldrb	r3, [r4, #0]
     b14:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
     b16:	7c23      	ldrb	r3, [r4, #16]
     b18:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
     b1a:	2000      	movs	r0, #0
     b1c:	e0a1      	b.n	c62 <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     b1e:	2300      	movs	r3, #0
     b20:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
     b22:	201c      	movs	r0, #28
     b24:	e09d      	b.n	c62 <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b26:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     b28:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b2a:	07d9      	lsls	r1, r3, #31
     b2c:	d500      	bpl.n	b30 <spi_init+0x144>
     b2e:	e098      	b.n	c62 <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b30:	1c28      	adds	r0, r5, #0
     b32:	4b53      	ldr	r3, [pc, #332]	; (c80 <spi_init+0x294>)
     b34:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b36:	4b53      	ldr	r3, [pc, #332]	; (c84 <spi_init+0x298>)
     b38:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b3a:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b3c:	2601      	movs	r6, #1
     b3e:	4096      	lsls	r6, r2
     b40:	1c32      	adds	r2, r6, #0
     b42:	430a      	orrs	r2, r1
     b44:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b46:	a907      	add	r1, sp, #28
     b48:	2624      	movs	r6, #36	; 0x24
     b4a:	5da3      	ldrb	r3, [r4, r6]
     b4c:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b4e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b50:	b2c0      	uxtb	r0, r0
     b52:	4680      	mov	r8, r0
     b54:	4b4c      	ldr	r3, [pc, #304]	; (c88 <spi_init+0x29c>)
     b56:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b58:	4640      	mov	r0, r8
     b5a:	4b4c      	ldr	r3, [pc, #304]	; (c8c <spi_init+0x2a0>)
     b5c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b5e:	5da0      	ldrb	r0, [r4, r6]
     b60:	2100      	movs	r1, #0
     b62:	4b4b      	ldr	r3, [pc, #300]	; (c90 <spi_init+0x2a4>)
     b64:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b66:	7823      	ldrb	r3, [r4, #0]
     b68:	2b01      	cmp	r3, #1
     b6a:	d103      	bne.n	b74 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b6c:	682a      	ldr	r2, [r5, #0]
     b6e:	230c      	movs	r3, #12
     b70:	4313      	orrs	r3, r2
     b72:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b74:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b76:	ab02      	add	r3, sp, #8
     b78:	2280      	movs	r2, #128	; 0x80
     b7a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b7c:	2200      	movs	r2, #0
     b7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b80:	2101      	movs	r1, #1
     b82:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     b84:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b86:	7823      	ldrb	r3, [r4, #0]
     b88:	2b00      	cmp	r3, #0
     b8a:	d101      	bne.n	b90 <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b8c:	ab02      	add	r3, sp, #8
     b8e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     b92:	9203      	str	r2, [sp, #12]
     b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b96:	9304      	str	r3, [sp, #16]
     b98:	6b20      	ldr	r0, [r4, #48]	; 0x30
     b9a:	9005      	str	r0, [sp, #20]
     b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
     b9e:	9106      	str	r1, [sp, #24]
     ba0:	2500      	movs	r5, #0
     ba2:	b2e9      	uxtb	r1, r5
     ba4:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ba6:	aa03      	add	r2, sp, #12
     ba8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     baa:	2800      	cmp	r0, #0
     bac:	d102      	bne.n	bb4 <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     bae:	1c30      	adds	r0, r6, #0
     bb0:	4a2f      	ldr	r2, [pc, #188]	; (c70 <spi_init+0x284>)
     bb2:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     bb4:	1c43      	adds	r3, r0, #1
     bb6:	d006      	beq.n	bc6 <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bb8:	4669      	mov	r1, sp
     bba:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bbc:	0c00      	lsrs	r0, r0, #16
     bbe:	b2c0      	uxtb	r0, r0
     bc0:	a902      	add	r1, sp, #8
     bc2:	4a34      	ldr	r2, [pc, #208]	; (c94 <spi_init+0x2a8>)
     bc4:	4790      	blx	r2
     bc6:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     bc8:	2d04      	cmp	r5, #4
     bca:	d1ea      	bne.n	ba2 <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     bcc:	7823      	ldrb	r3, [r4, #0]
     bce:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     bd0:	7c23      	ldrb	r3, [r4, #16]
     bd2:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     bd4:	7ca3      	ldrb	r3, [r4, #18]
     bd6:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     bd8:	7d23      	ldrb	r3, [r4, #20]
     bda:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     bdc:	2200      	movs	r2, #0
     bde:	466b      	mov	r3, sp
     be0:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     be2:	7823      	ldrb	r3, [r4, #0]
     be4:	2b01      	cmp	r3, #1
     be6:	d114      	bne.n	c12 <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     be8:	6838      	ldr	r0, [r7, #0]
     bea:	4b25      	ldr	r3, [pc, #148]	; (c80 <spi_init+0x294>)
     bec:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bee:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bf0:	b2c0      	uxtb	r0, r0
     bf2:	4b21      	ldr	r3, [pc, #132]	; (c78 <spi_init+0x28c>)
     bf4:	4798      	blx	r3
     bf6:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     bf8:	69a0      	ldr	r0, [r4, #24]
     bfa:	466a      	mov	r2, sp
     bfc:	3206      	adds	r2, #6
     bfe:	4b1f      	ldr	r3, [pc, #124]	; (c7c <spi_init+0x290>)
     c00:	4798      	blx	r3
     c02:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     c04:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     c06:	2b00      	cmp	r3, #0
     c08:	d12b      	bne.n	c62 <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     c0a:	466b      	mov	r3, sp
     c0c:	3306      	adds	r3, #6
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     c12:	68a2      	ldr	r2, [r4, #8]
     c14:	6863      	ldr	r3, [r4, #4]
     c16:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     c18:	68e0      	ldr	r0, [r4, #12]
     c1a:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
     c1c:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c1e:	7c61      	ldrb	r1, [r4, #17]
     c20:	2900      	cmp	r1, #0
     c22:	d103      	bne.n	c2c <spi_init+0x240>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c24:	491c      	ldr	r1, [pc, #112]	; (c98 <spi_init+0x2ac>)
     c26:	7889      	ldrb	r1, [r1, #2]
     c28:	0788      	lsls	r0, r1, #30
     c2a:	d501      	bpl.n	c30 <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     c2c:	2180      	movs	r1, #128	; 0x80
     c2e:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     c30:	7ca1      	ldrb	r1, [r4, #18]
     c32:	2900      	cmp	r1, #0
     c34:	d002      	beq.n	c3c <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c36:	2180      	movs	r1, #128	; 0x80
     c38:	0289      	lsls	r1, r1, #10
     c3a:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     c3c:	7ce1      	ldrb	r1, [r4, #19]
     c3e:	2900      	cmp	r1, #0
     c40:	d002      	beq.n	c48 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c42:	2180      	movs	r1, #128	; 0x80
     c44:	0089      	lsls	r1, r1, #2
     c46:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     c48:	7d21      	ldrb	r1, [r4, #20]
     c4a:	2900      	cmp	r1, #0
     c4c:	d002      	beq.n	c54 <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c4e:	2180      	movs	r1, #128	; 0x80
     c50:	0189      	lsls	r1, r1, #6
     c52:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     c54:	6831      	ldr	r1, [r6, #0]
     c56:	430a      	orrs	r2, r1
     c58:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     c5a:	6872      	ldr	r2, [r6, #4]
     c5c:	4313      	orrs	r3, r2
     c5e:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     c60:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     c62:	b009      	add	sp, #36	; 0x24
     c64:	bc3c      	pop	{r2, r3, r4, r5}
     c66:	4690      	mov	r8, r2
     c68:	4699      	mov	r9, r3
     c6a:	46a2      	mov	sl, r4
     c6c:	46ab      	mov	fp, r5
     c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c70:	000007e9 	.word	0x000007e9
     c74:	41004400 	.word	0x41004400
     c78:	000014ad 	.word	0x000014ad
     c7c:	00000771 	.word	0x00000771
     c80:	00000971 	.word	0x00000971
     c84:	40000400 	.word	0x40000400
     c88:	00001491 	.word	0x00001491
     c8c:	00001405 	.word	0x00001405
     c90:	00000799 	.word	0x00000799
     c94:	0000156d 	.word	0x0000156d
     c98:	41002000 	.word	0x41002000

00000c9c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c9c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c9e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     ca0:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ca2:	2c01      	cmp	r4, #1
     ca4:	d16c      	bne.n	d80 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     ca6:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     ca8:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     caa:	2c00      	cmp	r4, #0
     cac:	d168      	bne.n	d80 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     cae:	2a00      	cmp	r2, #0
     cb0:	d057      	beq.n	d62 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     cb2:	784b      	ldrb	r3, [r1, #1]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d044      	beq.n	d42 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cb8:	6802      	ldr	r2, [r0, #0]
     cba:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     cbc:	07dc      	lsls	r4, r3, #31
     cbe:	d40f      	bmi.n	ce0 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     cc0:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cc2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cc4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cc6:	2900      	cmp	r1, #0
     cc8:	d103      	bne.n	cd2 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     cca:	095a      	lsrs	r2, r3, #5
     ccc:	01d2      	lsls	r2, r2, #7
     cce:	492d      	ldr	r1, [pc, #180]	; (d84 <spi_select_slave+0xe8>)
     cd0:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cd2:	211f      	movs	r1, #31
     cd4:	400b      	ands	r3, r1
     cd6:	2101      	movs	r1, #1
     cd8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     cda:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     cdc:	2305      	movs	r3, #5
     cde:	e04f      	b.n	d80 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     ce0:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ce2:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ce4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ce6:	2c00      	cmp	r4, #0
     ce8:	d103      	bne.n	cf2 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     cea:	095a      	lsrs	r2, r3, #5
     cec:	01d2      	lsls	r2, r2, #7
     cee:	4c25      	ldr	r4, [pc, #148]	; (d84 <spi_select_slave+0xe8>)
     cf0:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cf2:	241f      	movs	r4, #31
     cf4:	4023      	ands	r3, r4
     cf6:	2401      	movs	r4, #1
     cf8:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cfa:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     cfc:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cfe:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d00:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     d02:	07d4      	lsls	r4, r2, #31
     d04:	d500      	bpl.n	d08 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d06:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     d08:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d0a:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     d0c:	2a00      	cmp	r2, #0
     d0e:	d137      	bne.n	d80 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d10:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d12:	2104      	movs	r1, #4
     d14:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     d16:	420b      	tst	r3, r1
     d18:	d0fc      	beq.n	d14 <spi_select_slave+0x78>
     d1a:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d1c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     d1e:	074c      	lsls	r4, r1, #29
     d20:	d52e      	bpl.n	d80 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d22:	8b53      	ldrh	r3, [r2, #26]
     d24:	0759      	lsls	r1, r3, #29
     d26:	d503      	bpl.n	d30 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     d28:	8b51      	ldrh	r1, [r2, #26]
     d2a:	2304      	movs	r3, #4
     d2c:	430b      	orrs	r3, r1
     d2e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d30:	7983      	ldrb	r3, [r0, #6]
     d32:	2b01      	cmp	r3, #1
     d34:	d102      	bne.n	d3c <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d36:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d38:	2300      	movs	r3, #0
     d3a:	e021      	b.n	d80 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d3e:	2300      	movs	r3, #0
     d40:	e01e      	b.n	d80 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     d42:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d44:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d46:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d48:	2900      	cmp	r1, #0
     d4a:	d103      	bne.n	d54 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     d4c:	095a      	lsrs	r2, r3, #5
     d4e:	01d2      	lsls	r2, r2, #7
     d50:	4c0c      	ldr	r4, [pc, #48]	; (d84 <spi_select_slave+0xe8>)
     d52:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d54:	211f      	movs	r1, #31
     d56:	400b      	ands	r3, r1
     d58:	2101      	movs	r1, #1
     d5a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d5c:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d5e:	2300      	movs	r3, #0
     d60:	e00e      	b.n	d80 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     d62:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d64:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d66:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d68:	2900      	cmp	r1, #0
     d6a:	d103      	bne.n	d74 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     d6c:	095a      	lsrs	r2, r3, #5
     d6e:	01d2      	lsls	r2, r2, #7
     d70:	4904      	ldr	r1, [pc, #16]	; (d84 <spi_select_slave+0xe8>)
     d72:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d74:	211f      	movs	r1, #31
     d76:	400b      	ands	r3, r1
     d78:	2101      	movs	r1, #1
     d7a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d7c:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     d7e:	2300      	movs	r3, #0
}
     d80:	1c18      	adds	r0, r3, #0
     d82:	bd10      	pop	{r4, pc}
     d84:	41004400 	.word	0x41004400

00000d88 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d88:	b508      	push	{r3, lr}
	switch (clock_source) {
     d8a:	2808      	cmp	r0, #8
     d8c:	d834      	bhi.n	df8 <system_clock_source_get_hz+0x70>
     d8e:	0080      	lsls	r0, r0, #2
     d90:	4b1b      	ldr	r3, [pc, #108]	; (e00 <system_clock_source_get_hz+0x78>)
     d92:	581b      	ldr	r3, [r3, r0]
     d94:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     d96:	2080      	movs	r0, #128	; 0x80
     d98:	0200      	lsls	r0, r0, #8
     d9a:	e030      	b.n	dfe <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     d9c:	4b19      	ldr	r3, [pc, #100]	; (e04 <system_clock_source_get_hz+0x7c>)
     d9e:	6918      	ldr	r0, [r3, #16]
     da0:	e02d      	b.n	dfe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     da2:	4b19      	ldr	r3, [pc, #100]	; (e08 <system_clock_source_get_hz+0x80>)
     da4:	6a18      	ldr	r0, [r3, #32]
     da6:	0580      	lsls	r0, r0, #22
     da8:	0f80      	lsrs	r0, r0, #30
     daa:	4b18      	ldr	r3, [pc, #96]	; (e0c <system_clock_source_get_hz+0x84>)
     dac:	40c3      	lsrs	r3, r0
     dae:	1c18      	adds	r0, r3, #0
     db0:	e025      	b.n	dfe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     db2:	4b14      	ldr	r3, [pc, #80]	; (e04 <system_clock_source_get_hz+0x7c>)
     db4:	6958      	ldr	r0, [r3, #20]
     db6:	e022      	b.n	dfe <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     db8:	4b12      	ldr	r3, [pc, #72]	; (e04 <system_clock_source_get_hz+0x7c>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	2002      	movs	r0, #2
     dbe:	4018      	ands	r0, r3
     dc0:	d01d      	beq.n	dfe <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dc2:	4911      	ldr	r1, [pc, #68]	; (e08 <system_clock_source_get_hz+0x80>)
     dc4:	2210      	movs	r2, #16
     dc6:	68cb      	ldr	r3, [r1, #12]
     dc8:	421a      	tst	r2, r3
     dca:	d0fc      	beq.n	dc6 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     dcc:	4b0d      	ldr	r3, [pc, #52]	; (e04 <system_clock_source_get_hz+0x7c>)
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	075a      	lsls	r2, r3, #29
     dd2:	d513      	bpl.n	dfc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     dd4:	2000      	movs	r0, #0
     dd6:	4b0e      	ldr	r3, [pc, #56]	; (e10 <system_clock_source_get_hz+0x88>)
     dd8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     dda:	4b0a      	ldr	r3, [pc, #40]	; (e04 <system_clock_source_get_hz+0x7c>)
     ddc:	689b      	ldr	r3, [r3, #8]
     dde:	041b      	lsls	r3, r3, #16
     de0:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     de2:	4358      	muls	r0, r3
     de4:	e00b      	b.n	dfe <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     de6:	2350      	movs	r3, #80	; 0x50
     de8:	4a07      	ldr	r2, [pc, #28]	; (e08 <system_clock_source_get_hz+0x80>)
     dea:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     dec:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     dee:	075a      	lsls	r2, r3, #29
     df0:	d505      	bpl.n	dfe <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     df2:	4b04      	ldr	r3, [pc, #16]	; (e04 <system_clock_source_get_hz+0x7c>)
     df4:	68d8      	ldr	r0, [r3, #12]
     df6:	e002      	b.n	dfe <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     df8:	2000      	movs	r0, #0
     dfa:	e000      	b.n	dfe <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     dfc:	4805      	ldr	r0, [pc, #20]	; (e14 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     dfe:	bd08      	pop	{r3, pc}
     e00:	00004ff0 	.word	0x00004ff0
     e04:	200000b8 	.word	0x200000b8
     e08:	40000800 	.word	0x40000800
     e0c:	007a1200 	.word	0x007a1200
     e10:	000014ad 	.word	0x000014ad
     e14:	02dc6c00 	.word	0x02dc6c00

00000e18 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     e18:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     e1a:	4b0c      	ldr	r3, [pc, #48]	; (e4c <system_clock_source_osc8m_set_config+0x34>)
     e1c:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     e1e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e20:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     e22:	7840      	ldrb	r0, [r0, #1]
     e24:	2201      	movs	r2, #1
     e26:	4010      	ands	r0, r2
     e28:	0180      	lsls	r0, r0, #6
     e2a:	2640      	movs	r6, #64	; 0x40
     e2c:	43b4      	bics	r4, r6
     e2e:	4304      	orrs	r4, r0
     e30:	402a      	ands	r2, r5
     e32:	01d0      	lsls	r0, r2, #7
     e34:	2280      	movs	r2, #128	; 0x80
     e36:	4394      	bics	r4, r2
     e38:	1c22      	adds	r2, r4, #0
     e3a:	4302      	orrs	r2, r0
     e3c:	2003      	movs	r0, #3
     e3e:	4001      	ands	r1, r0
     e40:	0209      	lsls	r1, r1, #8
     e42:	4803      	ldr	r0, [pc, #12]	; (e50 <system_clock_source_osc8m_set_config+0x38>)
     e44:	4002      	ands	r2, r0
     e46:	430a      	orrs	r2, r1
     e48:	621a      	str	r2, [r3, #32]
}
     e4a:	bd70      	pop	{r4, r5, r6, pc}
     e4c:	40000800 	.word	0x40000800
     e50:	fffffcff 	.word	0xfffffcff

00000e54 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     e54:	b5f0      	push	{r4, r5, r6, r7, lr}
     e56:	464f      	mov	r7, r9
     e58:	4646      	mov	r6, r8
     e5a:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     e5c:	4a19      	ldr	r2, [pc, #100]	; (ec4 <system_clock_source_osc32k_set_config+0x70>)
     e5e:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     e60:	7841      	ldrb	r1, [r0, #1]
     e62:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     e64:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     e66:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     e68:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     e6a:	7943      	ldrb	r3, [r0, #5]
     e6c:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
     e6e:	7880      	ldrb	r0, [r0, #2]
     e70:	2301      	movs	r3, #1
     e72:	4018      	ands	r0, r3
     e74:	0080      	lsls	r0, r0, #2
     e76:	2104      	movs	r1, #4
     e78:	438c      	bics	r4, r1
     e7a:	4304      	orrs	r4, r0
     e7c:	4660      	mov	r0, ip
     e7e:	4018      	ands	r0, r3
     e80:	00c0      	lsls	r0, r0, #3
     e82:	2108      	movs	r1, #8
     e84:	438c      	bics	r4, r1
     e86:	4304      	orrs	r4, r0
     e88:	1c18      	adds	r0, r3, #0
     e8a:	4038      	ands	r0, r7
     e8c:	0180      	lsls	r0, r0, #6
     e8e:	2740      	movs	r7, #64	; 0x40
     e90:	43bc      	bics	r4, r7
     e92:	4304      	orrs	r4, r0
     e94:	1c18      	adds	r0, r3, #0
     e96:	4030      	ands	r0, r6
     e98:	01c0      	lsls	r0, r0, #7
     e9a:	2680      	movs	r6, #128	; 0x80
     e9c:	43b4      	bics	r4, r6
     e9e:	4304      	orrs	r4, r0
     ea0:	2007      	movs	r0, #7
     ea2:	4028      	ands	r0, r5
     ea4:	0200      	lsls	r0, r0, #8
     ea6:	4d08      	ldr	r5, [pc, #32]	; (ec8 <system_clock_source_osc32k_set_config+0x74>)
     ea8:	402c      	ands	r4, r5
     eaa:	4304      	orrs	r4, r0
     eac:	4649      	mov	r1, r9
     eae:	400b      	ands	r3, r1
     eb0:	0319      	lsls	r1, r3, #12
     eb2:	4806      	ldr	r0, [pc, #24]	; (ecc <system_clock_source_osc32k_set_config+0x78>)
     eb4:	1c23      	adds	r3, r4, #0
     eb6:	4003      	ands	r3, r0
     eb8:	430b      	orrs	r3, r1
     eba:	6193      	str	r3, [r2, #24]
}
     ebc:	bc0c      	pop	{r2, r3}
     ebe:	4690      	mov	r8, r2
     ec0:	4699      	mov	r9, r3
     ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec4:	40000800 	.word	0x40000800
     ec8:	fffff8ff 	.word	0xfffff8ff
     ecc:	ffffefff 	.word	0xffffefff

00000ed0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed2:	465f      	mov	r7, fp
     ed4:	4656      	mov	r6, sl
     ed6:	464d      	mov	r5, r9
     ed8:	4644      	mov	r4, r8
     eda:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     edc:	4a25      	ldr	r2, [pc, #148]	; (f74 <system_clock_source_xosc32k_set_config+0xa4>)
     ede:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
     ee0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     ee2:	7803      	ldrb	r3, [r0, #0]
     ee4:	4259      	negs	r1, r3
     ee6:	4159      	adcs	r1, r3
     ee8:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     eea:	7883      	ldrb	r3, [r0, #2]
     eec:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
     eee:	78c1      	ldrb	r1, [r0, #3]
     ef0:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
     ef2:	7903      	ldrb	r3, [r0, #4]
     ef4:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
     ef6:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     ef8:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
     efa:	7b81      	ldrb	r1, [r0, #14]
     efc:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     efe:	6880      	ldr	r0, [r0, #8]
     f00:	4b1d      	ldr	r3, [pc, #116]	; (f78 <system_clock_source_xosc32k_set_config+0xa8>)
     f02:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
     f04:	2301      	movs	r3, #1
     f06:	4651      	mov	r1, sl
     f08:	0088      	lsls	r0, r1, #2
     f0a:	2104      	movs	r1, #4
     f0c:	438c      	bics	r4, r1
     f0e:	4304      	orrs	r4, r0
     f10:	4648      	mov	r0, r9
     f12:	4018      	ands	r0, r3
     f14:	00c0      	lsls	r0, r0, #3
     f16:	2108      	movs	r1, #8
     f18:	438c      	bics	r4, r1
     f1a:	4304      	orrs	r4, r0
     f1c:	4640      	mov	r0, r8
     f1e:	4018      	ands	r0, r3
     f20:	0100      	lsls	r0, r0, #4
     f22:	2110      	movs	r1, #16
     f24:	438c      	bics	r4, r1
     f26:	4304      	orrs	r4, r0
     f28:	4660      	mov	r0, ip
     f2a:	4018      	ands	r0, r3
     f2c:	0140      	lsls	r0, r0, #5
     f2e:	2120      	movs	r1, #32
     f30:	438c      	bics	r4, r1
     f32:	4304      	orrs	r4, r0
     f34:	1c18      	adds	r0, r3, #0
     f36:	4038      	ands	r0, r7
     f38:	0180      	lsls	r0, r0, #6
     f3a:	2740      	movs	r7, #64	; 0x40
     f3c:	43bc      	bics	r4, r7
     f3e:	4304      	orrs	r4, r0
     f40:	1c18      	adds	r0, r3, #0
     f42:	4030      	ands	r0, r6
     f44:	01c0      	lsls	r0, r0, #7
     f46:	2680      	movs	r6, #128	; 0x80
     f48:	43b4      	bics	r4, r6
     f4a:	4304      	orrs	r4, r0
     f4c:	2007      	movs	r0, #7
     f4e:	4028      	ands	r0, r5
     f50:	0200      	lsls	r0, r0, #8
     f52:	4d0a      	ldr	r5, [pc, #40]	; (f7c <system_clock_source_xosc32k_set_config+0xac>)
     f54:	402c      	ands	r4, r5
     f56:	4304      	orrs	r4, r0
     f58:	4659      	mov	r1, fp
     f5a:	400b      	ands	r3, r1
     f5c:	0319      	lsls	r1, r3, #12
     f5e:	4808      	ldr	r0, [pc, #32]	; (f80 <system_clock_source_xosc32k_set_config+0xb0>)
     f60:	1c23      	adds	r3, r4, #0
     f62:	4003      	ands	r3, r0
     f64:	430b      	orrs	r3, r1
     f66:	8293      	strh	r3, [r2, #20]
}
     f68:	bc3c      	pop	{r2, r3, r4, r5}
     f6a:	4690      	mov	r8, r2
     f6c:	4699      	mov	r9, r3
     f6e:	46a2      	mov	sl, r4
     f70:	46ab      	mov	fp, r5
     f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f74:	40000800 	.word	0x40000800
     f78:	200000b8 	.word	0x200000b8
     f7c:	fffff8ff 	.word	0xfffff8ff
     f80:	ffffefff 	.word	0xffffefff

00000f84 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     f84:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f86:	7a02      	ldrb	r2, [r0, #8]
     f88:	0692      	lsls	r2, r2, #26
     f8a:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     f8c:	8943      	ldrh	r3, [r0, #10]
     f8e:	059b      	lsls	r3, r3, #22
     f90:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     f92:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
     f94:	4b15      	ldr	r3, [pc, #84]	; (fec <system_clock_source_dfll_set_config+0x68>)
     f96:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
     f98:	8881      	ldrh	r1, [r0, #4]
     f9a:	8842      	ldrh	r2, [r0, #2]
     f9c:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     f9e:	79c4      	ldrb	r4, [r0, #7]
     fa0:	7982      	ldrb	r2, [r0, #6]
     fa2:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     fa4:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     fa6:	7841      	ldrb	r1, [r0, #1]
     fa8:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
     faa:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
     fac:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     fae:	7803      	ldrb	r3, [r0, #0]
     fb0:	2b04      	cmp	r3, #4
     fb2:	d10f      	bne.n	fd4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     fb4:	7b02      	ldrb	r2, [r0, #12]
     fb6:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     fb8:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     fba:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     fbc:	89c3      	ldrh	r3, [r0, #14]
     fbe:	041b      	lsls	r3, r3, #16
     fc0:	490b      	ldr	r1, [pc, #44]	; (ff0 <system_clock_source_dfll_set_config+0x6c>)
     fc2:	400b      	ands	r3, r1
     fc4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
     fc6:	4b09      	ldr	r3, [pc, #36]	; (fec <system_clock_source_dfll_set_config+0x68>)
     fc8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     fca:	6819      	ldr	r1, [r3, #0]
     fcc:	2204      	movs	r2, #4
     fce:	430a      	orrs	r2, r1
     fd0:	601a      	str	r2, [r3, #0]
     fd2:	e009      	b.n	fe8 <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     fd4:	2b20      	cmp	r3, #32
     fd6:	d107      	bne.n	fe8 <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     fd8:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
     fda:	4b04      	ldr	r3, [pc, #16]	; (fec <system_clock_source_dfll_set_config+0x68>)
     fdc:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     fde:	6819      	ldr	r1, [r3, #0]
     fe0:	2284      	movs	r2, #132	; 0x84
     fe2:	00d2      	lsls	r2, r2, #3
     fe4:	430a      	orrs	r2, r1
     fe6:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     fe8:	bd10      	pop	{r4, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	200000b8 	.word	0x200000b8
     ff0:	03ff0000 	.word	0x03ff0000

00000ff4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ff4:	2808      	cmp	r0, #8
     ff6:	d843      	bhi.n	1080 <system_clock_source_enable+0x8c>
     ff8:	0080      	lsls	r0, r0, #2
     ffa:	4b22      	ldr	r3, [pc, #136]	; (1084 <system_clock_source_enable+0x90>)
     ffc:	581b      	ldr	r3, [r3, r0]
     ffe:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1000:	2000      	movs	r0, #0
    1002:	e03e      	b.n	1082 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1004:	4b20      	ldr	r3, [pc, #128]	; (1088 <system_clock_source_enable+0x94>)
    1006:	6a19      	ldr	r1, [r3, #32]
    1008:	2202      	movs	r2, #2
    100a:	430a      	orrs	r2, r1
    100c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    100e:	2000      	movs	r0, #0
    1010:	e037      	b.n	1082 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1012:	4b1d      	ldr	r3, [pc, #116]	; (1088 <system_clock_source_enable+0x94>)
    1014:	6999      	ldr	r1, [r3, #24]
    1016:	2202      	movs	r2, #2
    1018:	430a      	orrs	r2, r1
    101a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    101c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    101e:	e030      	b.n	1082 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1020:	4b19      	ldr	r3, [pc, #100]	; (1088 <system_clock_source_enable+0x94>)
    1022:	8a19      	ldrh	r1, [r3, #16]
    1024:	2202      	movs	r2, #2
    1026:	430a      	orrs	r2, r1
    1028:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    102a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    102c:	e029      	b.n	1082 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    102e:	4b16      	ldr	r3, [pc, #88]	; (1088 <system_clock_source_enable+0x94>)
    1030:	8a99      	ldrh	r1, [r3, #20]
    1032:	2202      	movs	r2, #2
    1034:	430a      	orrs	r2, r1
    1036:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1038:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    103a:	e022      	b.n	1082 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    103c:	4b13      	ldr	r3, [pc, #76]	; (108c <system_clock_source_enable+0x98>)
    103e:	6819      	ldr	r1, [r3, #0]
    1040:	2202      	movs	r2, #2
    1042:	430a      	orrs	r2, r1
    1044:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1046:	681a      	ldr	r2, [r3, #0]
    1048:	4b11      	ldr	r3, [pc, #68]	; (1090 <system_clock_source_enable+0x9c>)
    104a:	401a      	ands	r2, r3
    104c:	4b0e      	ldr	r3, [pc, #56]	; (1088 <system_clock_source_enable+0x94>)
    104e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1050:	1c19      	adds	r1, r3, #0
    1052:	2210      	movs	r2, #16
    1054:	68cb      	ldr	r3, [r1, #12]
    1056:	421a      	tst	r2, r3
    1058:	d0fc      	beq.n	1054 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    105a:	4a0c      	ldr	r2, [pc, #48]	; (108c <system_clock_source_enable+0x98>)
    105c:	6891      	ldr	r1, [r2, #8]
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <system_clock_source_enable+0x94>)
    1060:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1062:	6851      	ldr	r1, [r2, #4]
    1064:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1066:	6812      	ldr	r2, [r2, #0]
    1068:	b292      	uxth	r2, r2
    106a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    106c:	2000      	movs	r0, #0
    106e:	e008      	b.n	1082 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1070:	4a05      	ldr	r2, [pc, #20]	; (1088 <system_clock_source_enable+0x94>)
    1072:	2344      	movs	r3, #68	; 0x44
    1074:	5cd0      	ldrb	r0, [r2, r3]
    1076:	2102      	movs	r1, #2
    1078:	4301      	orrs	r1, r0
    107a:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    107c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    107e:	e000      	b.n	1082 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1080:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1082:	4770      	bx	lr
    1084:	00005014 	.word	0x00005014
    1088:	40000800 	.word	0x40000800
    108c:	200000b8 	.word	0x200000b8
    1090:	0000ff7f 	.word	0x0000ff7f

00001094 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1094:	b5f0      	push	{r4, r5, r6, r7, lr}
    1096:	4657      	mov	r7, sl
    1098:	464e      	mov	r6, r9
    109a:	4645      	mov	r5, r8
    109c:	b4e0      	push	{r5, r6, r7}
    109e:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10a0:	22c2      	movs	r2, #194	; 0xc2
    10a2:	00d2      	lsls	r2, r2, #3
    10a4:	4b5e      	ldr	r3, [pc, #376]	; (1220 <system_clock_init+0x18c>)
    10a6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    10a8:	4b5e      	ldr	r3, [pc, #376]	; (1224 <system_clock_init+0x190>)
    10aa:	685a      	ldr	r2, [r3, #4]
    10ac:	211e      	movs	r1, #30
    10ae:	438a      	bics	r2, r1
    10b0:	2104      	movs	r1, #4
    10b2:	430a      	orrs	r2, r1
    10b4:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    10b6:	2203      	movs	r2, #3
    10b8:	ab01      	add	r3, sp, #4
    10ba:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10bc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10be:	4d5a      	ldr	r5, [pc, #360]	; (1228 <system_clock_init+0x194>)
    10c0:	b2e0      	uxtb	r0, r4
    10c2:	a901      	add	r1, sp, #4
    10c4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10c6:	3401      	adds	r4, #1
    10c8:	2c25      	cmp	r4, #37	; 0x25
    10ca:	d1f9      	bne.n	10c0 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    10cc:	a80c      	add	r0, sp, #48	; 0x30
    10ce:	2300      	movs	r3, #0
    10d0:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    10d2:	2280      	movs	r2, #128	; 0x80
    10d4:	0212      	lsls	r2, r2, #8
    10d6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    10d8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    10da:	2201      	movs	r2, #1
    10dc:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    10de:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    10e0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    10e2:	2106      	movs	r1, #6
    10e4:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    10e6:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    10e8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    10ea:	4b50      	ldr	r3, [pc, #320]	; (122c <system_clock_init+0x198>)
    10ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    10ee:	2005      	movs	r0, #5
    10f0:	4b4f      	ldr	r3, [pc, #316]	; (1230 <system_clock_init+0x19c>)
    10f2:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    10f4:	494a      	ldr	r1, [pc, #296]	; (1220 <system_clock_init+0x18c>)
    10f6:	2202      	movs	r2, #2
    10f8:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    10fa:	421a      	tst	r2, r3
    10fc:	d0fc      	beq.n	10f8 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    10fe:	4b48      	ldr	r3, [pc, #288]	; (1220 <system_clock_init+0x18c>)
    1100:	8a99      	ldrh	r1, [r3, #20]
    1102:	2280      	movs	r2, #128	; 0x80
    1104:	430a      	orrs	r2, r1
    1106:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    1108:	4a4a      	ldr	r2, [pc, #296]	; (1234 <system_clock_init+0x1a0>)
    110a:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    110c:	04c9      	lsls	r1, r1, #19
    110e:	0e49      	lsrs	r1, r1, #25
    1110:	0409      	lsls	r1, r1, #16
    1112:	6998      	ldr	r0, [r3, #24]
    1114:	4a48      	ldr	r2, [pc, #288]	; (1238 <system_clock_init+0x1a4>)
    1116:	4002      	ands	r2, r0
    1118:	430a      	orrs	r2, r1
    111a:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    111c:	a80a      	add	r0, sp, #40	; 0x28
    111e:	2601      	movs	r6, #1
    1120:	7046      	strb	r6, [r0, #1]
	config->enable_32khz_output = true;
    1122:	7086      	strb	r6, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1124:	7106      	strb	r6, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1126:	2407      	movs	r4, #7
    1128:	7004      	strb	r4, [r0, #0]
	config->write_once          = false;
    112a:	2200      	movs	r2, #0
    112c:	4690      	mov	r8, r2
    112e:	7142      	strb	r2, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1130:	70c6      	strb	r6, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1132:	4b42      	ldr	r3, [pc, #264]	; (123c <system_clock_init+0x1a8>)
    1134:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1136:	2004      	movs	r0, #4
    1138:	4f3d      	ldr	r7, [pc, #244]	; (1230 <system_clock_init+0x19c>)
    113a:	47b8      	blx	r7
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    113c:	a805      	add	r0, sp, #20
    113e:	2500      	movs	r5, #0
    1140:	4642      	mov	r2, r8
    1142:	8042      	strh	r2, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1144:	8082      	strh	r2, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1146:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1148:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    114a:	7204      	strb	r4, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    114c:	233f      	movs	r3, #63	; 0x3f
    114e:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1150:	2204      	movs	r2, #4
    1152:	4691      	mov	r9, r2
    1154:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
    1156:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1158:	22b7      	movs	r2, #183	; 0xb7
    115a:	00d2      	lsls	r2, r2, #3
    115c:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    115e:	7304      	strb	r4, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1160:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1162:	4b37      	ldr	r3, [pc, #220]	; (1240 <system_clock_init+0x1ac>)
    1164:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1166:	a804      	add	r0, sp, #16
    1168:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    116a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    116c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    116e:	4b35      	ldr	r3, [pc, #212]	; (1244 <system_clock_init+0x1b0>)
    1170:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1172:	2006      	movs	r0, #6
    1174:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1176:	4b34      	ldr	r3, [pc, #208]	; (1248 <system_clock_init+0x1b4>)
    1178:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    117a:	ac01      	add	r4, sp, #4
    117c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    117e:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1180:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1182:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1184:	2305      	movs	r3, #5
    1186:	7023      	strb	r3, [r4, #0]
    1188:	2001      	movs	r0, #1
    118a:	1c21      	adds	r1, r4, #0
    118c:	4b2f      	ldr	r3, [pc, #188]	; (124c <system_clock_init+0x1b8>)
    118e:	469a      	mov	sl, r3
    1190:	4798      	blx	r3
    1192:	2001      	movs	r0, #1
    1194:	4a2e      	ldr	r2, [pc, #184]	; (1250 <system_clock_init+0x1bc>)
    1196:	4690      	mov	r8, r2
    1198:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    119a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    119c:	7265      	strb	r5, [r4, #9]
    119e:	464b      	mov	r3, r9
    11a0:	7023      	strb	r3, [r4, #0]
    11a2:	2220      	movs	r2, #32
    11a4:	4691      	mov	r9, r2
    11a6:	6062      	str	r2, [r4, #4]
    11a8:	7226      	strb	r6, [r4, #8]
    11aa:	2002      	movs	r0, #2
    11ac:	1c21      	adds	r1, r4, #0
    11ae:	47d0      	blx	sl
    11b0:	2002      	movs	r0, #2
    11b2:	47c0      	blx	r8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    11b4:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    11b6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    11b8:	7265      	strb	r5, [r4, #9]
    11ba:	2303      	movs	r3, #3
    11bc:	7023      	strb	r3, [r4, #0]
    11be:	464a      	mov	r2, r9
    11c0:	6062      	str	r2, [r4, #4]
    11c2:	2004      	movs	r0, #4
    11c4:	1c21      	adds	r1, r4, #0
    11c6:	47d0      	blx	sl
    11c8:	2004      	movs	r0, #4
    11ca:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    11cc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    11ce:	2000      	movs	r0, #0
    11d0:	1c21      	adds	r1, r4, #0
    11d2:	4b15      	ldr	r3, [pc, #84]	; (1228 <system_clock_init+0x194>)
    11d4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    11d6:	2000      	movs	r0, #0
    11d8:	4b1e      	ldr	r3, [pc, #120]	; (1254 <system_clock_init+0x1c0>)
    11da:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    11dc:	2007      	movs	r0, #7
    11de:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    11e0:	490f      	ldr	r1, [pc, #60]	; (1220 <system_clock_init+0x18c>)
    11e2:	22d0      	movs	r2, #208	; 0xd0
    11e4:	68cb      	ldr	r3, [r1, #12]
    11e6:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    11e8:	2bd0      	cmp	r3, #208	; 0xd0
    11ea:	d1fb      	bne.n	11e4 <system_clock_init+0x150>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    11ec:	4a1a      	ldr	r2, [pc, #104]	; (1258 <system_clock_init+0x1c4>)
    11ee:	2300      	movs	r3, #0
    11f0:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    11f2:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    11f4:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    11f6:	a901      	add	r1, sp, #4
    11f8:	2201      	movs	r2, #1
    11fa:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    11fc:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    11fe:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1200:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1202:	2307      	movs	r3, #7
    1204:	700b      	strb	r3, [r1, #0]
    1206:	2000      	movs	r0, #0
    1208:	4b10      	ldr	r3, [pc, #64]	; (124c <system_clock_init+0x1b8>)
    120a:	4798      	blx	r3
    120c:	2000      	movs	r0, #0
    120e:	4b10      	ldr	r3, [pc, #64]	; (1250 <system_clock_init+0x1bc>)
    1210:	4798      	blx	r3
#endif
}
    1212:	b010      	add	sp, #64	; 0x40
    1214:	bc1c      	pop	{r2, r3, r4}
    1216:	4690      	mov	r8, r2
    1218:	4699      	mov	r9, r3
    121a:	46a2      	mov	sl, r4
    121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	40000800 	.word	0x40000800
    1224:	41004000 	.word	0x41004000
    1228:	00001491 	.word	0x00001491
    122c:	00000ed1 	.word	0x00000ed1
    1230:	00000ff5 	.word	0x00000ff5
    1234:	00806024 	.word	0x00806024
    1238:	ff80ffff 	.word	0xff80ffff
    123c:	00000e55 	.word	0x00000e55
    1240:	00000f85 	.word	0x00000f85
    1244:	00000e19 	.word	0x00000e19
    1248:	0000125d 	.word	0x0000125d
    124c:	00001281 	.word	0x00001281
    1250:	00001335 	.word	0x00001335
    1254:	00001405 	.word	0x00001405
    1258:	40000400 	.word	0x40000400

0000125c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    125c:	4b06      	ldr	r3, [pc, #24]	; (1278 <system_gclk_init+0x1c>)
    125e:	6999      	ldr	r1, [r3, #24]
    1260:	2208      	movs	r2, #8
    1262:	430a      	orrs	r2, r1
    1264:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1266:	2201      	movs	r2, #1
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <system_gclk_init+0x20>)
    126a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    126c:	1c19      	adds	r1, r3, #0
    126e:	780b      	ldrb	r3, [r1, #0]
    1270:	4213      	tst	r3, r2
    1272:	d1fc      	bne.n	126e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1274:	4770      	bx	lr
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	40000400 	.word	0x40000400
    127c:	40000c00 	.word	0x40000c00

00001280 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1282:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1284:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1286:	780d      	ldrb	r5, [r1, #0]
    1288:	022d      	lsls	r5, r5, #8
    128a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    128c:	784b      	ldrb	r3, [r1, #1]
    128e:	2b00      	cmp	r3, #0
    1290:	d002      	beq.n	1298 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1292:	2380      	movs	r3, #128	; 0x80
    1294:	02db      	lsls	r3, r3, #11
    1296:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1298:	7a4b      	ldrb	r3, [r1, #9]
    129a:	2b00      	cmp	r3, #0
    129c:	d002      	beq.n	12a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    129e:	2380      	movs	r3, #128	; 0x80
    12a0:	031b      	lsls	r3, r3, #12
    12a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12a4:	684c      	ldr	r4, [r1, #4]
    12a6:	2c01      	cmp	r4, #1
    12a8:	d917      	bls.n	12da <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    12aa:	1e63      	subs	r3, r4, #1
    12ac:	421c      	tst	r4, r3
    12ae:	d10f      	bne.n	12d0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12b0:	2c02      	cmp	r4, #2
    12b2:	d906      	bls.n	12c2 <system_gclk_gen_set_config+0x42>
    12b4:	2302      	movs	r3, #2
    12b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    12b8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    12ba:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12bc:	429c      	cmp	r4, r3
    12be:	d8fb      	bhi.n	12b8 <system_gclk_gen_set_config+0x38>
    12c0:	e000      	b.n	12c4 <system_gclk_gen_set_config+0x44>
    12c2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    12c4:	0217      	lsls	r7, r2, #8
    12c6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    12c8:	2380      	movs	r3, #128	; 0x80
    12ca:	035b      	lsls	r3, r3, #13
    12cc:	431d      	orrs	r5, r3
    12ce:	e004      	b.n	12da <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    12d0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    12d2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    12d4:	2380      	movs	r3, #128	; 0x80
    12d6:	029b      	lsls	r3, r3, #10
    12d8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    12da:	7a0b      	ldrb	r3, [r1, #8]
    12dc:	2b00      	cmp	r3, #0
    12de:	d002      	beq.n	12e6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    12e0:	2380      	movs	r3, #128	; 0x80
    12e2:	039b      	lsls	r3, r3, #14
    12e4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12e6:	4a0f      	ldr	r2, [pc, #60]	; (1324 <system_gclk_gen_set_config+0xa4>)
    12e8:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    12ea:	b25b      	sxtb	r3, r3
    12ec:	2b00      	cmp	r3, #0
    12ee:	dbfb      	blt.n	12e8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12f0:	4b0d      	ldr	r3, [pc, #52]	; (1328 <system_gclk_gen_set_config+0xa8>)
    12f2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12f4:	4b0d      	ldr	r3, [pc, #52]	; (132c <system_gclk_gen_set_config+0xac>)
    12f6:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12f8:	4a0a      	ldr	r2, [pc, #40]	; (1324 <system_gclk_gen_set_config+0xa4>)
    12fa:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    12fc:	b25b      	sxtb	r3, r3
    12fe:	2b00      	cmp	r3, #0
    1300:	dbfb      	blt.n	12fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1302:	4b08      	ldr	r3, [pc, #32]	; (1324 <system_gclk_gen_set_config+0xa4>)
    1304:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1306:	1c1a      	adds	r2, r3, #0
    1308:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    130a:	b25b      	sxtb	r3, r3
    130c:	2b00      	cmp	r3, #0
    130e:	dbfb      	blt.n	1308 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1310:	4b04      	ldr	r3, [pc, #16]	; (1324 <system_gclk_gen_set_config+0xa4>)
    1312:	6859      	ldr	r1, [r3, #4]
    1314:	2280      	movs	r2, #128	; 0x80
    1316:	0252      	lsls	r2, r2, #9
    1318:	400a      	ands	r2, r1
    131a:	4315      	orrs	r5, r2
    131c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    131e:	4b04      	ldr	r3, [pc, #16]	; (1330 <system_gclk_gen_set_config+0xb0>)
    1320:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1324:	40000c00 	.word	0x40000c00
    1328:	00000179 	.word	0x00000179
    132c:	40000c08 	.word	0x40000c08
    1330:	000001b9 	.word	0x000001b9

00001334 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1334:	b510      	push	{r4, lr}
    1336:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1338:	4a0b      	ldr	r2, [pc, #44]	; (1368 <system_gclk_gen_enable+0x34>)
    133a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    133c:	b25b      	sxtb	r3, r3
    133e:	2b00      	cmp	r3, #0
    1340:	dbfb      	blt.n	133a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1342:	4b0a      	ldr	r3, [pc, #40]	; (136c <system_gclk_gen_enable+0x38>)
    1344:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1346:	4b0a      	ldr	r3, [pc, #40]	; (1370 <system_gclk_gen_enable+0x3c>)
    1348:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    134a:	4a07      	ldr	r2, [pc, #28]	; (1368 <system_gclk_gen_enable+0x34>)
    134c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    134e:	b25b      	sxtb	r3, r3
    1350:	2b00      	cmp	r3, #0
    1352:	dbfb      	blt.n	134c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1354:	4b04      	ldr	r3, [pc, #16]	; (1368 <system_gclk_gen_enable+0x34>)
    1356:	6859      	ldr	r1, [r3, #4]
    1358:	2280      	movs	r2, #128	; 0x80
    135a:	0252      	lsls	r2, r2, #9
    135c:	430a      	orrs	r2, r1
    135e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1360:	4b04      	ldr	r3, [pc, #16]	; (1374 <system_gclk_gen_enable+0x40>)
    1362:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1364:	bd10      	pop	{r4, pc}
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	40000c00 	.word	0x40000c00
    136c:	00000179 	.word	0x00000179
    1370:	40000c04 	.word	0x40000c04
    1374:	000001b9 	.word	0x000001b9

00001378 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1378:	b570      	push	{r4, r5, r6, lr}
    137a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    137c:	4a1a      	ldr	r2, [pc, #104]	; (13e8 <system_gclk_gen_get_hz+0x70>)
    137e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1380:	b25b      	sxtb	r3, r3
    1382:	2b00      	cmp	r3, #0
    1384:	dbfb      	blt.n	137e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1386:	4b19      	ldr	r3, [pc, #100]	; (13ec <system_gclk_gen_get_hz+0x74>)
    1388:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    138a:	4b19      	ldr	r3, [pc, #100]	; (13f0 <system_gclk_gen_get_hz+0x78>)
    138c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    138e:	4a16      	ldr	r2, [pc, #88]	; (13e8 <system_gclk_gen_get_hz+0x70>)
    1390:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1392:	b25b      	sxtb	r3, r3
    1394:	2b00      	cmp	r3, #0
    1396:	dbfb      	blt.n	1390 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1398:	4e13      	ldr	r6, [pc, #76]	; (13e8 <system_gclk_gen_get_hz+0x70>)
    139a:	6870      	ldr	r0, [r6, #4]
    139c:	04c0      	lsls	r0, r0, #19
    139e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13a0:	4b14      	ldr	r3, [pc, #80]	; (13f4 <system_gclk_gen_get_hz+0x7c>)
    13a2:	4798      	blx	r3
    13a4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13a6:	4b12      	ldr	r3, [pc, #72]	; (13f0 <system_gclk_gen_get_hz+0x78>)
    13a8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    13aa:	6876      	ldr	r6, [r6, #4]
    13ac:	02f6      	lsls	r6, r6, #11
    13ae:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13b0:	4b11      	ldr	r3, [pc, #68]	; (13f8 <system_gclk_gen_get_hz+0x80>)
    13b2:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13b4:	4a0c      	ldr	r2, [pc, #48]	; (13e8 <system_gclk_gen_get_hz+0x70>)
    13b6:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    13b8:	b25b      	sxtb	r3, r3
    13ba:	2b00      	cmp	r3, #0
    13bc:	dbfb      	blt.n	13b6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13be:	4b0a      	ldr	r3, [pc, #40]	; (13e8 <system_gclk_gen_get_hz+0x70>)
    13c0:	689c      	ldr	r4, [r3, #8]
    13c2:	0a24      	lsrs	r4, r4, #8
    13c4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13c6:	4b0d      	ldr	r3, [pc, #52]	; (13fc <system_gclk_gen_get_hz+0x84>)
    13c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    13ca:	2e00      	cmp	r6, #0
    13cc:	d107      	bne.n	13de <system_gclk_gen_get_hz+0x66>
    13ce:	2c01      	cmp	r4, #1
    13d0:	d907      	bls.n	13e2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    13d2:	1c28      	adds	r0, r5, #0
    13d4:	1c21      	adds	r1, r4, #0
    13d6:	4b0a      	ldr	r3, [pc, #40]	; (1400 <system_gclk_gen_get_hz+0x88>)
    13d8:	4798      	blx	r3
    13da:	1c05      	adds	r5, r0, #0
    13dc:	e001      	b.n	13e2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    13de:	3401      	adds	r4, #1
    13e0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    13e2:	1c28      	adds	r0, r5, #0
    13e4:	bd70      	pop	{r4, r5, r6, pc}
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	40000c00 	.word	0x40000c00
    13ec:	00000179 	.word	0x00000179
    13f0:	40000c04 	.word	0x40000c04
    13f4:	00000d89 	.word	0x00000d89
    13f8:	40000c08 	.word	0x40000c08
    13fc:	000001b9 	.word	0x000001b9
    1400:	00004ccd 	.word	0x00004ccd

00001404 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1404:	b510      	push	{r4, lr}
    1406:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1408:	4b06      	ldr	r3, [pc, #24]	; (1424 <system_gclk_chan_enable+0x20>)
    140a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    140c:	4b06      	ldr	r3, [pc, #24]	; (1428 <system_gclk_chan_enable+0x24>)
    140e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <system_gclk_chan_enable+0x28>)
    1412:	8859      	ldrh	r1, [r3, #2]
    1414:	2280      	movs	r2, #128	; 0x80
    1416:	01d2      	lsls	r2, r2, #7
    1418:	430a      	orrs	r2, r1
    141a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    141c:	4b04      	ldr	r3, [pc, #16]	; (1430 <system_gclk_chan_enable+0x2c>)
    141e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1420:	bd10      	pop	{r4, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	00000179 	.word	0x00000179
    1428:	40000c02 	.word	0x40000c02
    142c:	40000c00 	.word	0x40000c00
    1430:	000001b9 	.word	0x000001b9

00001434 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1434:	b510      	push	{r4, lr}
    1436:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1438:	4b0f      	ldr	r3, [pc, #60]	; (1478 <system_gclk_chan_disable+0x44>)
    143a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    143c:	4b0f      	ldr	r3, [pc, #60]	; (147c <system_gclk_chan_disable+0x48>)
    143e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1440:	4b0f      	ldr	r3, [pc, #60]	; (1480 <system_gclk_chan_disable+0x4c>)
    1442:	8858      	ldrh	r0, [r3, #2]
    1444:	0500      	lsls	r0, r0, #20
    1446:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1448:	8859      	ldrh	r1, [r3, #2]
    144a:	4a0e      	ldr	r2, [pc, #56]	; (1484 <system_gclk_chan_disable+0x50>)
    144c:	400a      	ands	r2, r1
    144e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1450:	8859      	ldrh	r1, [r3, #2]
    1452:	4a0d      	ldr	r2, [pc, #52]	; (1488 <system_gclk_chan_disable+0x54>)
    1454:	400a      	ands	r2, r1
    1456:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1458:	1c19      	adds	r1, r3, #0
    145a:	2280      	movs	r2, #128	; 0x80
    145c:	01d2      	lsls	r2, r2, #7
    145e:	884b      	ldrh	r3, [r1, #2]
    1460:	4213      	tst	r3, r2
    1462:	d1fc      	bne.n	145e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1464:	4b06      	ldr	r3, [pc, #24]	; (1480 <system_gclk_chan_disable+0x4c>)
    1466:	0201      	lsls	r1, r0, #8
    1468:	8858      	ldrh	r0, [r3, #2]
    146a:	4a06      	ldr	r2, [pc, #24]	; (1484 <system_gclk_chan_disable+0x50>)
    146c:	4002      	ands	r2, r0
    146e:	430a      	orrs	r2, r1
    1470:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1472:	4b06      	ldr	r3, [pc, #24]	; (148c <system_gclk_chan_disable+0x58>)
    1474:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1476:	bd10      	pop	{r4, pc}
    1478:	00000179 	.word	0x00000179
    147c:	40000c02 	.word	0x40000c02
    1480:	40000c00 	.word	0x40000c00
    1484:	fffff0ff 	.word	0xfffff0ff
    1488:	ffffbfff 	.word	0xffffbfff
    148c:	000001b9 	.word	0x000001b9

00001490 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1490:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1492:	780c      	ldrb	r4, [r1, #0]
    1494:	0224      	lsls	r4, r4, #8
    1496:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1498:	4b02      	ldr	r3, [pc, #8]	; (14a4 <system_gclk_chan_set_config+0x14>)
    149a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    149c:	b2a4      	uxth	r4, r4
    149e:	4b02      	ldr	r3, [pc, #8]	; (14a8 <system_gclk_chan_set_config+0x18>)
    14a0:	805c      	strh	r4, [r3, #2]
}
    14a2:	bd10      	pop	{r4, pc}
    14a4:	00001435 	.word	0x00001435
    14a8:	40000c00 	.word	0x40000c00

000014ac <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14ac:	b510      	push	{r4, lr}
    14ae:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14b0:	4b06      	ldr	r3, [pc, #24]	; (14cc <system_gclk_chan_get_hz+0x20>)
    14b2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <system_gclk_chan_get_hz+0x24>)
    14b6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14b8:	4b06      	ldr	r3, [pc, #24]	; (14d4 <system_gclk_chan_get_hz+0x28>)
    14ba:	885c      	ldrh	r4, [r3, #2]
    14bc:	0524      	lsls	r4, r4, #20
    14be:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14c0:	4b05      	ldr	r3, [pc, #20]	; (14d8 <system_gclk_chan_get_hz+0x2c>)
    14c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14c4:	1c20      	adds	r0, r4, #0
    14c6:	4b05      	ldr	r3, [pc, #20]	; (14dc <system_gclk_chan_get_hz+0x30>)
    14c8:	4798      	blx	r3
}
    14ca:	bd10      	pop	{r4, pc}
    14cc:	00000179 	.word	0x00000179
    14d0:	40000c02 	.word	0x40000c02
    14d4:	40000c00 	.word	0x40000c00
    14d8:	000001b9 	.word	0x000001b9
    14dc:	00001379 	.word	0x00001379

000014e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    14e0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    14e2:	78d3      	ldrb	r3, [r2, #3]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d11e      	bne.n	1526 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    14e8:	7813      	ldrb	r3, [r2, #0]
    14ea:	2b80      	cmp	r3, #128	; 0x80
    14ec:	d004      	beq.n	14f8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14ee:	061b      	lsls	r3, r3, #24
    14f0:	2480      	movs	r4, #128	; 0x80
    14f2:	0264      	lsls	r4, r4, #9
    14f4:	4323      	orrs	r3, r4
    14f6:	e000      	b.n	14fa <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    14f8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14fa:	7854      	ldrb	r4, [r2, #1]
    14fc:	2502      	movs	r5, #2
    14fe:	43ac      	bics	r4, r5
    1500:	d10a      	bne.n	1518 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1502:	7894      	ldrb	r4, [r2, #2]
    1504:	2c00      	cmp	r4, #0
    1506:	d103      	bne.n	1510 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1508:	2480      	movs	r4, #128	; 0x80
    150a:	02a4      	lsls	r4, r4, #10
    150c:	4323      	orrs	r3, r4
    150e:	e002      	b.n	1516 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1510:	24c0      	movs	r4, #192	; 0xc0
    1512:	02e4      	lsls	r4, r4, #11
    1514:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1516:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1518:	7854      	ldrb	r4, [r2, #1]
    151a:	3c01      	subs	r4, #1
    151c:	2c01      	cmp	r4, #1
    151e:	d804      	bhi.n	152a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1520:	4c11      	ldr	r4, [pc, #68]	; (1568 <_system_pinmux_config+0x88>)
    1522:	4023      	ands	r3, r4
    1524:	e001      	b.n	152a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1526:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1528:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    152a:	040d      	lsls	r5, r1, #16
    152c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    152e:	24a0      	movs	r4, #160	; 0xa0
    1530:	05e4      	lsls	r4, r4, #23
    1532:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1534:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1536:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1538:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    153a:	24d0      	movs	r4, #208	; 0xd0
    153c:	0624      	lsls	r4, r4, #24
    153e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1540:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1542:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1544:	78d4      	ldrb	r4, [r2, #3]
    1546:	2c00      	cmp	r4, #0
    1548:	d10c      	bne.n	1564 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    154a:	035c      	lsls	r4, r3, #13
    154c:	d505      	bpl.n	155a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    154e:	7893      	ldrb	r3, [r2, #2]
    1550:	2b01      	cmp	r3, #1
    1552:	d101      	bne.n	1558 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1554:	6181      	str	r1, [r0, #24]
    1556:	e000      	b.n	155a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1558:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    155a:	7853      	ldrb	r3, [r2, #1]
    155c:	3b01      	subs	r3, #1
    155e:	2b01      	cmp	r3, #1
    1560:	d800      	bhi.n	1564 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1562:	6081      	str	r1, [r0, #8]
		}
	}
}
    1564:	bd30      	pop	{r4, r5, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	fffbffff 	.word	0xfffbffff

0000156c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    156c:	b508      	push	{r3, lr}
    156e:	1c03      	adds	r3, r0, #0
    1570:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1572:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1574:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1576:	2900      	cmp	r1, #0
    1578:	d103      	bne.n	1582 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    157a:	0958      	lsrs	r0, r3, #5
    157c:	01c0      	lsls	r0, r0, #7
    157e:	4904      	ldr	r1, [pc, #16]	; (1590 <system_pinmux_pin_set_config+0x24>)
    1580:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1582:	211f      	movs	r1, #31
    1584:	400b      	ands	r3, r1
    1586:	2101      	movs	r1, #1
    1588:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    158a:	4b02      	ldr	r3, [pc, #8]	; (1594 <system_pinmux_pin_set_config+0x28>)
    158c:	4798      	blx	r3
}
    158e:	bd08      	pop	{r3, pc}
    1590:	41004400 	.word	0x41004400
    1594:	000014e1 	.word	0x000014e1

00001598 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1598:	4770      	bx	lr
    159a:	46c0      	nop			; (mov r8, r8)

0000159c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    159c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    159e:	4b04      	ldr	r3, [pc, #16]	; (15b0 <system_init+0x14>)
    15a0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15a2:	4b04      	ldr	r3, [pc, #16]	; (15b4 <system_init+0x18>)
    15a4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15a6:	4b04      	ldr	r3, [pc, #16]	; (15b8 <system_init+0x1c>)
    15a8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15aa:	4b04      	ldr	r3, [pc, #16]	; (15bc <system_init+0x20>)
    15ac:	4798      	blx	r3
}
    15ae:	bd08      	pop	{r3, pc}
    15b0:	00001095 	.word	0x00001095
    15b4:	000001e9 	.word	0x000001e9
    15b8:	00001599 	.word	0x00001599
    15bc:	000003b1 	.word	0x000003b1

000015c0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    15c0:	1c93      	adds	r3, r2, #2
    15c2:	009b      	lsls	r3, r3, #2
    15c4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    15c6:	2a02      	cmp	r2, #2
    15c8:	d104      	bne.n	15d4 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    15ca:	7e02      	ldrb	r2, [r0, #24]
    15cc:	2310      	movs	r3, #16
    15ce:	4313      	orrs	r3, r2
    15d0:	7603      	strb	r3, [r0, #24]
    15d2:	e00c      	b.n	15ee <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    15d4:	2a03      	cmp	r2, #3
    15d6:	d104      	bne.n	15e2 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    15d8:	7e02      	ldrb	r2, [r0, #24]
    15da:	2320      	movs	r3, #32
    15dc:	4313      	orrs	r3, r2
    15de:	7603      	strb	r3, [r0, #24]
    15e0:	e005      	b.n	15ee <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    15e2:	2301      	movs	r3, #1
    15e4:	4093      	lsls	r3, r2
    15e6:	1c1a      	adds	r2, r3, #0
    15e8:	7e03      	ldrb	r3, [r0, #24]
    15ea:	431a      	orrs	r2, r3
    15ec:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    15ee:	2000      	movs	r0, #0
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)

000015f4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    15f4:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    15f6:	0080      	lsls	r0, r0, #2
    15f8:	4b14      	ldr	r3, [pc, #80]	; (164c <_tc_interrupt_handler+0x58>)
    15fa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    15fc:	6822      	ldr	r2, [r4, #0]
    15fe:	7b95      	ldrb	r5, [r2, #14]
    1600:	7e23      	ldrb	r3, [r4, #24]
    1602:	401d      	ands	r5, r3
    1604:	7e63      	ldrb	r3, [r4, #25]
    1606:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1608:	07eb      	lsls	r3, r5, #31
    160a:	d505      	bpl.n	1618 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    160c:	1c20      	adds	r0, r4, #0
    160e:	68a2      	ldr	r2, [r4, #8]
    1610:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1612:	2301      	movs	r3, #1
    1614:	6822      	ldr	r2, [r4, #0]
    1616:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1618:	07ab      	lsls	r3, r5, #30
    161a:	d505      	bpl.n	1628 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    161c:	1c20      	adds	r0, r4, #0
    161e:	68e2      	ldr	r2, [r4, #12]
    1620:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1622:	2302      	movs	r3, #2
    1624:	6822      	ldr	r2, [r4, #0]
    1626:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1628:	06eb      	lsls	r3, r5, #27
    162a:	d505      	bpl.n	1638 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    162c:	1c20      	adds	r0, r4, #0
    162e:	6922      	ldr	r2, [r4, #16]
    1630:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1632:	2310      	movs	r3, #16
    1634:	6822      	ldr	r2, [r4, #0]
    1636:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1638:	06ab      	lsls	r3, r5, #26
    163a:	d505      	bpl.n	1648 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    163c:	1c20      	adds	r0, r4, #0
    163e:	6962      	ldr	r2, [r4, #20]
    1640:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1642:	6823      	ldr	r3, [r4, #0]
    1644:	2220      	movs	r2, #32
    1646:	739a      	strb	r2, [r3, #14]
	}
}
    1648:	bd38      	pop	{r3, r4, r5, pc}
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	20000da0 	.word	0x20000da0

00001650 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1650:	b508      	push	{r3, lr}
    1652:	2000      	movs	r0, #0
    1654:	4b01      	ldr	r3, [pc, #4]	; (165c <TC3_Handler+0xc>)
    1656:	4798      	blx	r3
    1658:	bd08      	pop	{r3, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	000015f5 	.word	0x000015f5

00001660 <TC4_Handler>:
    1660:	b508      	push	{r3, lr}
    1662:	2001      	movs	r0, #1
    1664:	4b01      	ldr	r3, [pc, #4]	; (166c <TC4_Handler+0xc>)
    1666:	4798      	blx	r3
    1668:	bd08      	pop	{r3, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	000015f5 	.word	0x000015f5

00001670 <TC5_Handler>:
    1670:	b508      	push	{r3, lr}
    1672:	2002      	movs	r0, #2
    1674:	4b01      	ldr	r3, [pc, #4]	; (167c <TC5_Handler+0xc>)
    1676:	4798      	blx	r3
    1678:	bd08      	pop	{r3, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	000015f5 	.word	0x000015f5

00001680 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1680:	b570      	push	{r4, r5, r6, lr}
    1682:	b084      	sub	sp, #16
    1684:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1686:	ab01      	add	r3, sp, #4
    1688:	4a0a      	ldr	r2, [pc, #40]	; (16b4 <_tc_get_inst_index+0x34>)
    168a:	ca70      	ldmia	r2!, {r4, r5, r6}
    168c:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    168e:	9b01      	ldr	r3, [sp, #4]
    1690:	4283      	cmp	r3, r0
    1692:	d00a      	beq.n	16aa <_tc_get_inst_index+0x2a>
    1694:	9c02      	ldr	r4, [sp, #8]
    1696:	4284      	cmp	r4, r0
    1698:	d005      	beq.n	16a6 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    169a:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    169c:	9d03      	ldr	r5, [sp, #12]
    169e:	428d      	cmp	r5, r1
    16a0:	d105      	bne.n	16ae <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    16a2:	2002      	movs	r0, #2
    16a4:	e002      	b.n	16ac <_tc_get_inst_index+0x2c>
    16a6:	2001      	movs	r0, #1
    16a8:	e000      	b.n	16ac <_tc_get_inst_index+0x2c>
    16aa:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    16ac:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    16ae:	b004      	add	sp, #16
    16b0:	bd70      	pop	{r4, r5, r6, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00005038 	.word	0x00005038

000016b8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    16b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ba:	464f      	mov	r7, r9
    16bc:	4646      	mov	r6, r8
    16be:	b4c0      	push	{r6, r7}
    16c0:	b087      	sub	sp, #28
    16c2:	1c04      	adds	r4, r0, #0
    16c4:	1c0d      	adds	r5, r1, #0
    16c6:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    16c8:	1c08      	adds	r0, r1, #0
    16ca:	4b90      	ldr	r3, [pc, #576]	; (190c <tc_init+0x254>)
    16cc:	4798      	blx	r3
    16ce:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    16d0:	4f8f      	ldr	r7, [pc, #572]	; (1910 <tc_init+0x258>)
    16d2:	1c39      	adds	r1, r7, #0
    16d4:	310c      	adds	r1, #12
    16d6:	a805      	add	r0, sp, #20
    16d8:	2203      	movs	r2, #3
    16da:	4e8e      	ldr	r6, [pc, #568]	; (1914 <tc_init+0x25c>)
    16dc:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    16de:	1c39      	adds	r1, r7, #0
    16e0:	3110      	adds	r1, #16
    16e2:	a803      	add	r0, sp, #12
    16e4:	2206      	movs	r2, #6
    16e6:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    16e8:	2300      	movs	r3, #0
    16ea:	60a3      	str	r3, [r4, #8]
    16ec:	60e3      	str	r3, [r4, #12]
    16ee:	6123      	str	r3, [r4, #16]
    16f0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    16f2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    16f4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    16f6:	4648      	mov	r0, r9
    16f8:	0082      	lsls	r2, r0, #2
    16fa:	4b87      	ldr	r3, [pc, #540]	; (1918 <tc_init+0x260>)
    16fc:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    16fe:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1700:	4641      	mov	r1, r8
    1702:	788b      	ldrb	r3, [r1, #2]
    1704:	2b08      	cmp	r3, #8
    1706:	d104      	bne.n	1712 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1708:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    170a:	464a      	mov	r2, r9
    170c:	07d2      	lsls	r2, r2, #31
    170e:	d400      	bmi.n	1712 <tc_init+0x5a>
    1710:	e0f6      	b.n	1900 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1712:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1714:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1716:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1718:	07d9      	lsls	r1, r3, #31
    171a:	d500      	bpl.n	171e <tc_init+0x66>
    171c:	e0f0      	b.n	1900 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    171e:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1720:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1722:	06da      	lsls	r2, r3, #27
    1724:	d500      	bpl.n	1728 <tc_init+0x70>
    1726:	e0eb      	b.n	1900 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1728:	882b      	ldrh	r3, [r5, #0]
    172a:	0799      	lsls	r1, r3, #30
    172c:	d500      	bpl.n	1730 <tc_init+0x78>
    172e:	e0e7      	b.n	1900 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1730:	4642      	mov	r2, r8
    1732:	7c13      	ldrb	r3, [r2, #16]
    1734:	2b00      	cmp	r3, #0
    1736:	d00c      	beq.n	1752 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1738:	a902      	add	r1, sp, #8
    173a:	2301      	movs	r3, #1
    173c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    173e:	2200      	movs	r2, #0
    1740:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1742:	4640      	mov	r0, r8
    1744:	6980      	ldr	r0, [r0, #24]
    1746:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1748:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    174a:	4642      	mov	r2, r8
    174c:	7d10      	ldrb	r0, [r2, #20]
    174e:	4b73      	ldr	r3, [pc, #460]	; (191c <tc_init+0x264>)
    1750:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1752:	4640      	mov	r0, r8
    1754:	7f03      	ldrb	r3, [r0, #28]
    1756:	2b00      	cmp	r3, #0
    1758:	d00b      	beq.n	1772 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    175a:	a902      	add	r1, sp, #8
    175c:	2301      	movs	r3, #1
    175e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1760:	2200      	movs	r2, #0
    1762:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1764:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1766:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1768:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    176a:	6a03      	ldr	r3, [r0, #32]
    176c:	b2d8      	uxtb	r0, r3
    176e:	4b6b      	ldr	r3, [pc, #428]	; (191c <tc_init+0x264>)
    1770:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1772:	4b6b      	ldr	r3, [pc, #428]	; (1920 <tc_init+0x268>)
    1774:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1776:	4648      	mov	r0, r9
    1778:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    177a:	a803      	add	r0, sp, #12
    177c:	5a12      	ldrh	r2, [r2, r0]
    177e:	430a      	orrs	r2, r1
    1780:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1782:	4641      	mov	r1, r8
    1784:	788b      	ldrb	r3, [r1, #2]
    1786:	2b08      	cmp	r3, #8
    1788:	d108      	bne.n	179c <tc_init+0xe4>
    178a:	4b65      	ldr	r3, [pc, #404]	; (1920 <tc_init+0x268>)
    178c:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    178e:	4648      	mov	r0, r9
    1790:	3001      	adds	r0, #1
    1792:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1794:	a903      	add	r1, sp, #12
    1796:	5a41      	ldrh	r1, [r0, r1]
    1798:	430a      	orrs	r2, r1
    179a:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    179c:	a901      	add	r1, sp, #4
    179e:	4642      	mov	r2, r8
    17a0:	7813      	ldrb	r3, [r2, #0]
    17a2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    17a4:	ab05      	add	r3, sp, #20
    17a6:	4648      	mov	r0, r9
    17a8:	5c1e      	ldrb	r6, [r3, r0]
    17aa:	1c30      	adds	r0, r6, #0
    17ac:	4b5d      	ldr	r3, [pc, #372]	; (1924 <tc_init+0x26c>)
    17ae:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    17b0:	1c30      	adds	r0, r6, #0
    17b2:	4b5d      	ldr	r3, [pc, #372]	; (1928 <tc_init+0x270>)
    17b4:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    17b6:	4641      	mov	r1, r8
    17b8:	8888      	ldrh	r0, [r1, #4]
    17ba:	890b      	ldrh	r3, [r1, #8]
    17bc:	4303      	orrs	r3, r0
    17be:	7988      	ldrb	r0, [r1, #6]
    17c0:	788a      	ldrb	r2, [r1, #2]
    17c2:	4310      	orrs	r0, r2
    17c4:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    17c6:	784b      	ldrb	r3, [r1, #1]
    17c8:	2b00      	cmp	r3, #0
    17ca:	d002      	beq.n	17d2 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    17cc:	2380      	movs	r3, #128	; 0x80
    17ce:	011b      	lsls	r3, r3, #4
    17d0:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17d2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17d4:	227f      	movs	r2, #127	; 0x7f
    17d6:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    17d8:	4393      	bics	r3, r2
    17da:	d1fc      	bne.n	17d6 <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    17dc:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    17de:	4642      	mov	r2, r8
    17e0:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    17e2:	1e43      	subs	r3, r0, #1
    17e4:	4198      	sbcs	r0, r3
    17e6:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    17e8:	7b93      	ldrb	r3, [r2, #14]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d001      	beq.n	17f2 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    17ee:	2301      	movs	r3, #1
    17f0:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17f2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17f4:	227f      	movs	r2, #127	; 0x7f
    17f6:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    17f8:	4393      	bics	r3, r2
    17fa:	d1fc      	bne.n	17f6 <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    17fc:	23ff      	movs	r3, #255	; 0xff
    17fe:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1800:	2800      	cmp	r0, #0
    1802:	d005      	beq.n	1810 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1804:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1806:	227f      	movs	r2, #127	; 0x7f
    1808:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    180a:	4393      	bics	r3, r2
    180c:	d1fc      	bne.n	1808 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    180e:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1810:	4643      	mov	r3, r8
    1812:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1814:	7adb      	ldrb	r3, [r3, #11]
    1816:	2b00      	cmp	r3, #0
    1818:	d001      	beq.n	181e <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    181a:	2310      	movs	r3, #16
    181c:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    181e:	4641      	mov	r1, r8
    1820:	7b0b      	ldrb	r3, [r1, #12]
    1822:	2b00      	cmp	r3, #0
    1824:	d001      	beq.n	182a <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1826:	2320      	movs	r3, #32
    1828:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    182a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    182c:	227f      	movs	r2, #127	; 0x7f
    182e:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1830:	4393      	bics	r3, r2
    1832:	d1fc      	bne.n	182e <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1834:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1836:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1838:	217f      	movs	r1, #127	; 0x7f
    183a:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    183c:	438b      	bics	r3, r1
    183e:	d1fc      	bne.n	183a <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1840:	7923      	ldrb	r3, [r4, #4]
    1842:	2b04      	cmp	r3, #4
    1844:	d005      	beq.n	1852 <tc_init+0x19a>
    1846:	2b08      	cmp	r3, #8
    1848:	d041      	beq.n	18ce <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    184a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    184c:	2b00      	cmp	r3, #0
    184e:	d157      	bne.n	1900 <tc_init+0x248>
    1850:	e024      	b.n	189c <tc_init+0x1e4>
    1852:	217f      	movs	r1, #127	; 0x7f
    1854:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1856:	438b      	bics	r3, r1
    1858:	d1fc      	bne.n	1854 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    185a:	2328      	movs	r3, #40	; 0x28
    185c:	4642      	mov	r2, r8
    185e:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1860:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1862:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1864:	227f      	movs	r2, #127	; 0x7f
    1866:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1868:	4393      	bics	r3, r2
    186a:	d1fc      	bne.n	1866 <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    186c:	2329      	movs	r3, #41	; 0x29
    186e:	4640      	mov	r0, r8
    1870:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1872:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1874:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1876:	227f      	movs	r2, #127	; 0x7f
    1878:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    187a:	4393      	bics	r3, r2
    187c:	d1fc      	bne.n	1878 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    187e:	232a      	movs	r3, #42	; 0x2a
    1880:	4641      	mov	r1, r8
    1882:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1884:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1886:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1888:	227f      	movs	r2, #127	; 0x7f
    188a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    188c:	4393      	bics	r3, r2
    188e:	d1fc      	bne.n	188a <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1890:	232b      	movs	r3, #43	; 0x2b
    1892:	4642      	mov	r2, r8
    1894:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1896:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1898:	2000      	movs	r0, #0
    189a:	e031      	b.n	1900 <tc_init+0x248>
    189c:	217f      	movs	r1, #127	; 0x7f
    189e:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    18a0:	438b      	bics	r3, r1
    18a2:	d1fc      	bne.n	189e <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    18a4:	4640      	mov	r0, r8
    18a6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    18a8:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18aa:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18ac:	227f      	movs	r2, #127	; 0x7f
    18ae:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    18b0:	4393      	bics	r3, r2
    18b2:	d1fc      	bne.n	18ae <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    18b4:	4641      	mov	r1, r8
    18b6:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    18b8:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18ba:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18bc:	227f      	movs	r2, #127	; 0x7f
    18be:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    18c0:	4393      	bics	r3, r2
    18c2:	d1fc      	bne.n	18be <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    18c4:	4642      	mov	r2, r8
    18c6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    18c8:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    18ca:	2000      	movs	r0, #0
    18cc:	e018      	b.n	1900 <tc_init+0x248>
    18ce:	217f      	movs	r1, #127	; 0x7f
    18d0:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    18d2:	438b      	bics	r3, r1
    18d4:	d1fc      	bne.n	18d0 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    18d6:	4643      	mov	r3, r8
    18d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18da:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18dc:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18de:	227f      	movs	r2, #127	; 0x7f
    18e0:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    18e2:	4393      	bics	r3, r2
    18e4:	d1fc      	bne.n	18e0 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    18e6:	4640      	mov	r0, r8
    18e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    18ea:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18ec:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18ee:	227f      	movs	r2, #127	; 0x7f
    18f0:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    18f2:	4393      	bics	r3, r2
    18f4:	d1fc      	bne.n	18f0 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    18f6:	4641      	mov	r1, r8
    18f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    18fa:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    18fc:	2000      	movs	r0, #0
    18fe:	e7ff      	b.n	1900 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1900:	b007      	add	sp, #28
    1902:	bc0c      	pop	{r2, r3}
    1904:	4690      	mov	r8, r2
    1906:	4699      	mov	r9, r3
    1908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	00001681 	.word	0x00001681
    1910:	00005038 	.word	0x00005038
    1914:	00004dfd 	.word	0x00004dfd
    1918:	20000da0 	.word	0x20000da0
    191c:	0000156d 	.word	0x0000156d
    1920:	40000400 	.word	0x40000400
    1924:	00001491 	.word	0x00001491
    1928:	00001405 	.word	0x00001405

0000192c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    192c:	6802      	ldr	r2, [r0, #0]
    192e:	217f      	movs	r1, #127	; 0x7f
    1930:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1932:	438b      	bics	r3, r1
    1934:	d1fc      	bne.n	1930 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1936:	7903      	ldrb	r3, [r0, #4]
    1938:	2b04      	cmp	r3, #4
    193a:	d005      	beq.n	1948 <tc_get_count_value+0x1c>
    193c:	2b08      	cmp	r3, #8
    193e:	d009      	beq.n	1954 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1940:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1942:	2b00      	cmp	r3, #0
    1944:	d108      	bne.n	1958 <tc_get_count_value+0x2c>
    1946:	e002      	b.n	194e <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1948:	7c10      	ldrb	r0, [r2, #16]
    194a:	b2c0      	uxtb	r0, r0
    194c:	e004      	b.n	1958 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    194e:	8a10      	ldrh	r0, [r2, #16]
    1950:	b280      	uxth	r0, r0
    1952:	e001      	b.n	1958 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    1954:	6910      	ldr	r0, [r2, #16]
    1956:	e7ff      	b.n	1958 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    1958:	4770      	bx	lr
    195a:	46c0      	nop			; (mov r8, r8)

0000195c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    195c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    195e:	6804      	ldr	r4, [r0, #0]
    1960:	257f      	movs	r5, #127	; 0x7f
    1962:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1964:	43ab      	bics	r3, r5
    1966:	d1fc      	bne.n	1962 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1968:	7903      	ldrb	r3, [r0, #4]
    196a:	2b04      	cmp	r3, #4
    196c:	d005      	beq.n	197a <tc_set_compare_value+0x1e>
    196e:	2b08      	cmp	r3, #8
    1970:	d014      	beq.n	199c <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1972:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1974:	2b00      	cmp	r3, #0
    1976:	d119      	bne.n	19ac <tc_set_compare_value+0x50>
    1978:	e007      	b.n	198a <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    197a:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    197c:	2901      	cmp	r1, #1
    197e:	d815      	bhi.n	19ac <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1980:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1982:	1861      	adds	r1, r4, r1
    1984:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1986:	2000      	movs	r0, #0
    1988:	e010      	b.n	19ac <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    198a:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    198c:	2901      	cmp	r1, #1
    198e:	d80d      	bhi.n	19ac <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1990:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1992:	310c      	adds	r1, #12
    1994:	0049      	lsls	r1, r1, #1
    1996:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1998:	2000      	movs	r0, #0
    199a:	e007      	b.n	19ac <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    199c:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    199e:	2901      	cmp	r1, #1
    19a0:	d804      	bhi.n	19ac <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    19a2:	3106      	adds	r1, #6
    19a4:	0089      	lsls	r1, r1, #2
    19a6:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    19a8:	2000      	movs	r0, #0
    19aa:	e7ff      	b.n	19ac <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    19ac:	bd30      	pop	{r4, r5, pc}
    19ae:	46c0      	nop			; (mov r8, r8)

000019b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    19b0:	e7fe      	b.n	19b0 <Dummy_Handler>
    19b2:	46c0      	nop			; (mov r8, r8)

000019b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    19b4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    19b6:	4b19      	ldr	r3, [pc, #100]	; (1a1c <Reset_Handler+0x68>)
    19b8:	4a19      	ldr	r2, [pc, #100]	; (1a20 <Reset_Handler+0x6c>)
    19ba:	429a      	cmp	r2, r3
    19bc:	d003      	beq.n	19c6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    19be:	4b19      	ldr	r3, [pc, #100]	; (1a24 <Reset_Handler+0x70>)
    19c0:	4a16      	ldr	r2, [pc, #88]	; (1a1c <Reset_Handler+0x68>)
    19c2:	429a      	cmp	r2, r3
    19c4:	d304      	bcc.n	19d0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19c6:	4b18      	ldr	r3, [pc, #96]	; (1a28 <Reset_Handler+0x74>)
    19c8:	4a18      	ldr	r2, [pc, #96]	; (1a2c <Reset_Handler+0x78>)
    19ca:	429a      	cmp	r2, r3
    19cc:	d310      	bcc.n	19f0 <Reset_Handler+0x3c>
    19ce:	e01b      	b.n	1a08 <Reset_Handler+0x54>
    19d0:	4b17      	ldr	r3, [pc, #92]	; (1a30 <Reset_Handler+0x7c>)
    19d2:	4814      	ldr	r0, [pc, #80]	; (1a24 <Reset_Handler+0x70>)
    19d4:	3003      	adds	r0, #3
    19d6:	1ac0      	subs	r0, r0, r3
    19d8:	0880      	lsrs	r0, r0, #2
    19da:	3001      	adds	r0, #1
    19dc:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19de:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    19e0:	490e      	ldr	r1, [pc, #56]	; (1a1c <Reset_Handler+0x68>)
    19e2:	4a0f      	ldr	r2, [pc, #60]	; (1a20 <Reset_Handler+0x6c>)
    19e4:	58d4      	ldr	r4, [r2, r3]
    19e6:	50cc      	str	r4, [r1, r3]
    19e8:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19ea:	4283      	cmp	r3, r0
    19ec:	d1fa      	bne.n	19e4 <Reset_Handler+0x30>
    19ee:	e7ea      	b.n	19c6 <Reset_Handler+0x12>
    19f0:	4b0e      	ldr	r3, [pc, #56]	; (1a2c <Reset_Handler+0x78>)
    19f2:	1d1a      	adds	r2, r3, #4
    19f4:	490c      	ldr	r1, [pc, #48]	; (1a28 <Reset_Handler+0x74>)
    19f6:	3103      	adds	r1, #3
    19f8:	1a89      	subs	r1, r1, r2
    19fa:	0889      	lsrs	r1, r1, #2
    19fc:	0089      	lsls	r1, r1, #2
    19fe:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1a00:	2100      	movs	r1, #0
    1a02:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1a04:	4293      	cmp	r3, r2
    1a06:	d1fc      	bne.n	1a02 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1a08:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <Reset_Handler+0x80>)
    1a0a:	217f      	movs	r1, #127	; 0x7f
    1a0c:	4a0a      	ldr	r2, [pc, #40]	; (1a38 <Reset_Handler+0x84>)
    1a0e:	438a      	bics	r2, r1
    1a10:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1a12:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <Reset_Handler+0x88>)
    1a14:	4798      	blx	r3

        /* Branch to main function */
        main();
    1a16:	4b0a      	ldr	r3, [pc, #40]	; (1a40 <Reset_Handler+0x8c>)
    1a18:	4798      	blx	r3
    1a1a:	e7fe      	b.n	1a1a <Reset_Handler+0x66>
    1a1c:	20000000 	.word	0x20000000
    1a20:	00005150 	.word	0x00005150
    1a24:	20000078 	.word	0x20000078
    1a28:	20000ecc 	.word	0x20000ecc
    1a2c:	20000078 	.word	0x20000078
    1a30:	20000004 	.word	0x20000004
    1a34:	e000ed00 	.word	0xe000ed00
    1a38:	00000000 	.word	0x00000000
    1a3c:	00004db1 	.word	0x00004db1
    1a40:	00004b9d 	.word	0x00004b9d

00001a44 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a44:	4b06      	ldr	r3, [pc, #24]	; (1a60 <_sbrk+0x1c>)
    1a46:	681b      	ldr	r3, [r3, #0]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d102      	bne.n	1a52 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1a4c:	4a05      	ldr	r2, [pc, #20]	; (1a64 <_sbrk+0x20>)
    1a4e:	4b04      	ldr	r3, [pc, #16]	; (1a60 <_sbrk+0x1c>)
    1a50:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1a52:	4a03      	ldr	r2, [pc, #12]	; (1a60 <_sbrk+0x1c>)
    1a54:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    1a56:	1818      	adds	r0, r3, r0
    1a58:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a5a:	1c18      	adds	r0, r3, #0
    1a5c:	4770      	bx	lr
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	200000d0 	.word	0x200000d0
    1a64:	20002ed0 	.word	0x20002ed0

00001a68 <appCmdIdentifyPeriodTimerHandler>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1a68:	2280      	movs	r2, #128	; 0x80
    1a6a:	0312      	lsls	r2, r2, #12
    1a6c:	4b01      	ldr	r3, [pc, #4]	; (1a74 <appCmdIdentifyPeriodTimerHandler+0xc>)
    1a6e:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_IDENTIFY);
#endif
	(void)timer;
}
    1a70:	4770      	bx	lr
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	41004400 	.word	0x41004400

00001a78 <appCmdHandle>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
    1a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a7a:	1c04      	adds	r4, r0, #0
	AppCmdHeader_t *header = (AppCmdHeader_t *)data;

	if (size < sizeof(AppCmdHeader_t)) {
		return false;
    1a7c:	2000      	movs	r0, #0
*****************************************************************************/
static bool appCmdHandle(uint8_t *data, uint8_t size)
{
	AppCmdHeader_t *header = (AppCmdHeader_t *)data;

	if (size < sizeof(AppCmdHeader_t)) {
    1a7e:	2900      	cmp	r1, #0
    1a80:	d029      	beq.n	1ad6 <appCmdHandle+0x5e>
		return false;
	}

	if (APP_COMMAND_ID_IDENTIFY == header->id) {
    1a82:	7822      	ldrb	r2, [r4, #0]
    1a84:	2a10      	cmp	r2, #16
    1a86:	d126      	bne.n	1ad6 <appCmdHandle+0x5e>
		AppCmdIdentify_t *req = (AppCmdIdentify_t *)data;

		if (sizeof(AppCmdIdentify_t) != size) {
    1a88:	2905      	cmp	r1, #5
    1a8a:	d124      	bne.n	1ad6 <appCmdHandle+0x5e>
			return false;
		}

		SYS_TimerStop(&appCmdIdentifyDurationTimer);
    1a8c:	4e12      	ldr	r6, [pc, #72]	; (1ad8 <appCmdHandle+0x60>)
    1a8e:	1c30      	adds	r0, r6, #0
    1a90:	4f12      	ldr	r7, [pc, #72]	; (1adc <appCmdHandle+0x64>)
    1a92:	47b8      	blx	r7
		SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    1a94:	4d12      	ldr	r5, [pc, #72]	; (1ae0 <appCmdHandle+0x68>)
    1a96:	1c28      	adds	r0, r5, #0
    1a98:	47b8      	blx	r7

		appCmdIdentifyDurationTimer.interval = req->duration;
    1a9a:	7862      	ldrb	r2, [r4, #1]
    1a9c:	78a3      	ldrb	r3, [r4, #2]
    1a9e:	021b      	lsls	r3, r3, #8
    1aa0:	4313      	orrs	r3, r2
    1aa2:	60b3      	str	r3, [r6, #8]
		appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1aa4:	2300      	movs	r3, #0
    1aa6:	7333      	strb	r3, [r6, #12]
		appCmdIdentifyDurationTimer.handler
			= appCmdIdentifyDurationTimerHandler;
    1aa8:	4b0e      	ldr	r3, [pc, #56]	; (1ae4 <appCmdHandle+0x6c>)
    1aaa:	6133      	str	r3, [r6, #16]
		SYS_TimerStart(&appCmdIdentifyDurationTimer);
    1aac:	1c30      	adds	r0, r6, #0
    1aae:	4e0e      	ldr	r6, [pc, #56]	; (1ae8 <appCmdHandle+0x70>)
    1ab0:	47b0      	blx	r6

		appCmdIdentifyPeriodTimer.interval = req->period;
    1ab2:	78e2      	ldrb	r2, [r4, #3]
    1ab4:	7923      	ldrb	r3, [r4, #4]
    1ab6:	021b      	lsls	r3, r3, #8
    1ab8:	4313      	orrs	r3, r2
    1aba:	60ab      	str	r3, [r5, #8]
		appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    1abc:	2301      	movs	r3, #1
    1abe:	732b      	strb	r3, [r5, #12]
		appCmdIdentifyPeriodTimer.handler
			= appCmdIdentifyPeriodTimerHandler;
    1ac0:	4b0a      	ldr	r3, [pc, #40]	; (1aec <appCmdHandle+0x74>)
    1ac2:	612b      	str	r3, [r5, #16]
		SYS_TimerStart(&appCmdIdentifyPeriodTimer);
    1ac4:	1c28      	adds	r0, r5, #0
    1ac6:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ac8:	2280      	movs	r2, #128	; 0x80
    1aca:	0312      	lsls	r2, r2, #12
    1acc:	4b08      	ldr	r3, [pc, #32]	; (1af0 <appCmdHandle+0x78>)
    1ace:	615a      	str	r2, [r3, #20]
#if (LED_COUNT > 0)
		LED_On(LED_IDENTIFY);
#endif
		NWK_Lock();
    1ad0:	4b08      	ldr	r3, [pc, #32]	; (1af4 <appCmdHandle+0x7c>)
    1ad2:	4798      	blx	r3

		return true;
    1ad4:	2001      	movs	r0, #1
	}

	return false;
}
    1ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ad8:	200000d8 	.word	0x200000d8
    1adc:	00003ba5 	.word	0x00003ba5
    1ae0:	2000010c 	.word	0x2000010c
    1ae4:	00001b81 	.word	0x00001b81
    1ae8:	00003c19 	.word	0x00003c19
    1aec:	00001a69 	.word	0x00001a69
    1af0:	41004400 	.word	0x41004400
    1af4:	00002159 	.word	0x00002159

00001af8 <appCmdDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appCmdDataInd(NWK_DataInd_t *ind)
{
    1af8:	b508      	push	{r3, lr}
    1afa:	1c03      	adds	r3, r0, #0
	return appCmdHandle(ind->data, ind->size);
    1afc:	6880      	ldr	r0, [r0, #8]
    1afe:	7b19      	ldrb	r1, [r3, #12]
    1b00:	4b01      	ldr	r3, [pc, #4]	; (1b08 <appCmdDataInd+0x10>)
    1b02:	4798      	blx	r3
}
    1b04:	bd08      	pop	{r3, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00001a79 	.word	0x00001a79

00001b0c <appCmdCheckPendingTable>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
    1b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (appCmdInProgress) {
    1b0e:	4b0f      	ldr	r3, [pc, #60]	; (1b4c <appCmdCheckPendingTable+0x40>)
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	2b00      	cmp	r3, #0
    1b14:	d119      	bne.n	1b4a <appCmdCheckPendingTable+0x3e>
    1b16:	4f0e      	ldr	r7, [pc, #56]	; (1b50 <appCmdCheckPendingTable+0x44>)
    1b18:	1cfc      	adds	r4, r7, #3
    1b1a:	3730      	adds	r7, #48	; 0x30

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
	appCmdInProgress = entry;
    1b1c:	4e0b      	ldr	r6, [pc, #44]	; (1b4c <appCmdCheckPendingTable+0x40>)

	appCmdDataReq.dstAddr = entry->addr;
    1b1e:	4d0d      	ldr	r5, [pc, #52]	; (1b54 <appCmdCheckPendingTable+0x48>)
	if (appCmdInProgress) {
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		if (appCmdPendingTable[i].ready) {
    1b20:	7823      	ldrb	r3, [r4, #0]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d00e      	beq.n	1b44 <appCmdCheckPendingTable+0x38>
    1b26:	1ee3      	subs	r3, r4, #3

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
	appCmdInProgress = entry;
    1b28:	6033      	str	r3, [r6, #0]

	appCmdDataReq.dstAddr = entry->addr;
    1b2a:	781a      	ldrb	r2, [r3, #0]
    1b2c:	785b      	ldrb	r3, [r3, #1]
    1b2e:	021b      	lsls	r3, r3, #8
    1b30:	4313      	orrs	r3, r2
    1b32:	816b      	strh	r3, [r5, #10]
    1b34:	1c63      	adds	r3, r4, #1
	appCmdDataReq.data = &entry->payload;
    1b36:	612b      	str	r3, [r5, #16]
    1b38:	1e63      	subs	r3, r4, #1
	appCmdDataReq.size = entry->size;
    1b3a:	781b      	ldrb	r3, [r3, #0]
    1b3c:	752b      	strb	r3, [r5, #20]
	NWK_DataReq(&appCmdDataReq);
    1b3e:	1c28      	adds	r0, r5, #0
    1b40:	4b05      	ldr	r3, [pc, #20]	; (1b58 <appCmdCheckPendingTable+0x4c>)
    1b42:	4798      	blx	r3
    1b44:	3409      	adds	r4, #9
{
	if (appCmdInProgress) {
		return;
	}

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    1b46:	42bc      	cmp	r4, r7
    1b48:	d1ea      	bne.n	1b20 <appCmdCheckPendingTable+0x14>
		if (appCmdPendingTable[i].ready) {
			appCmdDataRequest(&appCmdPendingTable[i]);
		}
	}
}
    1b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b4c:	200000d4 	.word	0x200000d4
    1b50:	20000120 	.word	0x20000120
    1b54:	200000ec 	.word	0x200000ec
    1b58:	00002201 	.word	0x00002201

00001b5c <appCmdDataConf>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataConf(NWK_DataReq_t *req)
{
    1b5c:	b508      	push	{r3, lr}
	appCmdInProgress->addr = APP_CMD_INVALID_ADDR;
    1b5e:	4a06      	ldr	r2, [pc, #24]	; (1b78 <appCmdDataConf+0x1c>)
    1b60:	6813      	ldr	r3, [r2, #0]
    1b62:	2101      	movs	r1, #1
    1b64:	4249      	negs	r1, r1
    1b66:	7019      	strb	r1, [r3, #0]
    1b68:	7059      	strb	r1, [r3, #1]
	appCmdInProgress->ready = false;
    1b6a:	2100      	movs	r1, #0
    1b6c:	70d9      	strb	r1, [r3, #3]
	appCmdInProgress = NULL;
    1b6e:	6011      	str	r1, [r2, #0]

	appCmdCheckPendingTable();
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <appCmdDataConf+0x20>)
    1b72:	4798      	blx	r3

	(void)req;
}
    1b74:	bd08      	pop	{r3, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	200000d4 	.word	0x200000d4
    1b7c:	00001b0d 	.word	0x00001b0d

00001b80 <appCmdIdentifyDurationTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdIdentifyDurationTimerHandler(SYS_Timer_t *timer)
{
    1b80:	b508      	push	{r3, lr}
	NWK_Unlock();
    1b82:	4b05      	ldr	r3, [pc, #20]	; (1b98 <appCmdIdentifyDurationTimerHandler+0x18>)
    1b84:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b86:	2280      	movs	r2, #128	; 0x80
    1b88:	0312      	lsls	r2, r2, #12
    1b8a:	4b04      	ldr	r3, [pc, #16]	; (1b9c <appCmdIdentifyDurationTimerHandler+0x1c>)
    1b8c:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
	LED_Off(LED_IDENTIFY);
#endif
	SYS_TimerStop(&appCmdIdentifyPeriodTimer);
    1b8e:	4804      	ldr	r0, [pc, #16]	; (1ba0 <appCmdIdentifyDurationTimerHandler+0x20>)
    1b90:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <appCmdIdentifyDurationTimerHandler+0x24>)
    1b92:	4798      	blx	r3
	(void)timer;
}
    1b94:	bd08      	pop	{r3, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00002169 	.word	0x00002169
    1b9c:	41004400 	.word	0x41004400
    1ba0:	2000010c 	.word	0x2000010c
    1ba4:	00003ba5 	.word	0x00003ba5

00001ba8 <APP_CommandsInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void APP_CommandsInit(void)
{
    1ba8:	b510      	push	{r4, lr}
	appCmdIdentifyDurationTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1baa:	4b13      	ldr	r3, [pc, #76]	; (1bf8 <APP_CommandsInit+0x50>)
    1bac:	2200      	movs	r2, #0
    1bae:	731a      	strb	r2, [r3, #12]
	appCmdIdentifyDurationTimer.handler
		= appCmdIdentifyDurationTimerHandler;
    1bb0:	4912      	ldr	r1, [pc, #72]	; (1bfc <APP_CommandsInit+0x54>)
    1bb2:	6119      	str	r1, [r3, #16]

	appCmdIdentifyPeriodTimer.mode = SYS_TIMER_PERIODIC_MODE;
    1bb4:	4b12      	ldr	r3, [pc, #72]	; (1c00 <APP_CommandsInit+0x58>)
    1bb6:	2101      	movs	r1, #1
    1bb8:	7319      	strb	r1, [r3, #12]
	appCmdIdentifyPeriodTimer.handler = appCmdIdentifyPeriodTimerHandler;
    1bba:	4912      	ldr	r1, [pc, #72]	; (1c04 <APP_CommandsInit+0x5c>)
    1bbc:	6119      	str	r1, [r3, #16]

	appCmdInProgress = NULL;
    1bbe:	4b12      	ldr	r3, [pc, #72]	; (1c08 <APP_CommandsInit+0x60>)
    1bc0:	601a      	str	r2, [r3, #0]
	appCmdDataReq.dstAddr = 0;
    1bc2:	4b12      	ldr	r3, [pc, #72]	; (1c0c <APP_CommandsInit+0x64>)
    1bc4:	815a      	strh	r2, [r3, #10]
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
    1bc6:	2202      	movs	r2, #2
    1bc8:	731a      	strb	r2, [r3, #12]
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
    1bca:	735a      	strb	r2, [r3, #13]
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
    1bcc:	739a      	strb	r2, [r3, #14]
	appCmdDataReq.confirm = appCmdDataConf;
    1bce:	4a10      	ldr	r2, [pc, #64]	; (1c10 <APP_CommandsInit+0x68>)
    1bd0:	619a      	str	r2, [r3, #24]
    1bd2:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    1bd4:	480f      	ldr	r0, [pc, #60]	; (1c14 <APP_CommandsInit+0x6c>)
    1bd6:	2101      	movs	r1, #1
    1bd8:	4249      	negs	r1, r1
		appCmdPendingTable[i].ready = false;
    1bda:	2400      	movs	r4, #0
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appCmdDataReq.confirm = appCmdDataConf;

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
    1bdc:	00da      	lsls	r2, r3, #3
    1bde:	18d2      	adds	r2, r2, r3
    1be0:	5411      	strb	r1, [r2, r0]
    1be2:	1882      	adds	r2, r0, r2
    1be4:	7051      	strb	r1, [r2, #1]
		appCmdPendingTable[i].ready = false;
    1be6:	70d4      	strb	r4, [r2, #3]
    1be8:	3301      	adds	r3, #1
	appCmdDataReq.dstEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.srcEndpoint = APP_CMD_ENDPOINT;
	appCmdDataReq.options = NWK_OPT_ENABLE_SECURITY;
	appCmdDataReq.confirm = appCmdDataConf;

	for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++) {
    1bea:	2b05      	cmp	r3, #5
    1bec:	d1f6      	bne.n	1bdc <APP_CommandsInit+0x34>
		appCmdPendingTable[i].addr = APP_CMD_INVALID_ADDR;
		appCmdPendingTable[i].ready = false;
	}

	NWK_OpenEndpoint(APP_CMD_ENDPOINT, appCmdDataInd);
    1bee:	2002      	movs	r0, #2
    1bf0:	4909      	ldr	r1, [pc, #36]	; (1c18 <APP_CommandsInit+0x70>)
    1bf2:	4b0a      	ldr	r3, [pc, #40]	; (1c1c <APP_CommandsInit+0x74>)
    1bf4:	4798      	blx	r3
}
    1bf6:	bd10      	pop	{r4, pc}
    1bf8:	200000d8 	.word	0x200000d8
    1bfc:	00001b81 	.word	0x00001b81
    1c00:	2000010c 	.word	0x2000010c
    1c04:	00001a69 	.word	0x00001a69
    1c08:	200000d4 	.word	0x200000d4
    1c0c:	200000ec 	.word	0x200000ec
    1c10:	00001b5d 	.word	0x00001b5d
    1c14:	20000120 	.word	0x20000120
    1c18:	00001af9 	.word	0x00001af9
    1c1c:	00002135 	.word	0x00002135

00001c20 <appDataInd>:

/*****************************************************************************
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	AppMessage_t *msg = (AppMessage_t *)ind->data;
    1c20:	6883      	ldr	r3, [r0, #8]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1c22:	2180      	movs	r1, #128	; 0x80
    1c24:	0309      	lsls	r1, r1, #12
    1c26:	4a04      	ldr	r2, [pc, #16]	; (1c38 <appDataInd+0x18>)
    1c28:	61d1      	str	r1, [r2, #28]
#if (LED_COUNT > 0)
	LED_Toggle(LED_DATA);
#endif
	msg->lqi = ind->lqi;
    1c2a:	7b42      	ldrb	r2, [r0, #13]
    1c2c:	765a      	strb	r2, [r3, #25]
	msg->rssi = ind->rssi;
    1c2e:	7b82      	ldrb	r2, [r0, #14]
    1c30:	769a      	strb	r2, [r3, #26]
	if (APP_CommandsPending(ind->srcAddr)) {
		NWK_SetAckControl(APP_COMMAND_PENDING);
	}
#endif
	return true;
}
    1c32:	2001      	movs	r0, #1
    1c34:	4770      	bx	lr
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	41004400 	.word	0x41004400

00001c3c <appNetworkStatusTimerHandler>:
    1c3c:	2280      	movs	r2, #128	; 0x80
    1c3e:	0312      	lsls	r2, r2, #12
    1c40:	4b01      	ldr	r3, [pc, #4]	; (1c48 <appNetworkStatusTimerHandler+0xc>)
    1c42:	61da      	str	r2, [r3, #28]
{
#if (LED_COUNT > 0)
	LED_Toggle(LED_NETWORK);
#endif
	(void)timer;
}
    1c44:	4770      	bx	lr
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	41004400 	.word	0x41004400

00001c4c <appCommandWaitTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appCommandWaitTimerHandler(SYS_Timer_t *timer)
{
	appState = APP_STATE_SENDING_DONE;
    1c4c:	2203      	movs	r2, #3
    1c4e:	4b01      	ldr	r3, [pc, #4]	; (1c54 <appCommandWaitTimerHandler+0x8>)
    1c50:	701a      	strb	r2, [r3, #0]
	(void)timer;
}
    1c52:	4770      	bx	lr
    1c54:	200001a0 	.word	0x200001a0

00001c58 <appDataSendingTimerHandler>:
}

/*****************************************************************************
*****************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
    1c58:	b508      	push	{r3, lr}
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
    1c5a:	4b06      	ldr	r3, [pc, #24]	; (1c74 <appDataSendingTimerHandler+0x1c>)
    1c5c:	781b      	ldrb	r3, [r3, #0]
    1c5e:	2b04      	cmp	r3, #4
    1c60:	d103      	bne.n	1c6a <appDataSendingTimerHandler+0x12>
		appState = APP_STATE_SEND;
    1c62:	2201      	movs	r2, #1
    1c64:	4b03      	ldr	r3, [pc, #12]	; (1c74 <appDataSendingTimerHandler+0x1c>)
    1c66:	701a      	strb	r2, [r3, #0]
    1c68:	e002      	b.n	1c70 <appDataSendingTimerHandler+0x18>
	} else {
		SYS_TimerStart(&appDataSendingTimer);
    1c6a:	4803      	ldr	r0, [pc, #12]	; (1c78 <appDataSendingTimerHandler+0x20>)
    1c6c:	4b03      	ldr	r3, [pc, #12]	; (1c7c <appDataSendingTimerHandler+0x24>)
    1c6e:	4798      	blx	r3
	}

	(void)timer;
}
    1c70:	bd08      	pop	{r3, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	200001a0 	.word	0x200001a0
    1c78:	200001a4 	.word	0x200001a4
    1c7c:	00003c19 	.word	0x00003c19

00001c80 <appDataConf>:

/*****************************************************************************
*****************************************************************************/
#if APP_ROUTER || APP_ENDDEVICE
static void appDataConf(NWK_DataReq_t *req)
{
    1c80:	b510      	push	{r4, lr}
    1c82:	1c04      	adds	r4, r0, #0
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c84:	2280      	movs	r2, #128	; 0x80
    1c86:	0312      	lsls	r2, r2, #12
    1c88:	4b19      	ldr	r3, [pc, #100]	; (1cf0 <appDataConf+0x70>)
    1c8a:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
	LED_Off(LED_DATA);
#endif

	if (NWK_SUCCESS_STATUS == req->status) {
    1c8c:	7f03      	ldrb	r3, [r0, #28]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d10e      	bne.n	1cb0 <appDataConf+0x30>
		if (!appNetworkStatus) {
    1c92:	4b18      	ldr	r3, [pc, #96]	; (1cf4 <appDataConf+0x74>)
    1c94:	781b      	ldrb	r3, [r3, #0]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d118      	bne.n	1ccc <appDataConf+0x4c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c9a:	2280      	movs	r2, #128	; 0x80
    1c9c:	0312      	lsls	r2, r2, #12
    1c9e:	4b14      	ldr	r3, [pc, #80]	; (1cf0 <appDataConf+0x70>)
    1ca0:	615a      	str	r2, [r3, #20]
#if (LED_COUNT > 0)
			LED_On(LED_NETWORK);
#endif
			SYS_TimerStop(&appNetworkStatusTimer);
    1ca2:	4815      	ldr	r0, [pc, #84]	; (1cf8 <appDataConf+0x78>)
    1ca4:	4b15      	ldr	r3, [pc, #84]	; (1cfc <appDataConf+0x7c>)
    1ca6:	4798      	blx	r3
			appNetworkStatus = true;
    1ca8:	2201      	movs	r2, #1
    1caa:	4b12      	ldr	r3, [pc, #72]	; (1cf4 <appDataConf+0x74>)
    1cac:	701a      	strb	r2, [r3, #0]
    1cae:	e00d      	b.n	1ccc <appDataConf+0x4c>
		}
	} else {
		if (appNetworkStatus) {
    1cb0:	4b10      	ldr	r3, [pc, #64]	; (1cf4 <appDataConf+0x74>)
    1cb2:	781b      	ldrb	r3, [r3, #0]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d009      	beq.n	1ccc <appDataConf+0x4c>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1cb8:	2280      	movs	r2, #128	; 0x80
    1cba:	0312      	lsls	r2, r2, #12
    1cbc:	4b0c      	ldr	r3, [pc, #48]	; (1cf0 <appDataConf+0x70>)
    1cbe:	619a      	str	r2, [r3, #24]
#if (LED_COUNT > 0)
			LED_Off(LED_NETWORK);
#endif
			SYS_TimerStart(&appNetworkStatusTimer);
    1cc0:	480d      	ldr	r0, [pc, #52]	; (1cf8 <appDataConf+0x78>)
    1cc2:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <appDataConf+0x80>)
    1cc4:	4798      	blx	r3
			appNetworkStatus = false;
    1cc6:	2200      	movs	r2, #0
    1cc8:	4b0a      	ldr	r3, [pc, #40]	; (1cf4 <appDataConf+0x74>)
    1cca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (APP_COMMAND_PENDING == req->control) {
    1ccc:	7f63      	ldrb	r3, [r4, #29]
    1cce:	2b01      	cmp	r3, #1
    1cd0:	d10a      	bne.n	1ce8 <appDataConf+0x68>
		SYS_TimerStart(&appCommandWaitTimer);
    1cd2:	480c      	ldr	r0, [pc, #48]	; (1d04 <appDataConf+0x84>)
    1cd4:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <appDataConf+0x80>)
    1cd6:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1cd8:	2280      	movs	r2, #128	; 0x80
    1cda:	0312      	lsls	r2, r2, #12
    1cdc:	4b04      	ldr	r3, [pc, #16]	; (1cf0 <appDataConf+0x70>)
    1cde:	61da      	str	r2, [r3, #28]
#if (LED_COUNT > 0)
		LED_Toggle(LED_NETWORK);
#endif
		appState = APP_STATE_WAIT_COMMAND_TIMER;
    1ce0:	2205      	movs	r2, #5
    1ce2:	4b09      	ldr	r3, [pc, #36]	; (1d08 <appDataConf+0x88>)
    1ce4:	701a      	strb	r2, [r3, #0]
    1ce6:	e002      	b.n	1cee <appDataConf+0x6e>
	} else {
		appState = APP_STATE_SENDING_DONE;
    1ce8:	2203      	movs	r2, #3
    1cea:	4b07      	ldr	r3, [pc, #28]	; (1d08 <appDataConf+0x88>)
    1cec:	701a      	strb	r2, [r3, #0]
	}
}
    1cee:	bd10      	pop	{r4, pc}
    1cf0:	41004400 	.word	0x41004400
    1cf4:	20000184 	.word	0x20000184
    1cf8:	20000170 	.word	0x20000170
    1cfc:	00003ba5 	.word	0x00003ba5
    1d00:	00003c19 	.word	0x00003c19
    1d04:	20000188 	.word	0x20000188
    1d08:	200001a0 	.word	0x200001a0

00001d0c <enable_port>:
}
//FEDERICO'S ADDED CODE $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//added code, think about moving to main.c
// setting up pin values to test 
void enable_port(void){
    1d0c:	b530      	push	{r4, r5, lr}
	// not necessary but can come in handy 
	PortGroup *portA = &(ports->Group[0]);
	
	// clears pin PA06 as an input
	// PA06 has no I2C, PA09 does but is set in the ALTERNATE on the board (may not matter)
	portA->DIRCLR.reg = 1<<6;
    1d0e:	4b11      	ldr	r3, [pc, #68]	; (1d54 <enable_port+0x48>)
    1d10:	2240      	movs	r2, #64	; 0x40
    1d12:	605a      	str	r2, [r3, #4]
	// make PA06 owned by the adc
	portA->PMUX[3].bit.PMUXE = 0x1;
    1d14:	2133      	movs	r1, #51	; 0x33
    1d16:	5c5c      	ldrb	r4, [r3, r1]
    1d18:	200f      	movs	r0, #15
    1d1a:	4384      	bics	r4, r0
    1d1c:	2201      	movs	r2, #1
    1d1e:	4314      	orrs	r4, r2
    1d20:	545c      	strb	r4, [r3, r1]
	portA->PINCFG[6].bit.PMUXEN = 1;
    1d22:	2146      	movs	r1, #70	; 0x46
    1d24:	5c5c      	ldrb	r4, [r3, r1]
    1d26:	4314      	orrs	r4, r2
    1d28:	545c      	strb	r4, [r3, r1]
	
	// setting pins PA18 and PA05 as outputs
	portA->DIRCLR.reg = 1<<5|1<<18;
    1d2a:	490b      	ldr	r1, [pc, #44]	; (1d58 <enable_port+0x4c>)
    1d2c:	6059      	str	r1, [r3, #4]
	// having PA18 and PA05 owned by the EIC
	portA->PMUX[2].bit.PMUXO = 0x00;
    1d2e:	2132      	movs	r1, #50	; 0x32
    1d30:	5c5c      	ldrb	r4, [r3, r1]
    1d32:	250f      	movs	r5, #15
    1d34:	402c      	ands	r4, r5
    1d36:	545c      	strb	r4, [r3, r1]
	portA->PINCFG[5].bit.PMUXEN = 1;
    1d38:	2145      	movs	r1, #69	; 0x45
    1d3a:	5c5c      	ldrb	r4, [r3, r1]
    1d3c:	4314      	orrs	r4, r2
    1d3e:	545c      	strb	r4, [r3, r1]
	portA->PMUX[9].bit.PMUXE = 0x00;
    1d40:	2139      	movs	r1, #57	; 0x39
    1d42:	5c5c      	ldrb	r4, [r3, r1]
    1d44:	4384      	bics	r4, r0
    1d46:	545c      	strb	r4, [r3, r1]
	portA->PINCFG[18].bit.PMUXEN = 1;
    1d48:	2152      	movs	r1, #82	; 0x52
    1d4a:	5c58      	ldrb	r0, [r3, r1]
    1d4c:	4302      	orrs	r2, r0
    1d4e:	545a      	strb	r2, [r3, r1]
	// sets pins as output to send the data
	//portA->DIRSET.reg = 1<<18|1<<13;
	
	// this is only necessary is the input is by a button
	// portA->PINCFG[6].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
}
    1d50:	bd30      	pop	{r4, r5, pc}
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	41004400 	.word	0x41004400
    1d58:	00040020 	.word	0x00040020

00001d5c <enable_adc_clocks>:
}


void enable_adc_clocks(void){
	
	PM->APBCMASK.reg |= 01u<<16; // PM_APBCMASK for ADC is located at the 16th bit
    1d5c:	4b07      	ldr	r3, [pc, #28]	; (1d7c <enable_adc_clocks+0x20>)
    1d5e:	6a19      	ldr	r1, [r3, #32]
    1d60:	2280      	movs	r2, #128	; 0x80
    1d62:	0252      	lsls	r2, r2, #9
    1d64:	430a      	orrs	r2, r1
    1d66:	621a      	str	r2, [r3, #32]
	uint32_t temp = 0x1e;
	temp |= 0<<8;
	GCLK->CLKCTRL.reg = temp;
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <enable_adc_clocks+0x24>)
    1d6a:	221e      	movs	r2, #30
    1d6c:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.reg |= 0x1u<<14;
    1d6e:	8859      	ldrh	r1, [r3, #2]
    1d70:	2280      	movs	r2, #128	; 0x80
    1d72:	01d2      	lsls	r2, r2, #7
    1d74:	430a      	orrs	r2, r1
    1d76:	805a      	strh	r2, [r3, #2]
}
    1d78:	4770      	bx	lr
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	40000400 	.word	0x40000400
    1d80:	40000c00 	.word	0x40000c00

00001d84 <init_adc>:

void init_adc(void){
    1d84:	b510      	push	{r4, lr}
	
	portADC->CTRLA.reg = 0<<1;
    1d86:	4b16      	ldr	r3, [pc, #88]	; (1de0 <init_adc+0x5c>)
    1d88:	2100      	movs	r1, #0
    1d8a:	6818      	ldr	r0, [r3, #0]
    1d8c:	7001      	strb	r1, [r0, #0]
	
	// unsure which values to choose here, so i had some values from EE138Lab5 to act as dummy values
	portADC->REFCTRL.reg = 0x02;
    1d8e:	2202      	movs	r2, #2
    1d90:	681c      	ldr	r4, [r3, #0]
    1d92:	7062      	strb	r2, [r4, #1]
	portADC->AVGCTRL.reg = 0x44;	// adjusting the ADJRES and the SAMPLENUM
    1d94:	2044      	movs	r0, #68	; 0x44
    1d96:	681c      	ldr	r4, [r3, #0]
    1d98:	70a0      	strb	r0, [r4, #2]
	portADC->SAMPCTRL.reg = 0;		// need to look more into this value, but will be set to 0 for now
    1d9a:	6818      	ldr	r0, [r3, #0]
    1d9c:	70c1      	strb	r1, [r0, #3]
	portADC->CTRLB.bit.PRESCALER = 0x7;	// peripheral clock divided by 512 for now
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	8898      	ldrh	r0, [r3, #4]
    1da2:	21e0      	movs	r1, #224	; 0xe0
    1da4:	00c9      	lsls	r1, r1, #3
    1da6:	4301      	orrs	r1, r0
    1da8:	8099      	strh	r1, [r3, #4]
	portADC->CTRLB.bit.RESSEL = 0x1;	// resolution is set to 16bits
    1daa:	8899      	ldrh	r1, [r3, #4]
    1dac:	2030      	movs	r0, #48	; 0x30
    1dae:	4381      	bics	r1, r0
    1db0:	2010      	movs	r0, #16
    1db2:	4301      	orrs	r1, r0
    1db4:	8099      	strh	r1, [r3, #4]
	portADC->INPUTCTRL.bit.GAIN = 0xF;	// gain is 1/2 
    1db6:	6918      	ldr	r0, [r3, #16]
    1db8:	21f0      	movs	r1, #240	; 0xf0
    1dba:	0509      	lsls	r1, r1, #20
    1dbc:	4301      	orrs	r1, r0
    1dbe:	6119      	str	r1, [r3, #16]
	portADC->INPUTCTRL.bit.MUXNEG = 0x19;	// 0x19 is the I/O ground
    1dc0:	6918      	ldr	r0, [r3, #16]
    1dc2:	4908      	ldr	r1, [pc, #32]	; (1de4 <init_adc+0x60>)
    1dc4:	4001      	ands	r1, r0
    1dc6:	20c8      	movs	r0, #200	; 0xc8
    1dc8:	0140      	lsls	r0, r0, #5
    1dca:	4301      	orrs	r1, r0
    1dcc:	6119      	str	r1, [r3, #16]
	portADC->INPUTCTRL.bit.MUXPOS = 0x06;	// 0x06 is PA06 which is set to be owned by the ADC
    1dce:	6919      	ldr	r1, [r3, #16]
    1dd0:	201f      	movs	r0, #31
    1dd2:	4381      	bics	r1, r0
    1dd4:	2006      	movs	r0, #6
    1dd6:	4301      	orrs	r1, r0
    1dd8:	6119      	str	r1, [r3, #16]
	
	portADC->CTRLA.reg = 1<<1;
    1dda:	701a      	strb	r2, [r3, #0]
}
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	2000000c 	.word	0x2000000c
    1de4:	ffffe0ff 	.word	0xffffe0ff

00001de8 <wsndemo_init>:

/**
 * Init function of the WSNDemo application
 */
void wsndemo_init(void) 
{
    1de8:	b570      	push	{r4, r5, r6, lr}
    1dea:	b082      	sub	sp, #8
	SYS_Init();
    1dec:	4b0c      	ldr	r3, [pc, #48]	; (1e20 <wsndemo_init+0x38>)
    1dee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1df0:	ac01      	add	r4, sp, #4
    1df2:	2300      	movs	r3, #0
    1df4:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1df6:	2601      	movs	r6, #1
    1df8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1dfa:	70a3      	strb	r3, [r4, #2]
	//my init stuff for pins 
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    1dfc:	201c      	movs	r0, #28
    1dfe:	1c21      	adds	r1, r4, #0
    1e00:	4d08      	ldr	r5, [pc, #32]	; (1e24 <wsndemo_init+0x3c>)
    1e02:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1e04:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    1e06:	2013      	movs	r0, #19
    1e08:	1c21      	adds	r1, r4, #0
    1e0a:	47a8      	blx	r5
	////////////////////////////////////////////////
	// enable the pins we use
	enable_port();
    1e0c:	4b06      	ldr	r3, [pc, #24]	; (1e28 <wsndemo_init+0x40>)
    1e0e:	4798      	blx	r3
	
	// ADC initialization
	//struct adc_config config;
	//adc_get_config_defaults(&config);
	enable_adc_clocks();		// sets the general clock
    1e10:	4b06      	ldr	r3, [pc, #24]	; (1e2c <wsndemo_init+0x44>)
    1e12:	4798      	blx	r3
	init_adc();
    1e14:	4b06      	ldr	r3, [pc, #24]	; (1e30 <wsndemo_init+0x48>)
    1e16:	4798      	blx	r3
	
	//EIC initialization
	
#if APP_ENDDEVICE
	sm_init();
    1e18:	4b06      	ldr	r3, [pc, #24]	; (1e34 <wsndemo_init+0x4c>)
    1e1a:	4798      	blx	r3
#endif
#if APP_COORDINATOR
	sio2host_init();
#endif
	
}
    1e1c:	b002      	add	sp, #8
    1e1e:	bd70      	pop	{r4, r5, r6, pc}
    1e20:	00003a99 	.word	0x00003a99
    1e24:	000004a9 	.word	0x000004a9
    1e28:	00001d0d 	.word	0x00001d0d
    1e2c:	00001d5d 	.word	0x00001d5d
    1e30:	00001d85 	.word	0x00001d85
    1e34:	00004009 	.word	0x00004009

00001e38 <read_adc>:
}
int read_adc(void)  //program gets stuck in here as of 2:16pm 11.28.17
{

	// start the conversion
	portADC->SWTRIG.bit.START = 1;
    1e38:	4b08      	ldr	r3, [pc, #32]	; (1e5c <read_adc+0x24>)
    1e3a:	681a      	ldr	r2, [r3, #0]
    1e3c:	7b11      	ldrb	r1, [r2, #12]
    1e3e:	2302      	movs	r3, #2
    1e40:	430b      	orrs	r3, r1
    1e42:	7313      	strb	r3, [r2, #12]
	portADC->INTFLAG.reg = 0x01;
    1e44:	2301      	movs	r3, #1
    1e46:	7613      	strb	r3, [r2, #24]
	while((portADC->INTFLAG.bit.RESRDY));  //see if this while loop is what's causing us to get stuck
    1e48:	2101      	movs	r1, #1
    1e4a:	7e13      	ldrb	r3, [r2, #24]
    1e4c:	4219      	tst	r1, r3
    1e4e:	d1fc      	bne.n	1e4a <read_adc+0x12>
	//wait for conversion to be available
	z = portADC->RESULT.reg;
    1e50:	8b52      	ldrh	r2, [r2, #26]
    1e52:	b292      	uxth	r2, r2
    1e54:	4b02      	ldr	r3, [pc, #8]	; (1e60 <read_adc+0x28>)
    1e56:	601a      	str	r2, [r3, #0]
	return(z); 					//insert register where ADC store value
    1e58:	6818      	ldr	r0, [r3, #0]
    1e5a:	4770      	bx	lr
    1e5c:	2000000c 	.word	0x2000000c
    1e60:	2000019c 	.word	0x2000019c

00001e64 <wsndemo_task>:
/**
 * Task of the WSNDemo application
 * This task should be called in a while(1)
 */
void wsndemo_task(void)
{
    1e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//resultADC = read_adc();
	SYS_TaskHandler();
    1e66:	4b6a      	ldr	r3, [pc, #424]	; (2010 <STACK_SIZE+0x10>)
    1e68:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState) {
    1e6a:	4b6a      	ldr	r3, [pc, #424]	; (2014 <STACK_SIZE+0x14>)
    1e6c:	781a      	ldrb	r2, [r3, #0]
    1e6e:	2a08      	cmp	r2, #8
    1e70:	d900      	bls.n	1e74 <wsndemo_task+0x10>
    1e72:	e0cc      	b.n	200e <STACK_SIZE+0xe>
    1e74:	0093      	lsls	r3, r2, #2
    1e76:	4a68      	ldr	r2, [pc, #416]	; (2018 <STACK_SIZE+0x18>)
    1e78:	58d3      	ldr	r3, [r2, r3]
    1e7a:	469f      	mov	pc, r3

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	appMsg.commandId            = APP_COMMAND_ID_NETWORK_INFO;
    1e7c:	4b67      	ldr	r3, [pc, #412]	; (201c <STACK_SIZE+0x1c>)
    1e7e:	2501      	movs	r5, #1
    1e80:	701d      	strb	r5, [r3, #0]
	appMsg.nodeType             = APP_NODE_TYPE;
    1e82:	2202      	movs	r2, #2
    1e84:	705a      	strb	r2, [r3, #1]
	appMsg.extAddr              = APP_ADDR;
    1e86:	2400      	movs	r4, #0
    1e88:	4a65      	ldr	r2, [pc, #404]	; (2020 <STACK_SIZE+0x20>)
    1e8a:	805a      	strh	r2, [r3, #2]
    1e8c:	2100      	movs	r1, #0
    1e8e:	8099      	strh	r1, [r3, #4]
    1e90:	80d9      	strh	r1, [r3, #6]
    1e92:	8119      	strh	r1, [r3, #8]
	appMsg.shortAddr            = APP_ADDR;
    1e94:	815a      	strh	r2, [r3, #10]
	appMsg.softVersion          = 0x01010100;
    1e96:	4a63      	ldr	r2, [pc, #396]	; (2024 <STACK_SIZE+0x24>)
    1e98:	60da      	str	r2, [r3, #12]
	appMsg.channelMask          = (1L << APP_CHANNEL);
    1e9a:	2280      	movs	r2, #128	; 0x80
    1e9c:	0212      	lsls	r2, r2, #8
    1e9e:	611a      	str	r2, [r3, #16]
	appMsg.panId                = APP_PANID;
    1ea0:	4e61      	ldr	r6, [pc, #388]	; (2028 <STACK_SIZE+0x28>)
    1ea2:	829e      	strh	r6, [r3, #20]
	appMsg.workingChannel       = APP_CHANNEL;
    1ea4:	220f      	movs	r2, #15
    1ea6:	759a      	strb	r2, [r3, #22]
	appMsg.parentShortAddr      = 0;
    1ea8:	2200      	movs	r2, #0
    1eaa:	75da      	strb	r2, [r3, #23]
    1eac:	761a      	strb	r2, [r3, #24]
	appMsg.lqi                  = 0;
    1eae:	765c      	strb	r4, [r3, #25]
	appMsg.rssi                 = 0;
    1eb0:	769c      	strb	r4, [r3, #26]

	appMsg.sensors.type        = 1;
    1eb2:	76dd      	strb	r5, [r3, #27]
	appMsg.sensors.size        = sizeof(int32_t) * 3;
    1eb4:	220c      	movs	r2, #12
	appMsg.sensors.battery     = 0;
    1eb6:	21ff      	movs	r1, #255	; 0xff
    1eb8:	b2d2      	uxtb	r2, r2
    1eba:	61da      	str	r2, [r3, #28]
    1ebc:	2220      	movs	r2, #32
    1ebe:	2000      	movs	r0, #0
    1ec0:	5498      	strb	r0, [r3, r2]
	appMsg.sensors.temperature = 0;
    1ec2:	6a18      	ldr	r0, [r3, #32]
    1ec4:	4008      	ands	r0, r1
    1ec6:	6218      	str	r0, [r3, #32]
    1ec8:	2700      	movs	r7, #0
    1eca:	2024      	movs	r0, #36	; 0x24
    1ecc:	541f      	strb	r7, [r3, r0]
	appMsg.sensors.light       = 0;
    1ece:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1ed0:	4001      	ands	r1, r0
    1ed2:	6259      	str	r1, [r3, #36]	; 0x24
    1ed4:	2000      	movs	r0, #0
    1ed6:	2128      	movs	r1, #40	; 0x28
    1ed8:	5458      	strb	r0, [r3, r1]

	appMsg.caption.type         = 32;
    1eda:	2129      	movs	r1, #41	; 0x29
    1edc:	545a      	strb	r2, [r3, r1]
	appMsg.caption.size         = APP_CAPTION_SIZE;
    1ede:	210a      	movs	r1, #10
    1ee0:	222a      	movs	r2, #42	; 0x2a
    1ee2:	5499      	strb	r1, [r3, r2]
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    1ee4:	1c18      	adds	r0, r3, #0
    1ee6:	302b      	adds	r0, #43	; 0x2b
    1ee8:	4950      	ldr	r1, [pc, #320]	; (202c <STACK_SIZE+0x2c>)
    1eea:	220a      	movs	r2, #10
    1eec:	4b50      	ldr	r3, [pc, #320]	; (2030 <STACK_SIZE+0x30>)
    1eee:	4798      	blx	r3

	NWK_SetAddr(APP_ADDR);
    1ef0:	4850      	ldr	r0, [pc, #320]	; (2034 <STACK_SIZE+0x34>)
    1ef2:	4b51      	ldr	r3, [pc, #324]	; (2038 <STACK_SIZE+0x38>)
    1ef4:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    1ef6:	1c30      	adds	r0, r6, #0
    1ef8:	4b50      	ldr	r3, [pc, #320]	; (203c <STACK_SIZE+0x3c>)
    1efa:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    1efc:	200f      	movs	r0, #15
    1efe:	4b50      	ldr	r3, [pc, #320]	; (2040 <STACK_SIZE+0x40>)
    1f00:	4798      	blx	r3
#if (defined(PHY_AT86RF212B) || defined(PHY_AT86RF212))
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);
    1f02:	2001      	movs	r0, #1
    1f04:	4b4f      	ldr	r3, [pc, #316]	; (2044 <STACK_SIZE+0x44>)
    1f06:	4798      	blx	r3

#ifdef NWK_ENABLE_SECURITY
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    1f08:	484f      	ldr	r0, [pc, #316]	; (2048 <STACK_SIZE+0x48>)
    1f0a:	4b50      	ldr	r3, [pc, #320]	; (204c <STACK_SIZE+0x4c>)
    1f0c:	4798      	blx	r3
#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    1f0e:	2001      	movs	r0, #1
    1f10:	494f      	ldr	r1, [pc, #316]	; (2050 <STACK_SIZE+0x50>)
    1f12:	4b50      	ldr	r3, [pc, #320]	; (2054 <STACK_SIZE+0x54>)
    1f14:	4798      	blx	r3

	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    1f16:	4b50      	ldr	r3, [pc, #320]	; (2058 <STACK_SIZE+0x58>)
    1f18:	22fa      	movs	r2, #250	; 0xfa
    1f1a:	00d2      	lsls	r2, r2, #3
    1f1c:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1f1e:	731c      	strb	r4, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    1f20:	4a4e      	ldr	r2, [pc, #312]	; (205c <STACK_SIZE+0x5c>)
    1f22:	611a      	str	r2, [r3, #16]

#if APP_ROUTER || APP_ENDDEVICE
	appNetworkStatus = false;
    1f24:	4b4e      	ldr	r3, [pc, #312]	; (2060 <STACK_SIZE+0x60>)
    1f26:	701c      	strb	r4, [r3, #0]
	appNetworkStatusTimer.interval = 500;
    1f28:	484e      	ldr	r0, [pc, #312]	; (2064 <STACK_SIZE+0x64>)
    1f2a:	23fa      	movs	r3, #250	; 0xfa
    1f2c:	005b      	lsls	r3, r3, #1
    1f2e:	6083      	str	r3, [r0, #8]
	appNetworkStatusTimer.mode = SYS_TIMER_PERIODIC_MODE;
    1f30:	7305      	strb	r5, [r0, #12]
	appNetworkStatusTimer.handler = appNetworkStatusTimerHandler;
    1f32:	4b4d      	ldr	r3, [pc, #308]	; (2068 <STACK_SIZE+0x68>)
    1f34:	6103      	str	r3, [r0, #16]
	SYS_TimerStart(&appNetworkStatusTimer);
    1f36:	4b4d      	ldr	r3, [pc, #308]	; (206c <STACK_SIZE+0x6c>)
    1f38:	4798      	blx	r3

	appCommandWaitTimer.interval = NWK_ACK_WAIT_TIME;
    1f3a:	4b4d      	ldr	r3, [pc, #308]	; (2070 <STACK_SIZE+0x70>)
    1f3c:	22fa      	movs	r2, #250	; 0xfa
    1f3e:	0092      	lsls	r2, r2, #2
    1f40:	609a      	str	r2, [r3, #8]
	appCommandWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1f42:	731c      	strb	r4, [r3, #12]
	appCommandWaitTimer.handler = appCommandWaitTimerHandler;
    1f44:	4a4b      	ldr	r2, [pc, #300]	; (2074 <STACK_SIZE+0x74>)
    1f46:	611a      	str	r2, [r3, #16]
	LED_On(LED_NETWORK);
#endif
#endif

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
	srand(PHY_RandomReq());
    1f48:	4b4b      	ldr	r3, [pc, #300]	; (2078 <STACK_SIZE+0x78>)
    1f4a:	4798      	blx	r3
    1f4c:	4b4b      	ldr	r3, [pc, #300]	; (207c <STACK_SIZE+0x7c>)
    1f4e:	4798      	blx	r3
#endif

	APP_CommandsInit();
    1f50:	4b4b      	ldr	r3, [pc, #300]	; (2080 <STACK_SIZE+0x80>)
    1f52:	4798      	blx	r3

	appState = APP_STATE_SEND;
    1f54:	4b2f      	ldr	r3, [pc, #188]	; (2014 <STACK_SIZE+0x14>)
    1f56:	701d      	strb	r5, [r3, #0]
    1f58:	e059      	b.n	200e <STACK_SIZE+0xe>
/*****************************************************************************
*****************************************************************************/
static void appSendData(void)
{
#ifdef NWK_ENABLE_ROUTING
	appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
    1f5a:	2000      	movs	r0, #0
    1f5c:	2100      	movs	r1, #0
    1f5e:	4b49      	ldr	r3, [pc, #292]	; (2084 <STACK_SIZE+0x84>)
    1f60:	4798      	blx	r3
    1f62:	4c2e      	ldr	r4, [pc, #184]	; (201c <STACK_SIZE+0x1c>)
    1f64:	75e0      	strb	r0, [r4, #23]
    1f66:	0a00      	lsrs	r0, r0, #8
    1f68:	7620      	strb	r0, [r4, #24]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1f6a:	4d47      	ldr	r5, [pc, #284]	; (2088 <STACK_SIZE+0x88>)
    1f6c:	6a2b      	ldr	r3, [r5, #32]
	  switchData = 0x54;
  }
  //Read and store the ADC for the temperature sensor
  //uint8_t temperatureData;
  
  resultADC = read_adc();
    1f6e:	4b47      	ldr	r3, [pc, #284]	; (208c <STACK_SIZE+0x8c>)
    1f70:	4798      	blx	r3
    1f72:	b2c0      	uxtb	r0, r0
    1f74:	4b46      	ldr	r3, [pc, #280]	; (2090 <STACK_SIZE+0x90>)
    1f76:	7018      	strb	r0, [r3, #0]
  
  appMsg.sensors.battery     =	0x46;//switchData; //thisData;		//0x42;//B for battery //rand() & 0xffff;
    1f78:	23ff      	movs	r3, #255	; 0xff
    1f7a:	7f21      	ldrb	r1, [r4, #28]
    1f7c:	228c      	movs	r2, #140	; 0x8c
    1f7e:	01d2      	lsls	r2, r2, #7
    1f80:	430a      	orrs	r2, r1
    1f82:	61e2      	str	r2, [r4, #28]
    1f84:	2100      	movs	r1, #0
    1f86:	2220      	movs	r2, #32
    1f88:	54a1      	strb	r1, [r4, r2]
  appMsg.sensors.temperature =	0x42;//T for temp //rand() & 0x7f;
    1f8a:	6a21      	ldr	r1, [r4, #32]
    1f8c:	4019      	ands	r1, r3
    1f8e:	2284      	movs	r2, #132	; 0x84
    1f90:	01d2      	lsls	r2, r2, #7
    1f92:	430a      	orrs	r2, r1
    1f94:	6222      	str	r2, [r4, #32]
    1f96:	2100      	movs	r1, #0
    1f98:	2224      	movs	r2, #36	; 0x24
    1f9a:	54a1      	strb	r1, [r4, r2]
  appMsg.sensors.light       =	0x53;//S to indicate position of sensor data in array//read_adc();//L for light //rand() & 0xff;
    1f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1f9e:	4013      	ands	r3, r2
    1fa0:	22a6      	movs	r2, #166	; 0xa6
    1fa2:	01d2      	lsls	r2, r2, #7
    1fa4:	4313      	orrs	r3, r2
    1fa6:	6263      	str	r3, [r4, #36]	; 0x24
    1fa8:	2200      	movs	r2, #0
    1faa:	2328      	movs	r3, #40	; 0x28
    1fac:	54e2      	strb	r2, [r4, r3]
#if APP_COORDINATOR
	appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg));
	SYS_TimerStart(&appDataSendingTimer);
	appState = APP_STATE_WAIT_SEND_TIMER;
#else
	appNwkDataReq.dstAddr = 0;
    1fae:	4839      	ldr	r0, [pc, #228]	; (2094 <STACK_SIZE+0x94>)
    1fb0:	2300      	movs	r3, #0
    1fb2:	8143      	strh	r3, [r0, #10]
	appNwkDataReq.dstEndpoint = APP_ENDPOINT;
    1fb4:	2301      	movs	r3, #1
    1fb6:	7303      	strb	r3, [r0, #12]
	appNwkDataReq.srcEndpoint = APP_ENDPOINT;
    1fb8:	7343      	strb	r3, [r0, #13]
	appNwkDataReq.options = NWK_OPT_ACK_REQUEST | NWK_OPT_ENABLE_SECURITY;
    1fba:	2303      	movs	r3, #3
    1fbc:	7383      	strb	r3, [r0, #14]
	appNwkDataReq.data = (uint8_t *)&appMsg;
    1fbe:	6104      	str	r4, [r0, #16]
	appNwkDataReq.size = sizeof(appMsg);
    1fc0:	2335      	movs	r3, #53	; 0x35
    1fc2:	7503      	strb	r3, [r0, #20]
	appNwkDataReq.confirm = appDataConf;
    1fc4:	4b34      	ldr	r3, [pc, #208]	; (2098 <STACK_SIZE+0x98>)
    1fc6:	6183      	str	r3, [r0, #24]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1fc8:	2380      	movs	r3, #128	; 0x80
    1fca:	031b      	lsls	r3, r3, #12
    1fcc:	616b      	str	r3, [r5, #20]
#if (LED_COUNT > 0)
	LED_On(LED_DATA);
#endif
	NWK_DataReq(&appNwkDataReq);
    1fce:	4b33      	ldr	r3, [pc, #204]	; (209c <STACK_SIZE+0x9c>)
    1fd0:	4798      	blx	r3

	appState = APP_STATE_WAIT_CONF;
    1fd2:	2202      	movs	r2, #2
    1fd4:	4b0f      	ldr	r3, [pc, #60]	; (2014 <STACK_SIZE+0x14>)
    1fd6:	701a      	strb	r2, [r3, #0]
    1fd8:	e019      	b.n	200e <STACK_SIZE+0xe>
	break;

	case APP_STATE_SENDING_DONE:
	{
#if APP_ENDDEVICE
		appState = APP_STATE_PREPARE_TO_SLEEP;
    1fda:	2206      	movs	r2, #6
    1fdc:	4b0d      	ldr	r3, [pc, #52]	; (2014 <STACK_SIZE+0x14>)
    1fde:	701a      	strb	r2, [r3, #0]
    1fe0:	e015      	b.n	200e <STACK_SIZE+0xe>
	break;

#if APP_ENDDEVICE
	case APP_STATE_PREPARE_TO_SLEEP:
	{
		if (!NWK_Busy()) {
    1fe2:	4b2f      	ldr	r3, [pc, #188]	; (20a0 <STACK_SIZE+0xa0>)
    1fe4:	4798      	blx	r3
    1fe6:	2800      	cmp	r0, #0
    1fe8:	d111      	bne.n	200e <STACK_SIZE+0xe>
			NWK_SleepReq();
    1fea:	4b2e      	ldr	r3, [pc, #184]	; (20a4 <STACK_SIZE+0xa4>)
    1fec:	4798      	blx	r3
			appState = APP_STATE_SLEEP;
    1fee:	2207      	movs	r2, #7
    1ff0:	4b08      	ldr	r3, [pc, #32]	; (2014 <STACK_SIZE+0x14>)
    1ff2:	701a      	strb	r2, [r3, #0]
    1ff4:	e00b      	b.n	200e <STACK_SIZE+0xe>
	}
	break;

	case APP_STATE_SLEEP:
	{
		sm_sleep(APP_SENDING_INTERVAL / 1000);
    1ff6:	2002      	movs	r0, #2
    1ff8:	4b2b      	ldr	r3, [pc, #172]	; (20a8 <STACK_SIZE+0xa8>)
    1ffa:	4798      	blx	r3
		appState = APP_STATE_WAKEUP;
    1ffc:	2208      	movs	r2, #8
    1ffe:	4b05      	ldr	r3, [pc, #20]	; (2014 <STACK_SIZE+0x14>)
    2000:	701a      	strb	r2, [r3, #0]
    2002:	e004      	b.n	200e <STACK_SIZE+0xe>
	}
	break;

	case APP_STATE_WAKEUP:
	{
		NWK_WakeupReq();
    2004:	4b29      	ldr	r3, [pc, #164]	; (20ac <STACK_SIZE+0xac>)
    2006:	4798      	blx	r3
		/*
		 * #if (LED_COUNT > 0)
		 *    LED_On(LED_NETWORK);
		 #endif*/

		appState = APP_STATE_SEND;
    2008:	2201      	movs	r2, #1
    200a:	4b02      	ldr	r3, [pc, #8]	; (2014 <STACK_SIZE+0x14>)
    200c:	701a      	strb	r2, [r3, #0]
void wsndemo_task(void)
{
	//resultADC = read_adc();
	SYS_TaskHandler();
	APP_TaskHandler();
}
    200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2010:	00003abd 	.word	0x00003abd
    2014:	200001a0 	.word	0x200001a0
    2018:	00005050 	.word	0x00005050
    201c:	200001b8 	.word	0x200001b8
    2020:	ffff8001 	.word	0xffff8001
    2024:	01010100 	.word	0x01010100
    2028:	00001234 	.word	0x00001234
    202c:	00005074 	.word	0x00005074
    2030:	00004dfd 	.word	0x00004dfd
    2034:	00008001 	.word	0x00008001
    2038:	0000210d 	.word	0x0000210d
    203c:	00002121 	.word	0x00002121
    2040:	00003861 	.word	0x00003861
    2044:	0000384d 	.word	0x0000384d
    2048:	00005080 	.word	0x00005080
    204c:	00003151 	.word	0x00003151
    2050:	00001c21 	.word	0x00001c21
    2054:	00002135 	.word	0x00002135
    2058:	200001a4 	.word	0x200001a4
    205c:	00001c59 	.word	0x00001c59
    2060:	20000184 	.word	0x20000184
    2064:	20000170 	.word	0x20000170
    2068:	00001c3d 	.word	0x00001c3d
    206c:	00003c19 	.word	0x00003c19
    2070:	20000188 	.word	0x20000188
    2074:	00001c4d 	.word	0x00001c4d
    2078:	00003965 	.word	0x00003965
    207c:	00004e21 	.word	0x00004e21
    2080:	00001ba9 	.word	0x00001ba9
    2084:	00002539 	.word	0x00002539
    2088:	41004400 	.word	0x41004400
    208c:	00001e39 	.word	0x00001e39
    2090:	20000009 	.word	0x20000009
    2094:	20000150 	.word	0x20000150
    2098:	00001c81 	.word	0x00001c81
    209c:	00002201 	.word	0x00002201
    20a0:	00002145 	.word	0x00002145
    20a4:	00002179 	.word	0x00002179
    20a8:	00004059 	.word	0x00004059
    20ac:	00002185 	.word	0x00002185

000020b0 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    20b0:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    20b2:	490e      	ldr	r1, [pc, #56]	; (20ec <NWK_Init+0x3c>)
    20b4:	2300      	movs	r3, #0
    20b6:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    20b8:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    20ba:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    20bc:	2258      	movs	r2, #88	; 0x58
    20be:	528b      	strh	r3, [r1, r2]
    20c0:	1c0b      	adds	r3, r1, #0
    20c2:	3308      	adds	r3, #8
    20c4:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    20c6:	2200      	movs	r2, #0
    20c8:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    20ca:	428b      	cmp	r3, r1
    20cc:	d1fc      	bne.n	20c8 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    20ce:	4b08      	ldr	r3, [pc, #32]	; (20f0 <NWK_Init+0x40>)
    20d0:	4798      	blx	r3
	nwkRxInit();
    20d2:	4b08      	ldr	r3, [pc, #32]	; (20f4 <NWK_Init+0x44>)
    20d4:	4798      	blx	r3
	nwkFrameInit();
    20d6:	4b08      	ldr	r3, [pc, #32]	; (20f8 <NWK_Init+0x48>)
    20d8:	4798      	blx	r3
	nwkDataReqInit();
    20da:	4b08      	ldr	r3, [pc, #32]	; (20fc <NWK_Init+0x4c>)
    20dc:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    20de:	4b08      	ldr	r3, [pc, #32]	; (2100 <NWK_Init+0x50>)
    20e0:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    20e2:	4b08      	ldr	r3, [pc, #32]	; (2104 <NWK_Init+0x54>)
    20e4:	4798      	blx	r3
#ifdef NWK_ENABLE_MULTICAST
	nwkGroupInit();
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
    20e6:	4b08      	ldr	r3, [pc, #32]	; (2108 <NWK_Init+0x58>)
    20e8:	4798      	blx	r3
#endif
}
    20ea:	bd08      	pop	{r3, pc}
    20ec:	20000dac 	.word	0x20000dac
    20f0:	00003471 	.word	0x00003471
    20f4:	00002cd1 	.word	0x00002cd1
    20f8:	00002379 	.word	0x00002379
    20fc:	000021f5 	.word	0x000021f5
    2100:	00002479 	.word	0x00002479
    2104:	0000313d 	.word	0x0000313d
    2108:	000029f5 	.word	0x000029f5

0000210c <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    210c:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    210e:	4b02      	ldr	r3, [pc, #8]	; (2118 <NWK_SetAddr+0xc>)
    2110:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    2112:	4b02      	ldr	r3, [pc, #8]	; (211c <NWK_SetAddr+0x10>)
    2114:	4798      	blx	r3
}
    2116:	bd08      	pop	{r3, pc}
    2118:	20000dac 	.word	0x20000dac
    211c:	000038a5 	.word	0x000038a5

00002120 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    2120:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    2122:	4b02      	ldr	r3, [pc, #8]	; (212c <NWK_SetPanId+0xc>)
    2124:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    2126:	4b02      	ldr	r3, [pc, #8]	; (2130 <NWK_SetPanId+0x10>)
    2128:	4798      	blx	r3
}
    212a:	bd08      	pop	{r3, pc}
    212c:	20000dac 	.word	0x20000dac
    2130:	00003885 	.word	0x00003885

00002134 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    2134:	3002      	adds	r0, #2
    2136:	0080      	lsls	r0, r0, #2
    2138:	4b01      	ldr	r3, [pc, #4]	; (2140 <NWK_OpenEndpoint+0xc>)
    213a:	50c1      	str	r1, [r0, r3]
}
    213c:	4770      	bx	lr
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	20000dac 	.word	0x20000dac

00002144 <NWK_Busy>:
*  @brief Checks if network layer is ready for sleep
*  @return @c true if network layer is ready for sleep or @c false otherwise
*****************************************************************************/
bool NWK_Busy(void)
{
	return nwkIb.lock > 0;
    2144:	2358      	movs	r3, #88	; 0x58
    2146:	4a03      	ldr	r2, [pc, #12]	; (2154 <NWK_Busy+0x10>)
    2148:	5ad0      	ldrh	r0, [r2, r3]
    214a:	1e43      	subs	r3, r0, #1
    214c:	4198      	sbcs	r0, r3
    214e:	b2c0      	uxtb	r0, r0
}
    2150:	4770      	bx	lr
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	20000dac 	.word	0x20000dac

00002158 <NWK_Lock>:
/*************************************************************************//**
*  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
	nwkIb.lock++;
    2158:	4a02      	ldr	r2, [pc, #8]	; (2164 <NWK_Lock+0xc>)
    215a:	2358      	movs	r3, #88	; 0x58
    215c:	5ad1      	ldrh	r1, [r2, r3]
    215e:	3101      	adds	r1, #1
    2160:	52d1      	strh	r1, [r2, r3]
}
    2162:	4770      	bx	lr
    2164:	20000dac 	.word	0x20000dac

00002168 <NWK_Unlock>:
/*************************************************************************//**
*  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
	nwkIb.lock--;
    2168:	4a02      	ldr	r2, [pc, #8]	; (2174 <NWK_Unlock+0xc>)
    216a:	2358      	movs	r3, #88	; 0x58
    216c:	5ad1      	ldrh	r1, [r2, r3]
    216e:	3901      	subs	r1, #1
    2170:	52d1      	strh	r1, [r2, r3]
}
    2172:	4770      	bx	lr
    2174:	20000dac 	.word	0x20000dac

00002178 <NWK_SleepReq>:

/*************************************************************************//**
*  @brief Puts network layer to a sleeping state
*****************************************************************************/
void NWK_SleepReq(void)
{
    2178:	b508      	push	{r3, lr}
	PHY_Sleep();
    217a:	4b01      	ldr	r3, [pc, #4]	; (2180 <NWK_SleepReq+0x8>)
    217c:	4798      	blx	r3
}
    217e:	bd08      	pop	{r3, pc}
    2180:	000038d1 	.word	0x000038d1

00002184 <NWK_WakeupReq>:

/*************************************************************************//**
*  @brief Puts network layer to an active state
*****************************************************************************/
void NWK_WakeupReq(void)
{
    2184:	b508      	push	{r3, lr}
	PHY_Wakeup();
    2186:	4b01      	ldr	r3, [pc, #4]	; (218c <NWK_WakeupReq+0x8>)
    2188:	4798      	blx	r3
}
    218a:	bd08      	pop	{r3, pc}
    218c:	000038f5 	.word	0x000038f5

00002190 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    2190:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    2192:	4b04      	ldr	r3, [pc, #16]	; (21a4 <NWK_TaskHandler+0x14>)
    2194:	4798      	blx	r3
	nwkTxTaskHandler();
    2196:	4b04      	ldr	r3, [pc, #16]	; (21a8 <NWK_TaskHandler+0x18>)
    2198:	4798      	blx	r3
	nwkDataReqTaskHandler();
    219a:	4b04      	ldr	r3, [pc, #16]	; (21ac <NWK_TaskHandler+0x1c>)
    219c:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    219e:	4b04      	ldr	r3, [pc, #16]	; (21b0 <NWK_TaskHandler+0x20>)
    21a0:	4798      	blx	r3
#endif
}
    21a2:	bd08      	pop	{r3, pc}
    21a4:	00002d6d 	.word	0x00002d6d
    21a8:	00003681 	.word	0x00003681
    21ac:	00002235 	.word	0x00002235
    21b0:	00003231 	.word	0x00003231

000021b4 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    21b4:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    21b6:	4b0d      	ldr	r3, [pc, #52]	; (21ec <nwkDataReqTxConf+0x38>)
    21b8:	681b      	ldr	r3, [r3, #0]
    21ba:	2b00      	cmp	r3, #0
    21bc:	d012      	beq.n	21e4 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    21be:	685a      	ldr	r2, [r3, #4]
    21c0:	4282      	cmp	r2, r0
    21c2:	d10c      	bne.n	21de <nwkDataReqTxConf+0x2a>
    21c4:	e002      	b.n	21cc <nwkDataReqTxConf+0x18>
    21c6:	685a      	ldr	r2, [r3, #4]
    21c8:	4282      	cmp	r2, r0
    21ca:	d108      	bne.n	21de <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    21cc:	2285      	movs	r2, #133	; 0x85
    21ce:	5c82      	ldrb	r2, [r0, r2]
    21d0:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    21d2:	2288      	movs	r2, #136	; 0x88
    21d4:	5c82      	ldrb	r2, [r0, r2]
    21d6:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    21d8:	2202      	movs	r2, #2
    21da:	721a      	strb	r2, [r3, #8]
			break;
    21dc:	e002      	b.n	21e4 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d1f0      	bne.n	21c6 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    21e4:	4b02      	ldr	r3, [pc, #8]	; (21f0 <nwkDataReqTxConf+0x3c>)
    21e6:	4798      	blx	r3
}
    21e8:	bd08      	pop	{r3, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	200001f0 	.word	0x200001f0
    21f0:	00002405 	.word	0x00002405

000021f4 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    21f4:	2200      	movs	r2, #0
    21f6:	4b01      	ldr	r3, [pc, #4]	; (21fc <nwkDataReqInit+0x8>)
    21f8:	601a      	str	r2, [r3, #0]
}
    21fa:	4770      	bx	lr
    21fc:	200001f0 	.word	0x200001f0

00002200 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    2200:	2300      	movs	r3, #0
    2202:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2204:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    2206:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    2208:	4a08      	ldr	r2, [pc, #32]	; (222c <NWK_DataReq+0x2c>)
    220a:	2358      	movs	r3, #88	; 0x58
    220c:	5ad1      	ldrh	r1, [r2, r3]
    220e:	3101      	adds	r1, #1
    2210:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    2212:	4b07      	ldr	r3, [pc, #28]	; (2230 <NWK_DataReq+0x30>)
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	2b00      	cmp	r3, #0
    2218:	d103      	bne.n	2222 <NWK_DataReq+0x22>
		req->next = NULL;
    221a:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    221c:	4b04      	ldr	r3, [pc, #16]	; (2230 <NWK_DataReq+0x30>)
    221e:	6018      	str	r0, [r3, #0]
    2220:	e002      	b.n	2228 <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    2222:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2224:	4b02      	ldr	r3, [pc, #8]	; (2230 <NWK_DataReq+0x30>)
    2226:	6018      	str	r0, [r3, #0]
	}
}
    2228:	4770      	bx	lr
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	20000dac 	.word	0x20000dac
    2230:	200001f0 	.word	0x200001f0

00002234 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2234:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2236:	4b4a      	ldr	r3, [pc, #296]	; (2360 <nwkDataReqTaskHandler+0x12c>)
    2238:	681a      	ldr	r2, [r3, #0]
    223a:	2a00      	cmp	r2, #0
    223c:	d100      	bne.n	2240 <nwkDataReqTaskHandler+0xc>
    223e:	e08d      	b.n	235c <nwkDataReqTaskHandler+0x128>
    2240:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    2242:	7a23      	ldrb	r3, [r4, #8]
    2244:	2b00      	cmp	r3, #0
    2246:	d002      	beq.n	224e <nwkDataReqTaskHandler+0x1a>
    2248:	2b02      	cmp	r3, #2
    224a:	d06d      	beq.n	2328 <nwkDataReqTaskHandler+0xf4>
    224c:	e082      	b.n	2354 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    224e:	4b45      	ldr	r3, [pc, #276]	; (2364 <nwkDataReqTaskHandler+0x130>)
    2250:	4798      	blx	r3
    2252:	1e05      	subs	r5, r0, #0
    2254:	d103      	bne.n	225e <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2256:	2302      	movs	r3, #2
    2258:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    225a:	7723      	strb	r3, [r4, #28]
    225c:	e07e      	b.n	235c <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    225e:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    2260:	2201      	movs	r2, #1
    2262:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    2264:	4b40      	ldr	r3, [pc, #256]	; (2368 <nwkDataReqTaskHandler+0x134>)
    2266:	2189      	movs	r1, #137	; 0x89
    2268:	5443      	strb	r3, [r0, r1]
    226a:	0a18      	lsrs	r0, r3, #8
    226c:	218a      	movs	r1, #138	; 0x8a
    226e:	5468      	strb	r0, [r5, r1]
    2270:	0c18      	lsrs	r0, r3, #16
    2272:	218b      	movs	r1, #139	; 0x8b
    2274:	5468      	strb	r0, [r5, r1]
    2276:	0e1b      	lsrs	r3, r3, #24
    2278:	218c      	movs	r1, #140	; 0x8c
    227a:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    227c:	7ba0      	ldrb	r0, [r4, #14]
    227e:	0880      	lsrs	r0, r0, #2
    2280:	2301      	movs	r3, #1
    2282:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    2284:	2188      	movs	r1, #136	; 0x88
    2286:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    2288:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    228a:	4019      	ands	r1, r3
    228c:	7ae8      	ldrb	r0, [r5, #11]
    228e:	4390      	bics	r0, r2
    2290:	1c02      	adds	r2, r0, #0
    2292:	430a      	orrs	r2, r1
    2294:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    2296:	7ba1      	ldrb	r1, [r4, #14]
    2298:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    229a:	4019      	ands	r1, r3
    229c:	0089      	lsls	r1, r1, #2
    229e:	b2d2      	uxtb	r2, r2
    22a0:	2004      	movs	r0, #4
    22a2:	4382      	bics	r2, r0
    22a4:	430a      	orrs	r2, r1
    22a6:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    22a8:	7ba2      	ldrb	r2, [r4, #14]
    22aa:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    22ac:	4013      	ands	r3, r2
    22ae:	005a      	lsls	r2, r3, #1
    22b0:	7aeb      	ldrb	r3, [r5, #11]
    22b2:	2102      	movs	r1, #2
    22b4:	438b      	bics	r3, r1
    22b6:	4313      	orrs	r3, r2
    22b8:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    22ba:	4b2c      	ldr	r3, [pc, #176]	; (236c <nwkDataReqTaskHandler+0x138>)
    22bc:	791a      	ldrb	r2, [r3, #4]
    22be:	3201      	adds	r2, #1
    22c0:	b2d2      	uxtb	r2, r2
    22c2:	711a      	strb	r2, [r3, #4]
    22c4:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    22c6:	781a      	ldrb	r2, [r3, #0]
    22c8:	736a      	strb	r2, [r5, #13]
    22ca:	785b      	ldrb	r3, [r3, #1]
    22cc:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    22ce:	8963      	ldrh	r3, [r4, #10]
    22d0:	7aa2      	ldrb	r2, [r4, #10]
    22d2:	73ea      	strb	r2, [r5, #15]
    22d4:	0a1b      	lsrs	r3, r3, #8
    22d6:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    22d8:	7b61      	ldrb	r1, [r4, #13]
    22da:	230f      	movs	r3, #15
    22dc:	4019      	ands	r1, r3
    22de:	7c6a      	ldrb	r2, [r5, #17]
    22e0:	200f      	movs	r0, #15
    22e2:	4382      	bics	r2, r0
    22e4:	430a      	orrs	r2, r1
    22e6:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    22e8:	7b22      	ldrb	r2, [r4, #12]
    22ea:	0112      	lsls	r2, r2, #4
    22ec:	7c69      	ldrb	r1, [r5, #17]
    22ee:	400b      	ands	r3, r1
    22f0:	4313      	orrs	r3, r2
    22f2:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    22f4:	2381      	movs	r3, #129	; 0x81
    22f6:	5ceb      	ldrb	r3, [r5, r3]
    22f8:	2282      	movs	r2, #130	; 0x82
    22fa:	5ca8      	ldrb	r0, [r5, r2]
    22fc:	0200      	lsls	r0, r0, #8
    22fe:	4318      	orrs	r0, r3
    2300:	2383      	movs	r3, #131	; 0x83
    2302:	5ceb      	ldrb	r3, [r5, r3]
    2304:	041b      	lsls	r3, r3, #16
    2306:	4318      	orrs	r0, r3
    2308:	2384      	movs	r3, #132	; 0x84
    230a:	5ceb      	ldrb	r3, [r5, r3]
    230c:	061b      	lsls	r3, r3, #24
    230e:	4318      	orrs	r0, r3
    2310:	7d22      	ldrb	r2, [r4, #20]
    2312:	6921      	ldr	r1, [r4, #16]
    2314:	4b16      	ldr	r3, [pc, #88]	; (2370 <nwkDataReqTaskHandler+0x13c>)
    2316:	4798      	blx	r3
	frame->size += req->size;
    2318:	7d22      	ldrb	r2, [r4, #20]
    231a:	786b      	ldrb	r3, [r5, #1]
    231c:	18d3      	adds	r3, r2, r3
    231e:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    2320:	1c28      	adds	r0, r5, #0
    2322:	4b14      	ldr	r3, [pc, #80]	; (2374 <nwkDataReqTaskHandler+0x140>)
    2324:	4798      	blx	r3
    2326:	e019      	b.n	235c <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    2328:	4294      	cmp	r4, r2
    232a:	d103      	bne.n	2334 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    232c:	4b0c      	ldr	r3, [pc, #48]	; (2360 <nwkDataReqTaskHandler+0x12c>)
    232e:	6822      	ldr	r2, [r4, #0]
    2330:	601a      	str	r2, [r3, #0]
    2332:	e006      	b.n	2342 <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2334:	6813      	ldr	r3, [r2, #0]
    2336:	429c      	cmp	r4, r3
    2338:	d001      	beq.n	233e <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    233a:	1c1a      	adds	r2, r3, #0
    233c:	e7fa      	b.n	2334 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    233e:	6823      	ldr	r3, [r4, #0]
    2340:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    2342:	4a0a      	ldr	r2, [pc, #40]	; (236c <nwkDataReqTaskHandler+0x138>)
    2344:	2358      	movs	r3, #88	; 0x58
    2346:	5ad1      	ldrh	r1, [r2, r3]
    2348:	3901      	subs	r1, #1
    234a:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    234c:	69a3      	ldr	r3, [r4, #24]
    234e:	1c20      	adds	r0, r4, #0
    2350:	4798      	blx	r3
    2352:	e003      	b.n	235c <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2354:	6824      	ldr	r4, [r4, #0]
    2356:	2c00      	cmp	r4, #0
    2358:	d000      	beq.n	235c <nwkDataReqTaskHandler+0x128>
    235a:	e772      	b.n	2242 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    235c:	bd38      	pop	{r3, r4, r5, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	200001f0 	.word	0x200001f0
    2364:	00002395 	.word	0x00002395
    2368:	000021b5 	.word	0x000021b5
    236c:	20000dac 	.word	0x20000dac
    2370:	00004dfd 	.word	0x00004dfd
    2374:	000034a5 	.word	0x000034a5

00002378 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    2378:	4b04      	ldr	r3, [pc, #16]	; (238c <nwkFrameInit+0x14>)
    237a:	4a05      	ldr	r2, [pc, #20]	; (2390 <nwkFrameInit+0x18>)
    237c:	1899      	adds	r1, r3, r2
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    237e:	2200      	movs	r2, #0
    2380:	701a      	strb	r2, [r3, #0]
    2382:	338d      	adds	r3, #141	; 0x8d
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    2384:	428b      	cmp	r3, r1
    2386:	d1fb      	bne.n	2380 <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    2388:	4770      	bx	lr
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	200001f4 	.word	0x200001f4
    2390:	00000582 	.word	0x00000582

00002394 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2394:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2396:	4b18      	ldr	r3, [pc, #96]	; (23f8 <nwkFrameAlloc+0x64>)
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	2b00      	cmp	r3, #0
    239c:	d007      	beq.n	23ae <nwkFrameAlloc+0x1a>
    239e:	4a16      	ldr	r2, [pc, #88]	; (23f8 <nwkFrameAlloc+0x64>)
    23a0:	328d      	adds	r2, #141	; 0x8d
    23a2:	2301      	movs	r3, #1
    23a4:	1c18      	adds	r0, r3, #0
    23a6:	7811      	ldrb	r1, [r2, #0]
    23a8:	2900      	cmp	r1, #0
    23aa:	d11d      	bne.n	23e8 <nwkFrameAlloc+0x54>
    23ac:	e000      	b.n	23b0 <nwkFrameAlloc+0x1c>
    23ae:	2000      	movs	r0, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    23b0:	4e11      	ldr	r6, [pc, #68]	; (23f8 <nwkFrameAlloc+0x64>)
    23b2:	258d      	movs	r5, #141	; 0x8d
    23b4:	4345      	muls	r5, r0
    23b6:	1974      	adds	r4, r6, r5
    23b8:	1c20      	adds	r0, r4, #0
    23ba:	2100      	movs	r1, #0
    23bc:	228d      	movs	r2, #141	; 0x8d
    23be:	4b0f      	ldr	r3, [pc, #60]	; (23fc <nwkFrameAlloc+0x68>)
    23c0:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    23c2:	2310      	movs	r3, #16
    23c4:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    23c6:	1c23      	adds	r3, r4, #0
    23c8:	3380      	adds	r3, #128	; 0x80
    23ca:	1c20      	adds	r0, r4, #0
    23cc:	3012      	adds	r0, #18
    23ce:	7058      	strb	r0, [r3, #1]
    23d0:	0a02      	lsrs	r2, r0, #8
    23d2:	709a      	strb	r2, [r3, #2]
    23d4:	0c02      	lsrs	r2, r0, #16
    23d6:	70da      	strb	r2, [r3, #3]
    23d8:	0e00      	lsrs	r0, r0, #24
    23da:	7118      	strb	r0, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    23dc:	4a08      	ldr	r2, [pc, #32]	; (2400 <nwkFrameAlloc+0x6c>)
    23de:	2358      	movs	r3, #88	; 0x58
    23e0:	5ad1      	ldrh	r1, [r2, r3]
    23e2:	3101      	adds	r1, #1
    23e4:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
    23e6:	e004      	b.n	23f2 <nwkFrameAlloc+0x5e>
    23e8:	3301      	adds	r3, #1
    23ea:	328d      	adds	r2, #141	; 0x8d
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    23ec:	2b0a      	cmp	r3, #10
    23ee:	d1d9      	bne.n	23a4 <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    23f0:	2400      	movs	r4, #0
}
    23f2:	1c20      	adds	r0, r4, #0
    23f4:	bd70      	pop	{r4, r5, r6, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	200001f4 	.word	0x200001f4
    23fc:	00004e0f 	.word	0x00004e0f
    2400:	20000dac 	.word	0x20000dac

00002404 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2404:	2300      	movs	r3, #0
    2406:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2408:	4a02      	ldr	r2, [pc, #8]	; (2414 <nwkFrameFree+0x10>)
    240a:	2358      	movs	r3, #88	; 0x58
    240c:	5ad1      	ldrh	r1, [r2, r3]
    240e:	3901      	subs	r1, #1
    2410:	52d1      	strh	r1, [r2, r3]
}
    2412:	4770      	bx	lr
    2414:	20000dac 	.word	0x20000dac

00002418 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2418:	2800      	cmp	r0, #0
    241a:	d006      	beq.n	242a <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    241c:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    241e:	4b0c      	ldr	r3, [pc, #48]	; (2450 <nwkFrameNext+0x38>)
    2420:	4a0c      	ldr	r2, [pc, #48]	; (2454 <nwkFrameNext+0x3c>)
    2422:	189b      	adds	r3, r3, r2
    2424:	4298      	cmp	r0, r3
    2426:	d301      	bcc.n	242c <nwkFrameNext+0x14>
    2428:	e00f      	b.n	244a <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    242a:	4809      	ldr	r0, [pc, #36]	; (2450 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    242c:	7803      	ldrb	r3, [r0, #0]
    242e:	2b00      	cmp	r3, #0
    2430:	d10c      	bne.n	244c <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2432:	4a07      	ldr	r2, [pc, #28]	; (2450 <nwkFrameNext+0x38>)
    2434:	4b07      	ldr	r3, [pc, #28]	; (2454 <nwkFrameNext+0x3c>)
    2436:	18d2      	adds	r2, r2, r3
    2438:	e002      	b.n	2440 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    243a:	7803      	ldrb	r3, [r0, #0]
    243c:	2b00      	cmp	r3, #0
    243e:	d105      	bne.n	244c <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2440:	308d      	adds	r0, #141	; 0x8d
    2442:	4290      	cmp	r0, r2
    2444:	d3f9      	bcc.n	243a <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2446:	2000      	movs	r0, #0
    2448:	e000      	b.n	244c <nwkFrameNext+0x34>
    244a:	2000      	movs	r0, #0
}
    244c:	4770      	bx	lr
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	200001f4 	.word	0x200001f4
    2454:	00000582 	.word	0x00000582

00002458 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2458:	2200      	movs	r2, #0
    245a:	2385      	movs	r3, #133	; 0x85
    245c:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    245e:	4b05      	ldr	r3, [pc, #20]	; (2474 <nwkFrameCommandInit+0x1c>)
    2460:	791a      	ldrb	r2, [r3, #4]
    2462:	3201      	adds	r2, #1
    2464:	b2d2      	uxtb	r2, r2
    2466:	711a      	strb	r2, [r3, #4]
    2468:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    246a:	781a      	ldrb	r2, [r3, #0]
    246c:	7342      	strb	r2, [r0, #13]
    246e:	785b      	ldrb	r3, [r3, #1]
    2470:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    2472:	4770      	bx	lr
    2474:	20000dac 	.word	0x20000dac

00002478 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2478:	b5f0      	push	{r4, r5, r6, r7, lr}
    247a:	4a09      	ldr	r2, [pc, #36]	; (24a0 <nwkRouteInit+0x28>)
    247c:	3202      	adds	r2, #2
    247e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2480:	2701      	movs	r7, #1
    2482:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2484:	4806      	ldr	r0, [pc, #24]	; (24a0 <nwkRouteInit+0x28>)
    2486:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2488:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    248a:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    248c:	00d9      	lsls	r1, r3, #3
    248e:	5c0c      	ldrb	r4, [r1, r0]
    2490:	43b4      	bics	r4, r6
    2492:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    2494:	7115      	strb	r5, [r2, #4]
    2496:	3301      	adds	r3, #1
    2498:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    249a:	2b64      	cmp	r3, #100	; 0x64
    249c:	d1f5      	bne.n	248a <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24a0:	20000778 	.word	0x20000778

000024a4 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    24a4:	b570      	push	{r4, r5, r6, lr}
    24a6:	4a0b      	ldr	r2, [pc, #44]	; (24d4 <NWK_RouteFindEntry+0x30>)
    24a8:	3202      	adds	r2, #2
    24aa:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    24ac:	4e09      	ldr	r6, [pc, #36]	; (24d4 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    24ae:	8814      	ldrh	r4, [r2, #0]
    24b0:	4284      	cmp	r4, r0
    24b2:	d109      	bne.n	24c8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    24b4:	00dc      	lsls	r4, r3, #3
    24b6:	5da4      	ldrb	r4, [r4, r6]
    24b8:	07a4      	lsls	r4, r4, #30
    24ba:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    24bc:	428c      	cmp	r4, r1
    24be:	d103      	bne.n	24c8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    24c0:	00dd      	lsls	r5, r3, #3
    24c2:	4804      	ldr	r0, [pc, #16]	; (24d4 <NWK_RouteFindEntry+0x30>)
    24c4:	1940      	adds	r0, r0, r5
    24c6:	e004      	b.n	24d2 <NWK_RouteFindEntry+0x2e>
    24c8:	3301      	adds	r3, #1
    24ca:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    24cc:	2b64      	cmp	r3, #100	; 0x64
    24ce:	d1ee      	bne.n	24ae <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    24d0:	2000      	movs	r0, #0
}
    24d2:	bd70      	pop	{r4, r5, r6, pc}
    24d4:	20000778 	.word	0x20000778

000024d8 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    24d8:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    24da:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    24dc:	4810      	ldr	r0, [pc, #64]	; (2520 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    24de:	24c8      	movs	r4, #200	; 0xc8
    24e0:	00a4      	lsls	r4, r4, #2
    24e2:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    24e4:	7803      	ldrb	r3, [r0, #0]
    24e6:	07dc      	lsls	r4, r3, #31
    24e8:	d40b      	bmi.n	2502 <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    24ea:	7983      	ldrb	r3, [r0, #6]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d00c      	beq.n	250a <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    24f0:	2a00      	cmp	r2, #0
    24f2:	d003      	beq.n	24fc <NWK_RouteNewEntry+0x24>
    24f4:	7994      	ldrb	r4, [r2, #6]
    24f6:	429c      	cmp	r4, r3
    24f8:	d802      	bhi.n	2500 <NWK_RouteNewEntry+0x28>
    24fa:	e002      	b.n	2502 <NWK_RouteNewEntry+0x2a>
    24fc:	1c02      	adds	r2, r0, #0
    24fe:	e000      	b.n	2502 <NWK_RouteNewEntry+0x2a>
    2500:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2502:	3008      	adds	r0, #8
    2504:	4288      	cmp	r0, r1
    2506:	d1ed      	bne.n	24e4 <NWK_RouteNewEntry+0xc>
    2508:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    250a:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    250c:	2202      	movs	r2, #2
    250e:	4393      	bics	r3, r2
    2510:	220f      	movs	r2, #15
    2512:	4013      	ands	r3, r2
    2514:	2230      	movs	r2, #48	; 0x30
    2516:	4313      	orrs	r3, r2
    2518:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    251a:	2380      	movs	r3, #128	; 0x80
    251c:	7183      	strb	r3, [r0, #6]

	return entry;
}
    251e:	bd10      	pop	{r4, pc}
    2520:	20000778 	.word	0x20000778

00002524 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2524:	7803      	ldrb	r3, [r0, #0]
    2526:	07da      	lsls	r2, r3, #31
    2528:	d404      	bmi.n	2534 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    252a:	2301      	movs	r3, #1
    252c:	425b      	negs	r3, r3
    252e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2530:	2300      	movs	r3, #0
    2532:	7183      	strb	r3, [r0, #6]
}
    2534:	4770      	bx	lr
    2536:	46c0      	nop			; (mov r8, r8)

00002538 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2538:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    253a:	4b04      	ldr	r3, [pc, #16]	; (254c <NWK_RouteNextHop+0x14>)
    253c:	4798      	blx	r3
	if (entry) {
    253e:	2800      	cmp	r0, #0
    2540:	d001      	beq.n	2546 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    2542:	8880      	ldrh	r0, [r0, #4]
    2544:	e000      	b.n	2548 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    2546:	4802      	ldr	r0, [pc, #8]	; (2550 <NWK_RouteNextHop+0x18>)
}
    2548:	bd08      	pop	{r3, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	000024a5 	.word	0x000024a5
    2550:	0000ffff 	.word	0x0000ffff

00002554 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    2554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2556:	1c06      	adds	r6, r0, #0
    2558:	1c0d      	adds	r5, r1, #0
    255a:	1c14      	adds	r4, r2, #0
    255c:	1c1f      	adds	r7, r3, #0
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    255e:	4b0c      	ldr	r3, [pc, #48]	; (2590 <nwkRouteUpdateEntry+0x3c>)
    2560:	4798      	blx	r3

	if (NULL == entry) {
    2562:	2800      	cmp	r0, #0
    2564:	d101      	bne.n	256a <nwkRouteUpdateEntry+0x16>
		entry = NWK_RouteNewEntry();
    2566:	4b0b      	ldr	r3, [pc, #44]	; (2594 <nwkRouteUpdateEntry+0x40>)
    2568:	4798      	blx	r3
	}

	entry->dstAddr = dst;
    256a:	8046      	strh	r6, [r0, #2]
	entry->nextHopAddr = nextHop;
    256c:	8084      	strh	r4, [r0, #4]
	entry->multicast = multicast;
    256e:	2301      	movs	r3, #1
    2570:	401d      	ands	r5, r3
    2572:	006b      	lsls	r3, r5, #1
    2574:	7805      	ldrb	r5, [r0, #0]
    2576:	2202      	movs	r2, #2
    2578:	4395      	bics	r5, r2
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    257a:	431d      	orrs	r5, r3
    257c:	230f      	movs	r3, #15
    257e:	401d      	ands	r5, r3
    2580:	2330      	movs	r3, #48	; 0x30
    2582:	431d      	orrs	r5, r3
    2584:	7005      	strb	r5, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2586:	2380      	movs	r3, #128	; 0x80
    2588:	7183      	strb	r3, [r0, #6]
	entry->lqi = lqi;
    258a:	71c7      	strb	r7, [r0, #7]
}
    258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	000024a5 	.word	0x000024a5
    2594:	000024d9 	.word	0x000024d9

00002598 <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2598:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    259a:	4b03      	ldr	r3, [pc, #12]	; (25a8 <nwkRouteRemove+0x10>)
    259c:	4798      	blx	r3
	if (entry) {
    259e:	2800      	cmp	r0, #0
    25a0:	d001      	beq.n	25a6 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    25a2:	4b02      	ldr	r3, [pc, #8]	; (25ac <nwkRouteRemove+0x14>)
    25a4:	4798      	blx	r3
	}
}
    25a6:	bd08      	pop	{r3, pc}
    25a8:	000024a5 	.word	0x000024a5
    25ac:	00002525 	.word	0x00002525

000025b0 <nwkRouteFrameReceived>:

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    25b0:	4770      	bx	lr
    25b2:	46c0      	nop			; (mov r8, r8)

000025b4 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    25b4:	b510      	push	{r4, lr}
    25b6:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    25b8:	7bc3      	ldrb	r3, [r0, #15]
    25ba:	7c00      	ldrb	r0, [r0, #16]
    25bc:	0200      	lsls	r0, r0, #8
    25be:	4318      	orrs	r0, r3
    25c0:	4b1b      	ldr	r3, [pc, #108]	; (2630 <nwkRouteFrameSent+0x7c>)
    25c2:	4298      	cmp	r0, r3
    25c4:	d032      	beq.n	262c <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    25c6:	7ae1      	ldrb	r1, [r4, #11]
    25c8:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    25ca:	0fc9      	lsrs	r1, r1, #31
    25cc:	4b19      	ldr	r3, [pc, #100]	; (2634 <nwkRouteFrameSent+0x80>)
    25ce:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    25d0:	2800      	cmp	r0, #0
    25d2:	d02b      	beq.n	262c <nwkRouteFrameSent+0x78>
    25d4:	7803      	ldrb	r3, [r0, #0]
    25d6:	07da      	lsls	r2, r3, #31
    25d8:	d428      	bmi.n	262c <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    25da:	2385      	movs	r3, #133	; 0x85
    25dc:	5ce3      	ldrb	r3, [r4, r3]
    25de:	2b00      	cmp	r3, #0
    25e0:	d117      	bne.n	2612 <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    25e2:	7803      	ldrb	r3, [r0, #0]
    25e4:	220f      	movs	r2, #15
    25e6:	4013      	ands	r3, r2
    25e8:	2230      	movs	r2, #48	; 0x30
    25ea:	4313      	orrs	r3, r2
    25ec:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    25ee:	7983      	ldrb	r3, [r0, #6]
    25f0:	3301      	adds	r3, #1
    25f2:	b2db      	uxtb	r3, r3
    25f4:	7183      	strb	r3, [r0, #6]
    25f6:	2bff      	cmp	r3, #255	; 0xff
    25f8:	d118      	bne.n	262c <nwkRouteFrameSent+0x78>
    25fa:	490f      	ldr	r1, [pc, #60]	; (2638 <nwkRouteFrameSent+0x84>)
    25fc:	1d8b      	adds	r3, r1, #6
    25fe:	4a0f      	ldr	r2, [pc, #60]	; (263c <nwkRouteFrameSent+0x88>)
    2600:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    2602:	781a      	ldrb	r2, [r3, #0]
    2604:	0852      	lsrs	r2, r2, #1
    2606:	3201      	adds	r2, #1
    2608:	701a      	strb	r2, [r3, #0]
    260a:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    260c:	428b      	cmp	r3, r1
    260e:	d1f8      	bne.n	2602 <nwkRouteFrameSent+0x4e>
    2610:	e00c      	b.n	262c <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    2612:	7802      	ldrb	r2, [r0, #0]
    2614:	0913      	lsrs	r3, r2, #4
    2616:	330f      	adds	r3, #15
    2618:	210f      	movs	r1, #15
    261a:	400b      	ands	r3, r1
    261c:	011c      	lsls	r4, r3, #4
    261e:	400a      	ands	r2, r1
    2620:	4322      	orrs	r2, r4
    2622:	7002      	strb	r2, [r0, #0]
    2624:	2b00      	cmp	r3, #0
    2626:	d101      	bne.n	262c <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    2628:	4b05      	ldr	r3, [pc, #20]	; (2640 <nwkRouteFrameSent+0x8c>)
    262a:	4798      	blx	r3
		}
	}
}
    262c:	bd10      	pop	{r4, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	0000ffff 	.word	0x0000ffff
    2634:	000024a5 	.word	0x000024a5
    2638:	20000778 	.word	0x20000778
    263c:	00000326 	.word	0x00000326
    2640:	00002525 	.word	0x00002525

00002644 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    2644:	b538      	push	{r3, r4, r5, lr}
    2646:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    2648:	7bc2      	ldrb	r2, [r0, #15]
    264a:	7c00      	ldrb	r0, [r0, #16]
    264c:	0200      	lsls	r0, r0, #8
    264e:	4310      	orrs	r0, r2
    2650:	4b0e      	ldr	r3, [pc, #56]	; (268c <nwkRoutePrepareTx+0x48>)
    2652:	4298      	cmp	r0, r3
    2654:	d104      	bne.n	2660 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    2656:	2301      	movs	r3, #1
    2658:	425b      	negs	r3, r3
    265a:	71e3      	strb	r3, [r4, #7]
    265c:	7223      	strb	r3, [r4, #8]
    265e:	e014      	b.n	268a <nwkRoutePrepareTx+0x46>
	} else if (header->nwkFcf.linkLocal) {
    2660:	7ae3      	ldrb	r3, [r4, #11]
    2662:	075a      	lsls	r2, r3, #29
    2664:	d503      	bpl.n	266e <nwkRoutePrepareTx+0x2a>
		header->macDstAddr = header->nwkDstAddr;
    2666:	71e0      	strb	r0, [r4, #7]
    2668:	0a00      	lsrs	r0, r0, #8
    266a:	7220      	strb	r0, [r4, #8]
    266c:	e00d      	b.n	268a <nwkRoutePrepareTx+0x46>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    266e:	7ae1      	ldrb	r1, [r4, #11]
    2670:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    2672:	0fc9      	lsrs	r1, r1, #31
    2674:	4b06      	ldr	r3, [pc, #24]	; (2690 <nwkRoutePrepareTx+0x4c>)
    2676:	4798      	blx	r3
    2678:	71e0      	strb	r0, [r4, #7]
    267a:	0a03      	lsrs	r3, r0, #8
    267c:	7223      	strb	r3, [r4, #8]
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    267e:	4b03      	ldr	r3, [pc, #12]	; (268c <nwkRoutePrepareTx+0x48>)
    2680:	4298      	cmp	r0, r3
    2682:	d102      	bne.n	268a <nwkRoutePrepareTx+0x46>
			nwkRouteDiscoveryRequest(frame);
    2684:	1c20      	adds	r0, r4, #0
    2686:	4b03      	ldr	r3, [pc, #12]	; (2694 <nwkRoutePrepareTx+0x50>)
    2688:	4798      	blx	r3
		}

  #endif
	}
}
    268a:	bd38      	pop	{r3, r4, r5, pc}
    268c:	0000ffff 	.word	0x0000ffff
    2690:	00002539 	.word	0x00002539
    2694:	00002a21 	.word	0x00002a21

00002698 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	4647      	mov	r7, r8
    269c:	b480      	push	{r7}
    269e:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    26a0:	7bc2      	ldrb	r2, [r0, #15]
    26a2:	7c06      	ldrb	r6, [r0, #16]
    26a4:	0236      	lsls	r6, r6, #8
    26a6:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    26a8:	7ac7      	ldrb	r7, [r0, #11]
    26aa:	073f      	lsls	r7, r7, #28
    26ac:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    26ae:	b2f9      	uxtb	r1, r7
    26b0:	1c30      	adds	r0, r6, #0
    26b2:	4b28      	ldr	r3, [pc, #160]	; (2754 <nwkRouteFrame+0xbc>)
    26b4:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    26b6:	4b28      	ldr	r3, [pc, #160]	; (2758 <nwkRouteFrame+0xc0>)
    26b8:	4298      	cmp	r0, r3
    26ba:	d00f      	beq.n	26dc <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    26bc:	2200      	movs	r2, #0
    26be:	2389      	movs	r3, #137	; 0x89
    26c0:	54e2      	strb	r2, [r4, r3]
    26c2:	238a      	movs	r3, #138	; 0x8a
    26c4:	54e2      	strb	r2, [r4, r3]
    26c6:	238b      	movs	r3, #139	; 0x8b
    26c8:	54e2      	strb	r2, [r4, r3]
    26ca:	238c      	movs	r3, #140	; 0x8c
    26cc:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    26ce:	2202      	movs	r2, #2
    26d0:	2388      	movs	r3, #136	; 0x88
    26d2:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    26d4:	1c20      	adds	r0, r4, #0
    26d6:	4b21      	ldr	r3, [pc, #132]	; (275c <nwkRouteFrame+0xc4>)
    26d8:	4798      	blx	r3
    26da:	e038      	b.n	274e <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    26dc:	7b62      	ldrb	r2, [r4, #13]
    26de:	7ba3      	ldrb	r3, [r4, #14]
    26e0:	021b      	lsls	r3, r3, #8
    26e2:	4313      	orrs	r3, r2
    26e4:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    26e6:	4b1e      	ldr	r3, [pc, #120]	; (2760 <nwkRouteFrame+0xc8>)
    26e8:	4798      	blx	r3
    26ea:	1e05      	subs	r5, r0, #0
    26ec:	d02c      	beq.n	2748 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    26ee:	4b1d      	ldr	r3, [pc, #116]	; (2764 <nwkRouteFrame+0xcc>)
    26f0:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    26f2:	786b      	ldrb	r3, [r5, #1]
    26f4:	3306      	adds	r3, #6
    26f6:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    26f8:	2200      	movs	r2, #0
    26fa:	2389      	movs	r3, #137	; 0x89
    26fc:	54ea      	strb	r2, [r5, r3]
    26fe:	238a      	movs	r3, #138	; 0x8a
    2700:	54ea      	strb	r2, [r5, r3]
    2702:	238b      	movs	r3, #139	; 0x8b
    2704:	54ea      	strb	r2, [r5, r3]
    2706:	238c      	movs	r3, #140	; 0x8c
    2708:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    270a:	21ff      	movs	r1, #255	; 0xff
    270c:	4643      	mov	r3, r8
    270e:	4019      	ands	r1, r3
    2710:	73e9      	strb	r1, [r5, #15]
    2712:	0a1a      	lsrs	r2, r3, #8
    2714:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    2716:	2381      	movs	r3, #129	; 0x81
    2718:	5ce8      	ldrb	r0, [r5, r3]
    271a:	2382      	movs	r3, #130	; 0x82
    271c:	5ceb      	ldrb	r3, [r5, r3]
    271e:	021b      	lsls	r3, r3, #8
    2720:	4303      	orrs	r3, r0
    2722:	2083      	movs	r0, #131	; 0x83
    2724:	5c28      	ldrb	r0, [r5, r0]
    2726:	0400      	lsls	r0, r0, #16
    2728:	4303      	orrs	r3, r0
    272a:	2084      	movs	r0, #132	; 0x84
    272c:	5c28      	ldrb	r0, [r5, r0]
    272e:	0600      	lsls	r0, r0, #24
    2730:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    2732:	2001      	movs	r0, #1
    2734:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    2736:	7059      	strb	r1, [r3, #1]
    2738:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    273a:	70de      	strb	r6, [r3, #3]
    273c:	0a36      	lsrs	r6, r6, #8
    273e:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    2740:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    2742:	1c28      	adds	r0, r5, #0
    2744:	4b05      	ldr	r3, [pc, #20]	; (275c <nwkRouteFrame+0xc4>)
    2746:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    2748:	1c20      	adds	r0, r4, #0
    274a:	4b07      	ldr	r3, [pc, #28]	; (2768 <nwkRouteFrame+0xd0>)
    274c:	4798      	blx	r3
	}
}
    274e:	bc04      	pop	{r2}
    2750:	4690      	mov	r8, r2
    2752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2754:	00002539 	.word	0x00002539
    2758:	0000ffff 	.word	0x0000ffff
    275c:	000034a5 	.word	0x000034a5
    2760:	00002395 	.word	0x00002395
    2764:	00002459 	.word	0x00002459
    2768:	00002405 	.word	0x00002405

0000276c <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    276c:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    276e:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2770:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2772:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2774:	2b06      	cmp	r3, #6
    2776:	d107      	bne.n	2788 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2778:	78d3      	ldrb	r3, [r2, #3]
    277a:	7910      	ldrb	r0, [r2, #4]
    277c:	0200      	lsls	r0, r0, #8
    277e:	4318      	orrs	r0, r3
    2780:	7951      	ldrb	r1, [r2, #5]
    2782:	4b02      	ldr	r3, [pc, #8]	; (278c <nwkRouteErrorReceived+0x20>)
    2784:	4798      	blx	r3

	return true;
    2786:	2001      	movs	r0, #1
}
    2788:	bd08      	pop	{r3, pc}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	00002599 	.word	0x00002599

00002790 <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    2790:	b5f0      	push	{r4, r5, r6, r7, lr}
    2792:	4b0d      	ldr	r3, [pc, #52]	; (27c8 <nwkRouteDiscoveryFindEntry+0x38>)
    2794:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    2796:	895d      	ldrh	r5, [r3, #10]
    2798:	2d00      	cmp	r5, #0
    279a:	d00e      	beq.n	27ba <nwkRouteDiscoveryFindEntry+0x2a>
    279c:	881d      	ldrh	r5, [r3, #0]
    279e:	4285      	cmp	r5, r0
    27a0:	d10b      	bne.n	27ba <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    27a2:	885d      	ldrh	r5, [r3, #2]
    27a4:	428d      	cmp	r5, r1
    27a6:	d108      	bne.n	27ba <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    27a8:	791d      	ldrb	r5, [r3, #4]
    27aa:	4295      	cmp	r5, r2
    27ac:	d105      	bne.n	27ba <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    27ae:	0063      	lsls	r3, r4, #1
    27b0:	191f      	adds	r7, r3, r4
    27b2:	00bf      	lsls	r7, r7, #2
    27b4:	4804      	ldr	r0, [pc, #16]	; (27c8 <nwkRouteDiscoveryFindEntry+0x38>)
    27b6:	19c0      	adds	r0, r0, r7
    27b8:	e004      	b.n	27c4 <nwkRouteDiscoveryFindEntry+0x34>
    27ba:	3401      	adds	r4, #1
    27bc:	330c      	adds	r3, #12
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    27be:	2c05      	cmp	r4, #5
    27c0:	d1e9      	bne.n	2796 <nwkRouteDiscoveryFindEntry+0x6>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    27c2:	2000      	movs	r0, #0
}
    27c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	20000aac 	.word	0x20000aac

000027cc <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    27cc:	b510      	push	{r4, lr}
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    27ce:	4b11      	ldr	r3, [pc, #68]	; (2814 <nwkRouteDiscoveryNewEntry+0x48>)
    27d0:	895b      	ldrh	r3, [r3, #10]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d007      	beq.n	27e6 <nwkRouteDiscoveryNewEntry+0x1a>
    27d6:	4a0f      	ldr	r2, [pc, #60]	; (2814 <nwkRouteDiscoveryNewEntry+0x48>)
    27d8:	3216      	adds	r2, #22
    27da:	2301      	movs	r3, #1
    27dc:	1c18      	adds	r0, r3, #0
    27de:	8811      	ldrh	r1, [r2, #0]
    27e0:	2900      	cmp	r1, #0
    27e2:	d110      	bne.n	2806 <nwkRouteDiscoveryNewEntry+0x3a>
    27e4:	e000      	b.n	27e8 <nwkRouteDiscoveryNewEntry+0x1c>
    27e6:	2000      	movs	r0, #0
			entry = &nwkRouteDiscoveryTable[i];
    27e8:	0044      	lsls	r4, r0, #1
    27ea:	1820      	adds	r0, r4, r0
    27ec:	0080      	lsls	r0, r0, #2
    27ee:	4c09      	ldr	r4, [pc, #36]	; (2814 <nwkRouteDiscoveryNewEntry+0x48>)
    27f0:	1824      	adds	r4, r4, r0
			break;
		}
	}

	if (entry) {
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    27f2:	2300      	movs	r3, #0
    27f4:	7223      	strb	r3, [r4, #8]
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    27f6:	7263      	strb	r3, [r4, #9]
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    27f8:	23fa      	movs	r3, #250	; 0xfa
    27fa:	009b      	lsls	r3, r3, #2
    27fc:	8163      	strh	r3, [r4, #10]
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    27fe:	4806      	ldr	r0, [pc, #24]	; (2818 <nwkRouteDiscoveryNewEntry+0x4c>)
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <nwkRouteDiscoveryNewEntry+0x50>)
    2802:	4798      	blx	r3
    2804:	e004      	b.n	2810 <nwkRouteDiscoveryNewEntry+0x44>
    2806:	3301      	adds	r3, #1
    2808:	320c      	adds	r2, #12
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    280a:	2b05      	cmp	r3, #5
    280c:	d1e6      	bne.n	27dc <nwkRouteDiscoveryNewEntry+0x10>

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    280e:	2400      	movs	r4, #0
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
	}

	return entry;
}
    2810:	1c20      	adds	r0, r4, #0
    2812:	bd10      	pop	{r4, pc}
    2814:	20000aac 	.word	0x20000aac
    2818:	20000a98 	.word	0x20000a98
    281c:	00003c19 	.word	0x00003c19

00002820 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    2820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2822:	465f      	mov	r7, fp
    2824:	4656      	mov	r6, sl
    2826:	464d      	mov	r5, r9
    2828:	4644      	mov	r4, r8
    282a:	b4f0      	push	{r4, r5, r6, r7}
    282c:	4683      	mov	fp, r0
    282e:	4b26      	ldr	r3, [pc, #152]	; (28c8 <nwkRouteDiscoveryTimerHandler+0xa8>)
    2830:	1c1c      	adds	r4, r3, #0
    2832:	340a      	adds	r4, #10
    2834:	1c1d      	adds	r5, r3, #0
    2836:	333c      	adds	r3, #60	; 0x3c
    2838:	4698      	mov	r8, r3
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    283a:	2700      	movs	r7, #0
    283c:	1c22      	adds	r2, r4, #0

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    283e:	8823      	ldrh	r3, [r4, #0]
    2840:	2b64      	cmp	r3, #100	; 0x64
    2842:	d903      	bls.n	284c <nwkRouteDiscoveryTimerHandler+0x2c>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    2844:	3b64      	subs	r3, #100	; 0x64
    2846:	8023      	strh	r3, [r4, #0]
			restart = true;
    2848:	2701      	movs	r7, #1
    284a:	e02d      	b.n	28a8 <nwkRouteDiscoveryTimerHandler+0x88>
		} else {
			entry->timeout = 0;
    284c:	2300      	movs	r3, #0
    284e:	8023      	strh	r3, [r4, #0]
    2850:	46aa      	mov	sl, r5

			if (entry->srcAddr == nwkIb.addr) {
    2852:	8829      	ldrh	r1, [r5, #0]
    2854:	481d      	ldr	r0, [pc, #116]	; (28cc <nwkRouteDiscoveryTimerHandler+0xac>)
    2856:	8803      	ldrh	r3, [r0, #0]
    2858:	4299      	cmp	r1, r3
    285a:	d125      	bne.n	28a8 <nwkRouteDiscoveryTimerHandler+0x88>
    285c:	3a01      	subs	r2, #1
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    285e:	7812      	ldrb	r2, [r2, #0]
    2860:	4691      	mov	r9, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    2862:	2600      	movs	r6, #0
    2864:	e01b      	b.n	289e <nwkRouteDiscoveryTimerHandler+0x7e>

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    2866:	7833      	ldrb	r3, [r6, #0]
    2868:	2b40      	cmp	r3, #64	; 0x40
    286a:	d118      	bne.n	289e <nwkRouteDiscoveryTimerHandler+0x7e>
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    286c:	7bf1      	ldrb	r1, [r6, #15]
    286e:	7c33      	ldrb	r3, [r6, #16]
    2870:	021b      	lsls	r3, r3, #8
    2872:	4650      	mov	r0, sl
    2874:	8842      	ldrh	r2, [r0, #2]
    2876:	430b      	orrs	r3, r1
    2878:	429a      	cmp	r2, r3
    287a:	d110      	bne.n	289e <nwkRouteDiscoveryTimerHandler+0x7e>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
    287c:	7af3      	ldrb	r3, [r6, #11]
    287e:	071b      	lsls	r3, r3, #28
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    2880:	7902      	ldrb	r2, [r0, #4]
    2882:	0fdb      	lsrs	r3, r3, #31
    2884:	429a      	cmp	r2, r3
    2886:	d10a      	bne.n	289e <nwkRouteDiscoveryTimerHandler+0x7e>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
		}

		if (status) {
    2888:	4649      	mov	r1, r9
    288a:	2900      	cmp	r1, #0
    288c:	d003      	beq.n	2896 <nwkRouteDiscoveryTimerHandler+0x76>
			nwkTxFrame(frame);
    288e:	1c30      	adds	r0, r6, #0
    2890:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <nwkRouteDiscoveryTimerHandler+0xb0>)
    2892:	4798      	blx	r3
    2894:	e003      	b.n	289e <nwkRouteDiscoveryTimerHandler+0x7e>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    2896:	1c30      	adds	r0, r6, #0
    2898:	2111      	movs	r1, #17
    289a:	4b0e      	ldr	r3, [pc, #56]	; (28d4 <nwkRouteDiscoveryTimerHandler+0xb4>)
    289c:	4798      	blx	r3
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    289e:	1c30      	adds	r0, r6, #0
    28a0:	490d      	ldr	r1, [pc, #52]	; (28d8 <nwkRouteDiscoveryTimerHandler+0xb8>)
    28a2:	4788      	blx	r1
    28a4:	1e06      	subs	r6, r0, #0
    28a6:	d1de      	bne.n	2866 <nwkRouteDiscoveryTimerHandler+0x46>
    28a8:	340c      	adds	r4, #12
    28aa:	350c      	adds	r5, #12
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    28ac:	4545      	cmp	r5, r8
    28ae:	d1c5      	bne.n	283c <nwkRouteDiscoveryTimerHandler+0x1c>
						0);
			}
		}
	}

	if (restart) {
    28b0:	2f00      	cmp	r7, #0
    28b2:	d002      	beq.n	28ba <nwkRouteDiscoveryTimerHandler+0x9a>
		SYS_TimerStart(timer);
    28b4:	4658      	mov	r0, fp
    28b6:	4b09      	ldr	r3, [pc, #36]	; (28dc <nwkRouteDiscoveryTimerHandler+0xbc>)
    28b8:	4798      	blx	r3
	}
}
    28ba:	bc3c      	pop	{r2, r3, r4, r5}
    28bc:	4690      	mov	r8, r2
    28be:	4699      	mov	r9, r3
    28c0:	46a2      	mov	sl, r4
    28c2:	46ab      	mov	fp, r5
    28c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	20000aac 	.word	0x20000aac
    28cc:	20000dac 	.word	0x20000dac
    28d0:	000034a5 	.word	0x000034a5
    28d4:	0000362d 	.word	0x0000362d
    28d8:	00002419 	.word	0x00002419
    28dc:	00003c19 	.word	0x00003c19

000028e0 <nwkRouteDiscoverySendRequest>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	1c05      	adds	r5, r0, #0
    28e4:	1c0e      	adds	r6, r1, #0
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    28e6:	4b1e      	ldr	r3, [pc, #120]	; (2960 <nwkRouteDiscoverySendRequest+0x80>)
    28e8:	4798      	blx	r3
    28ea:	1e04      	subs	r4, r0, #0
    28ec:	d036      	beq.n	295c <nwkRouteDiscoverySendRequest+0x7c>
		return false;
	}

	nwkFrameCommandInit(req);
    28ee:	4b1d      	ldr	r3, [pc, #116]	; (2964 <nwkRouteDiscoverySendRequest+0x84>)
    28f0:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteRequest_t);
    28f2:	7863      	ldrb	r3, [r4, #1]
    28f4:	3307      	adds	r3, #7
    28f6:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    28f8:	2200      	movs	r2, #0
    28fa:	2389      	movs	r3, #137	; 0x89
    28fc:	54e2      	strb	r2, [r4, r3]
    28fe:	238a      	movs	r3, #138	; 0x8a
    2900:	54e2      	strb	r2, [r4, r3]
    2902:	238b      	movs	r3, #139	; 0x8b
    2904:	54e2      	strb	r2, [r4, r3]
    2906:	238c      	movs	r3, #140	; 0x8c
    2908:	54e2      	strb	r2, [r4, r3]

	req->header.nwkFcf.linkLocal = 1;
    290a:	7ae2      	ldrb	r2, [r4, #11]
    290c:	2304      	movs	r3, #4
    290e:	4313      	orrs	r3, r2
    2910:	72e3      	strb	r3, [r4, #11]
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    2912:	2301      	movs	r3, #1
    2914:	425b      	negs	r3, r3
    2916:	73e3      	strb	r3, [r4, #15]
    2918:	7423      	strb	r3, [r4, #16]

	command = (NwkCommandRouteRequest_t *)req->payload;
    291a:	2381      	movs	r3, #129	; 0x81
    291c:	5ce2      	ldrb	r2, [r4, r3]
    291e:	2382      	movs	r3, #130	; 0x82
    2920:	5ce3      	ldrb	r3, [r4, r3]
    2922:	021b      	lsls	r3, r3, #8
    2924:	4313      	orrs	r3, r2
    2926:	2283      	movs	r2, #131	; 0x83
    2928:	5ca2      	ldrb	r2, [r4, r2]
    292a:	0412      	lsls	r2, r2, #16
    292c:	4313      	orrs	r3, r2
    292e:	2284      	movs	r2, #132	; 0x84
    2930:	5ca2      	ldrb	r2, [r4, r2]
    2932:	0612      	lsls	r2, r2, #24
    2934:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    2936:	2202      	movs	r2, #2
    2938:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    293a:	882a      	ldrh	r2, [r5, #0]
    293c:	705a      	strb	r2, [r3, #1]
    293e:	0a12      	lsrs	r2, r2, #8
    2940:	709a      	strb	r2, [r3, #2]
	command->dstAddr = entry->dstAddr;
    2942:	886a      	ldrh	r2, [r5, #2]
    2944:	78a9      	ldrb	r1, [r5, #2]
    2946:	70d9      	strb	r1, [r3, #3]
    2948:	0a12      	lsrs	r2, r2, #8
    294a:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    294c:	792a      	ldrb	r2, [r5, #4]
    294e:	715a      	strb	r2, [r3, #5]
	command->linkQuality = lq;
    2950:	719e      	strb	r6, [r3, #6]

	nwkTxFrame(req);
    2952:	1c20      	adds	r0, r4, #0
    2954:	4b04      	ldr	r3, [pc, #16]	; (2968 <nwkRouteDiscoverySendRequest+0x88>)
    2956:	4798      	blx	r3

	return true;
    2958:	2001      	movs	r0, #1
    295a:	e000      	b.n	295e <nwkRouteDiscoverySendRequest+0x7e>
{
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return false;
    295c:	2000      	movs	r0, #0
	command->linkQuality = lq;

	nwkTxFrame(req);

	return true;
}
    295e:	bd70      	pop	{r4, r5, r6, pc}
    2960:	00002395 	.word	0x00002395
    2964:	00002459 	.word	0x00002459
    2968:	000034a5 	.word	0x000034a5

0000296c <nwkRouteDiscoverySendReply>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296e:	1c05      	adds	r5, r0, #0
    2970:	1c0f      	adds	r7, r1, #0
    2972:	1c16      	adds	r6, r2, #0
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    2974:	4b1c      	ldr	r3, [pc, #112]	; (29e8 <nwkRouteDiscoverySendReply+0x7c>)
    2976:	4798      	blx	r3
    2978:	1e04      	subs	r4, r0, #0
    297a:	d034      	beq.n	29e6 <nwkRouteDiscoverySendReply+0x7a>
		return;
	}

	nwkFrameCommandInit(req);
    297c:	4b1b      	ldr	r3, [pc, #108]	; (29ec <nwkRouteDiscoverySendReply+0x80>)
    297e:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteReply_t);
    2980:	7863      	ldrb	r3, [r4, #1]
    2982:	3308      	adds	r3, #8
    2984:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    2986:	2200      	movs	r2, #0
    2988:	2389      	movs	r3, #137	; 0x89
    298a:	54e2      	strb	r2, [r4, r3]
    298c:	238a      	movs	r3, #138	; 0x8a
    298e:	54e2      	strb	r2, [r4, r3]
    2990:	238b      	movs	r3, #139	; 0x8b
    2992:	54e2      	strb	r2, [r4, r3]
    2994:	238c      	movs	r3, #140	; 0x8c
    2996:	54e2      	strb	r2, [r4, r3]
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    2998:	2204      	movs	r2, #4
    299a:	2388      	movs	r3, #136	; 0x88
    299c:	54e2      	strb	r2, [r4, r3]

	req->header.nwkDstAddr = entry->senderAddr;
    299e:	88eb      	ldrh	r3, [r5, #6]
    29a0:	73e3      	strb	r3, [r4, #15]
    29a2:	0a1b      	lsrs	r3, r3, #8
    29a4:	7423      	strb	r3, [r4, #16]

	command = (NwkCommandRouteReply_t *)req->payload;
    29a6:	2381      	movs	r3, #129	; 0x81
    29a8:	5ce2      	ldrb	r2, [r4, r3]
    29aa:	2382      	movs	r3, #130	; 0x82
    29ac:	5ce3      	ldrb	r3, [r4, r3]
    29ae:	021b      	lsls	r3, r3, #8
    29b0:	4313      	orrs	r3, r2
    29b2:	2283      	movs	r2, #131	; 0x83
    29b4:	5ca2      	ldrb	r2, [r4, r2]
    29b6:	0412      	lsls	r2, r2, #16
    29b8:	4313      	orrs	r3, r2
    29ba:	2284      	movs	r2, #132	; 0x84
    29bc:	5ca2      	ldrb	r2, [r4, r2]
    29be:	0612      	lsls	r2, r2, #24
    29c0:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REPLY;
    29c2:	2203      	movs	r2, #3
    29c4:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    29c6:	8828      	ldrh	r0, [r5, #0]
    29c8:	7058      	strb	r0, [r3, #1]
    29ca:	0a00      	lsrs	r0, r0, #8
    29cc:	7098      	strb	r0, [r3, #2]
	command->dstAddr = entry->dstAddr;
    29ce:	886a      	ldrh	r2, [r5, #2]
    29d0:	78a9      	ldrb	r1, [r5, #2]
    29d2:	70d9      	strb	r1, [r3, #3]
    29d4:	0a12      	lsrs	r2, r2, #8
    29d6:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    29d8:	792a      	ldrb	r2, [r5, #4]
    29da:	715a      	strb	r2, [r3, #5]
	command->forwardLinkQuality = flq;
    29dc:	719f      	strb	r7, [r3, #6]
	command->reverseLinkQuality = rlq;
    29de:	71de      	strb	r6, [r3, #7]

	nwkTxFrame(req);
    29e0:	1c20      	adds	r0, r4, #0
    29e2:	4b03      	ldr	r3, [pc, #12]	; (29f0 <nwkRouteDiscoverySendReply+0x84>)
    29e4:	4798      	blx	r3
}
    29e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29e8:	00002395 	.word	0x00002395
    29ec:	00002459 	.word	0x00002459
    29f0:	000034a5 	.word	0x000034a5

000029f4 <nwkRouteDiscoveryInit>:
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		nwkRouteDiscoveryTable[i].timeout = 0;
    29f4:	4b07      	ldr	r3, [pc, #28]	; (2a14 <nwkRouteDiscoveryInit+0x20>)
    29f6:	2200      	movs	r2, #0
    29f8:	815a      	strh	r2, [r3, #10]
    29fa:	82da      	strh	r2, [r3, #22]
    29fc:	845a      	strh	r2, [r3, #34]	; 0x22
    29fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    2a00:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    2a02:	4b05      	ldr	r3, [pc, #20]	; (2a18 <nwkRouteDiscoveryInit+0x24>)
    2a04:	2264      	movs	r2, #100	; 0x64
    2a06:	609a      	str	r2, [r3, #8]
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2a08:	2200      	movs	r2, #0
    2a0a:	731a      	strb	r2, [r3, #12]
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    2a0c:	4a03      	ldr	r2, [pc, #12]	; (2a1c <nwkRouteDiscoveryInit+0x28>)
    2a0e:	611a      	str	r2, [r3, #16]
}
    2a10:	4770      	bx	lr
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	20000aac 	.word	0x20000aac
    2a18:	20000a98 	.word	0x20000a98
    2a1c:	00002821 	.word	0x00002821

00002a20 <nwkRouteDiscoveryRequest>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    2a20:	b510      	push	{r4, lr}
    2a22:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    2a24:	4b17      	ldr	r3, [pc, #92]	; (2a84 <nwkRouteDiscoveryRequest+0x64>)
    2a26:	8818      	ldrh	r0, [r3, #0]
    2a28:	7be2      	ldrb	r2, [r4, #15]
    2a2a:	7c21      	ldrb	r1, [r4, #16]
    2a2c:	0209      	lsls	r1, r1, #8
    2a2e:	4311      	orrs	r1, r2
			header->nwkFcf.multicast);
    2a30:	7ae2      	ldrb	r2, [r4, #11]
    2a32:	0712      	lsls	r2, r2, #28
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    2a34:	0fd2      	lsrs	r2, r2, #31
    2a36:	4b14      	ldr	r3, [pc, #80]	; (2a88 <nwkRouteDiscoveryRequest+0x68>)
    2a38:	4798      	blx	r3
			header->nwkFcf.multicast);

	if (entry) {
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d002      	beq.n	2a44 <nwkRouteDiscoveryRequest+0x24>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    2a3e:	2340      	movs	r3, #64	; 0x40
    2a40:	7023      	strb	r3, [r4, #0]
		return;
    2a42:	e01e      	b.n	2a82 <nwkRouteDiscoveryRequest+0x62>
	}

	entry = nwkRouteDiscoveryNewEntry();
    2a44:	4b11      	ldr	r3, [pc, #68]	; (2a8c <nwkRouteDiscoveryRequest+0x6c>)
    2a46:	4798      	blx	r3

	if (entry) {
    2a48:	2800      	cmp	r0, #0
    2a4a:	d016      	beq.n	2a7a <nwkRouteDiscoveryRequest+0x5a>
		entry->srcAddr = nwkIb.addr;
    2a4c:	4b0d      	ldr	r3, [pc, #52]	; (2a84 <nwkRouteDiscoveryRequest+0x64>)
    2a4e:	881b      	ldrh	r3, [r3, #0]
    2a50:	8003      	strh	r3, [r0, #0]
		entry->dstAddr = header->nwkDstAddr;
    2a52:	7be1      	ldrb	r1, [r4, #15]
    2a54:	7c22      	ldrb	r2, [r4, #16]
    2a56:	0212      	lsls	r2, r2, #8
    2a58:	430a      	orrs	r2, r1
    2a5a:	8042      	strh	r2, [r0, #2]
		entry->multicast = header->nwkFcf.multicast;
    2a5c:	7ae3      	ldrb	r3, [r4, #11]
    2a5e:	071b      	lsls	r3, r3, #28
    2a60:	0fdb      	lsrs	r3, r3, #31
    2a62:	7103      	strb	r3, [r0, #4]
		entry->senderAddr = NWK_BROADCAST_ADDR;
    2a64:	2301      	movs	r3, #1
    2a66:	425b      	negs	r3, r3
    2a68:	80c3      	strh	r3, [r0, #6]

		if (nwkRouteDiscoverySendRequest(entry,
    2a6a:	21ff      	movs	r1, #255	; 0xff
    2a6c:	4b08      	ldr	r3, [pc, #32]	; (2a90 <nwkRouteDiscoveryRequest+0x70>)
    2a6e:	4798      	blx	r3
    2a70:	2800      	cmp	r0, #0
    2a72:	d002      	beq.n	2a7a <nwkRouteDiscoveryRequest+0x5a>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    2a74:	2340      	movs	r3, #64	; 0x40
    2a76:	7023      	strb	r3, [r4, #0]
			return;
    2a78:	e003      	b.n	2a82 <nwkRouteDiscoveryRequest+0x62>
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    2a7a:	1c20      	adds	r0, r4, #0
    2a7c:	2111      	movs	r1, #17
    2a7e:	4b05      	ldr	r3, [pc, #20]	; (2a94 <nwkRouteDiscoveryRequest+0x74>)
    2a80:	4798      	blx	r3
}
    2a82:	bd10      	pop	{r4, pc}
    2a84:	20000dac 	.word	0x20000dac
    2a88:	00002791 	.word	0x00002791
    2a8c:	000027cd 	.word	0x000027cd
    2a90:	000028e1 	.word	0x000028e1
    2a94:	0000362d 	.word	0x0000362d

00002a98 <nwkRouteDiscoveryRequestReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9a:	4647      	mov	r7, r8
    2a9c:	b480      	push	{r7}
    2a9e:	1c05      	adds	r5, r0, #0
	NwkCommandRouteRequest_t *command
    2aa0:	6884      	ldr	r4, [r0, #8]
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    2aa2:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2aa4:	2000      	movs	r0, #0
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    2aa6:	2b07      	cmp	r3, #7
    2aa8:	d169      	bne.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
		reply = true;
	}

#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    2aaa:	7962      	ldrb	r2, [r4, #5]
    2aac:	2a00      	cmp	r2, #0
    2aae:	d15b      	bne.n	2b68 <nwkRouteDiscoveryRequestReceived+0xd0>
    2ab0:	4b34      	ldr	r3, [pc, #208]	; (2b84 <nwkRouteDiscoveryRequestReceived+0xec>)
    2ab2:	881b      	ldrh	r3, [r3, #0]
    2ab4:	78e0      	ldrb	r0, [r4, #3]
    2ab6:	7921      	ldrb	r1, [r4, #4]
    2ab8:	0209      	lsls	r1, r1, #8
    2aba:	4301      	orrs	r1, r0
    2abc:	1ac9      	subs	r1, r1, r3
    2abe:	4248      	negs	r0, r1
    2ac0:	4141      	adcs	r1, r0
    2ac2:	b2c9      	uxtb	r1, r1
    2ac4:	4688      	mov	r8, r1
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    2ac6:	7861      	ldrb	r1, [r4, #1]
    2ac8:	78a0      	ldrb	r0, [r4, #2]
    2aca:	0200      	lsls	r0, r0, #8
    2acc:	4308      	orrs	r0, r1
    2ace:	4283      	cmp	r3, r0
    2ad0:	d042      	beq.n	2b58 <nwkRouteDiscoveryRequestReceived+0xc0>
		return true;
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    2ad2:	4641      	mov	r1, r8
    2ad4:	2900      	cmp	r1, #0
    2ad6:	d102      	bne.n	2ade <nwkRouteDiscoveryRequestReceived+0x46>
    2ad8:	b21b      	sxth	r3, r3
    2ada:	2b00      	cmp	r3, #0
    2adc:	db3e      	blt.n	2b5c <nwkRouteDiscoveryRequestReceived+0xc4>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    2ade:	79a3      	ldrb	r3, [r4, #6]
    2ae0:	7b6f      	ldrb	r7, [r5, #13]
    2ae2:	435f      	muls	r7, r3
    2ae4:	0a3f      	lsrs	r7, r7, #8
		return true;
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    2ae6:	78e3      	ldrb	r3, [r4, #3]
    2ae8:	7921      	ldrb	r1, [r4, #4]
    2aea:	0209      	lsls	r1, r1, #8
    2aec:	4319      	orrs	r1, r3
    2aee:	4b26      	ldr	r3, [pc, #152]	; (2b88 <nwkRouteDiscoveryRequestReceived+0xf0>)
    2af0:	4798      	blx	r3
    2af2:	1e06      	subs	r6, r0, #0
			command->multicast);

	if (entry) {
    2af4:	d004      	beq.n	2b00 <nwkRouteDiscoveryRequestReceived+0x68>
		if (linkQuality <= entry->forwardLinkQuality) {
    2af6:	7a03      	ldrb	r3, [r0, #8]
			return true;
    2af8:	2001      	movs	r0, #1

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	if (entry) {
		if (linkQuality <= entry->forwardLinkQuality) {
    2afa:	42bb      	cmp	r3, r7
    2afc:	d304      	bcc.n	2b08 <nwkRouteDiscoveryRequestReceived+0x70>
    2afe:	e03e      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    2b00:	4b22      	ldr	r3, [pc, #136]	; (2b8c <nwkRouteDiscoveryRequestReceived+0xf4>)
    2b02:	4798      	blx	r3
    2b04:	1e06      	subs	r6, r0, #0
    2b06:	d02b      	beq.n	2b60 <nwkRouteDiscoveryRequestReceived+0xc8>
			return true;
		}
	}

	entry->srcAddr = command->srcAddr;
    2b08:	7862      	ldrb	r2, [r4, #1]
    2b0a:	78a3      	ldrb	r3, [r4, #2]
    2b0c:	021b      	lsls	r3, r3, #8
    2b0e:	4313      	orrs	r3, r2
    2b10:	8033      	strh	r3, [r6, #0]
	entry->dstAddr = command->dstAddr;
    2b12:	78e2      	ldrb	r2, [r4, #3]
    2b14:	7923      	ldrb	r3, [r4, #4]
    2b16:	021b      	lsls	r3, r3, #8
    2b18:	4313      	orrs	r3, r2
    2b1a:	8073      	strh	r3, [r6, #2]
	entry->multicast = command->multicast;
    2b1c:	7963      	ldrb	r3, [r4, #5]
    2b1e:	7133      	strb	r3, [r6, #4]
	entry->senderAddr = ind->srcAddr;
    2b20:	882b      	ldrh	r3, [r5, #0]
    2b22:	80f3      	strh	r3, [r6, #6]
	entry->forwardLinkQuality = linkQuality;
    2b24:	7237      	strb	r7, [r6, #8]

	if (reply) {
    2b26:	4643      	mov	r3, r8
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d00f      	beq.n	2b4c <nwkRouteDiscoveryRequestReceived+0xb4>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    2b2c:	7863      	ldrb	r3, [r4, #1]
    2b2e:	78a0      	ldrb	r0, [r4, #2]
    2b30:	0200      	lsls	r0, r0, #8
    2b32:	4318      	orrs	r0, r3
    2b34:	882a      	ldrh	r2, [r5, #0]
    2b36:	2100      	movs	r1, #0
    2b38:	1c3b      	adds	r3, r7, #0
    2b3a:	4c15      	ldr	r4, [pc, #84]	; (2b90 <nwkRouteDiscoveryRequestReceived+0xf8>)
    2b3c:	47a0      	blx	r4
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    2b3e:	1c30      	adds	r0, r6, #0
    2b40:	1c39      	adds	r1, r7, #0
    2b42:	22ff      	movs	r2, #255	; 0xff
    2b44:	4b13      	ldr	r3, [pc, #76]	; (2b94 <nwkRouteDiscoveryRequestReceived+0xfc>)
    2b46:	4798      	blx	r3
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
    2b48:	2001      	movs	r0, #1
    2b4a:	e018      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    2b4c:	1c30      	adds	r0, r6, #0
    2b4e:	1c39      	adds	r1, r7, #0
    2b50:	4b11      	ldr	r3, [pc, #68]	; (2b98 <nwkRouteDiscoveryRequestReceived+0x100>)
    2b52:	4798      	blx	r3
	}

	return true;
    2b54:	2001      	movs	r0, #1
    2b56:	e012      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    2b58:	2001      	movs	r0, #1
    2b5a:	e010      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
		return true;
    2b5c:	2001      	movs	r0, #1
    2b5e:	e00e      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
		if (linkQuality <= entry->forwardLinkQuality) {
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
			return true;
    2b60:	2001      	movs	r0, #1
    2b62:	e00c      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    2b64:	2001      	movs	r0, #1
    2b66:	e00a      	b.n	2b7e <nwkRouteDiscoveryRequestReceived+0xe6>

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    2b68:	7863      	ldrb	r3, [r4, #1]
    2b6a:	78a0      	ldrb	r0, [r4, #2]
    2b6c:	0200      	lsls	r0, r0, #8
    2b6e:	4318      	orrs	r0, r3
    2b70:	4b04      	ldr	r3, [pc, #16]	; (2b84 <nwkRouteDiscoveryRequestReceived+0xec>)
    2b72:	881b      	ldrh	r3, [r3, #0]
    2b74:	4298      	cmp	r0, r3
    2b76:	d0f5      	beq.n	2b64 <nwkRouteDiscoveryRequestReceived+0xcc>
{
	NwkCommandRouteRequest_t *command
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    2b78:	2100      	movs	r1, #0
    2b7a:	4688      	mov	r8, r1
    2b7c:	e7ac      	b.n	2ad8 <nwkRouteDiscoveryRequestReceived+0x40>
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
}
    2b7e:	bc04      	pop	{r2}
    2b80:	4690      	mov	r8, r2
    2b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b84:	20000dac 	.word	0x20000dac
    2b88:	00002791 	.word	0x00002791
    2b8c:	000027cd 	.word	0x000027cd
    2b90:	00002555 	.word	0x00002555
    2b94:	0000296d 	.word	0x0000296d
    2b98:	000028e1 	.word	0x000028e1

00002b9c <nwkRouteDiscoveryReplyReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    2b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b9e:	1c05      	adds	r5, r0, #0
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    2ba0:	6884      	ldr	r4, [r0, #8]
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    2ba2:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2ba4:	2000      	movs	r0, #0
{
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    2ba6:	2b08      	cmp	r3, #8
    2ba8:	d143      	bne.n	2c32 <nwkRouteDiscoveryReplyReceived+0x96>
		return false;
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    2baa:	7863      	ldrb	r3, [r4, #1]
    2bac:	78a0      	ldrb	r0, [r4, #2]
    2bae:	0200      	lsls	r0, r0, #8
    2bb0:	4318      	orrs	r0, r3
    2bb2:	78e3      	ldrb	r3, [r4, #3]
    2bb4:	7921      	ldrb	r1, [r4, #4]
    2bb6:	0209      	lsls	r1, r1, #8
    2bb8:	4319      	orrs	r1, r3
    2bba:	7962      	ldrb	r2, [r4, #5]
    2bbc:	4b1d      	ldr	r3, [pc, #116]	; (2c34 <nwkRouteDiscoveryReplyReceived+0x98>)
    2bbe:	4798      	blx	r3
    2bc0:	1c06      	adds	r6, r0, #0
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    2bc2:	79e3      	ldrb	r3, [r4, #7]
    2bc4:	7b6a      	ldrb	r2, [r5, #13]
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d032      	beq.n	2c30 <nwkRouteDiscoveryReplyReceived+0x94>
    2bca:	79a1      	ldrb	r1, [r4, #6]
    2bcc:	7a47      	ldrb	r7, [r0, #9]
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    2bce:	2001      	movs	r0, #1
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    2bd0:	428f      	cmp	r7, r1
    2bd2:	d22e      	bcs.n	2c32 <nwkRouteDiscoveryReplyReceived+0x96>
		entry->reverseLinkQuality = command->forwardLinkQuality;
    2bd4:	7271      	strb	r1, [r6, #9]

		if (command->srcAddr == nwkIb.addr) {
    2bd6:	7867      	ldrb	r7, [r4, #1]
    2bd8:	78a1      	ldrb	r1, [r4, #2]
    2bda:	0209      	lsls	r1, r1, #8
    2bdc:	4816      	ldr	r0, [pc, #88]	; (2c38 <nwkRouteDiscoveryReplyReceived+0x9c>)
    2bde:	8800      	ldrh	r0, [r0, #0]
    2be0:	4339      	orrs	r1, r7
    2be2:	4288      	cmp	r0, r1
    2be4:	d10a      	bne.n	2bfc <nwkRouteDiscoveryReplyReceived+0x60>
			nwkRouteUpdateEntry(command->dstAddr,
    2be6:	78e3      	ldrb	r3, [r4, #3]
    2be8:	7920      	ldrb	r0, [r4, #4]
    2bea:	0200      	lsls	r0, r0, #8
    2bec:	4318      	orrs	r0, r3
    2bee:	7961      	ldrb	r1, [r4, #5]
    2bf0:	882a      	ldrh	r2, [r5, #0]
    2bf2:	79a3      	ldrb	r3, [r4, #6]
    2bf4:	4c11      	ldr	r4, [pc, #68]	; (2c3c <nwkRouteDiscoveryReplyReceived+0xa0>)
    2bf6:	47a0      	blx	r4
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    2bf8:	2001      	movs	r0, #1
    2bfa:	e01a      	b.n	2c32 <nwkRouteDiscoveryReplyReceived+0x96>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    2bfc:	4353      	muls	r3, r2
    2bfe:	0a1f      	lsrs	r7, r3, #8
			nwkRouteUpdateEntry(command->dstAddr,
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    2c00:	78e3      	ldrb	r3, [r4, #3]
    2c02:	7920      	ldrb	r0, [r4, #4]
    2c04:	0200      	lsls	r0, r0, #8
    2c06:	4318      	orrs	r0, r3
    2c08:	7961      	ldrb	r1, [r4, #5]
    2c0a:	882a      	ldrh	r2, [r5, #0]
    2c0c:	1c3b      	adds	r3, r7, #0
    2c0e:	4d0b      	ldr	r5, [pc, #44]	; (2c3c <nwkRouteDiscoveryReplyReceived+0xa0>)
    2c10:	47a8      	blx	r5
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    2c12:	7863      	ldrb	r3, [r4, #1]
    2c14:	78a0      	ldrb	r0, [r4, #2]
    2c16:	0200      	lsls	r0, r0, #8
    2c18:	4318      	orrs	r0, r3
    2c1a:	88f2      	ldrh	r2, [r6, #6]
    2c1c:	7a33      	ldrb	r3, [r6, #8]
    2c1e:	2100      	movs	r1, #0
    2c20:	47a8      	blx	r5
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    2c22:	79a1      	ldrb	r1, [r4, #6]
    2c24:	1c30      	adds	r0, r6, #0
    2c26:	1c3a      	adds	r2, r7, #0
    2c28:	4b05      	ldr	r3, [pc, #20]	; (2c40 <nwkRouteDiscoveryReplyReceived+0xa4>)
    2c2a:	4798      	blx	r3
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    2c2c:	2001      	movs	r0, #1
    2c2e:	e000      	b.n	2c32 <nwkRouteDiscoveryReplyReceived+0x96>
    2c30:	2001      	movs	r0, #1
}
    2c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c34:	00002791 	.word	0x00002791
    2c38:	20000dac 	.word	0x20000dac
    2c3c:	00002555 	.word	0x00002555
    2c40:	0000296d 	.word	0x0000296d

00002c44 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2c44:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    2c46:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2c48:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    2c4a:	2a00      	cmp	r2, #0
    2c4c:	d01b      	beq.n	2c86 <nwkRxSeriveDataInd+0x42>
		return false;
	}

	switch (ind->data[0]) {
    2c4e:	6882      	ldr	r2, [r0, #8]
    2c50:	7813      	ldrb	r3, [r2, #0]
    2c52:	2b01      	cmp	r3, #1
    2c54:	d00a      	beq.n	2c6c <nwkRxSeriveDataInd+0x28>
    2c56:	2b00      	cmp	r3, #0
    2c58:	d004      	beq.n	2c64 <nwkRxSeriveDataInd+0x20>
    2c5a:	2b02      	cmp	r3, #2
    2c5c:	d00a      	beq.n	2c74 <nwkRxSeriveDataInd+0x30>
    2c5e:	2b03      	cmp	r3, #3
    2c60:	d00c      	beq.n	2c7c <nwkRxSeriveDataInd+0x38>
    2c62:	e00f      	b.n	2c84 <nwkRxSeriveDataInd+0x40>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2c64:	4b09      	ldr	r3, [pc, #36]	; (2c8c <nwkRxSeriveDataInd+0x48>)
    2c66:	4798      	blx	r3
    2c68:	1c03      	adds	r3, r0, #0
    2c6a:	e00c      	b.n	2c86 <nwkRxSeriveDataInd+0x42>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2c6c:	4b08      	ldr	r3, [pc, #32]	; (2c90 <nwkRxSeriveDataInd+0x4c>)
    2c6e:	4798      	blx	r3
    2c70:	1c03      	adds	r3, r0, #0
    2c72:	e008      	b.n	2c86 <nwkRxSeriveDataInd+0x42>

#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	case NWK_COMMAND_ROUTE_REQUEST:
		return nwkRouteDiscoveryRequestReceived(ind);
    2c74:	4b07      	ldr	r3, [pc, #28]	; (2c94 <nwkRxSeriveDataInd+0x50>)
    2c76:	4798      	blx	r3
    2c78:	1c03      	adds	r3, r0, #0
    2c7a:	e004      	b.n	2c86 <nwkRxSeriveDataInd+0x42>

	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
    2c7c:	4b06      	ldr	r3, [pc, #24]	; (2c98 <nwkRxSeriveDataInd+0x54>)
    2c7e:	4798      	blx	r3
    2c80:	1c03      	adds	r3, r0, #0
    2c82:	e000      	b.n	2c86 <nwkRxSeriveDataInd+0x42>

#endif

	default:
		return false;
    2c84:	2300      	movs	r3, #0
	}
}
    2c86:	1c18      	adds	r0, r3, #0
    2c88:	bd08      	pop	{r3, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	000035f1 	.word	0x000035f1
    2c90:	0000276d 	.word	0x0000276d
    2c94:	00002a99 	.word	0x00002a99
    2c98:	00002b9d 	.word	0x00002b9d

00002c9c <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2c9c:	b538      	push	{r3, r4, r5, lr}
    2c9e:	490a      	ldr	r1, [pc, #40]	; (2cc8 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2ca0:	1d0b      	adds	r3, r1, #4
    2ca2:	3131      	adds	r1, #49	; 0x31
    2ca4:	31ff      	adds	r1, #255	; 0xff
	bool restart = false;
    2ca6:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2ca8:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2caa:	781a      	ldrb	r2, [r3, #0]
    2cac:	2a00      	cmp	r2, #0
    2cae:	d002      	beq.n	2cb6 <nwkRxDuplicateRejectionTimerHandler+0x1a>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2cb0:	3a01      	subs	r2, #1
    2cb2:	701a      	strb	r2, [r3, #0]
			restart = true;
    2cb4:	1c2c      	adds	r4, r5, #0
    2cb6:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2cb8:	428b      	cmp	r3, r1
    2cba:	d1f6      	bne.n	2caa <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2cbc:	2c00      	cmp	r4, #0
    2cbe:	d001      	beq.n	2cc4 <nwkRxDuplicateRejectionTimerHandler+0x28>
		SYS_TimerStart(timer);
    2cc0:	4b02      	ldr	r3, [pc, #8]	; (2ccc <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2cc2:	4798      	blx	r3
	}
}
    2cc4:	bd38      	pop	{r3, r4, r5, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	20000ae8 	.word	0x20000ae8
    2ccc:	00003c19 	.word	0x00003c19

00002cd0 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2cd0:	b508      	push	{r3, lr}
    2cd2:	490a      	ldr	r1, [pc, #40]	; (2cfc <nwkRxInit+0x2c>)
    2cd4:	1d0b      	adds	r3, r1, #4
    2cd6:	3131      	adds	r1, #49	; 0x31
    2cd8:	31ff      	adds	r1, #255	; 0xff
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2cda:	2200      	movs	r2, #0
    2cdc:	701a      	strb	r2, [r3, #0]
    2cde:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2ce0:	428b      	cmp	r3, r1
    2ce2:	d1fb      	bne.n	2cdc <nwkRxInit+0xc>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2ce4:	4b06      	ldr	r3, [pc, #24]	; (2d00 <nwkRxInit+0x30>)
    2ce6:	2264      	movs	r2, #100	; 0x64
    2ce8:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2cea:	2200      	movs	r2, #0
    2cec:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2cee:	4a05      	ldr	r2, [pc, #20]	; (2d04 <nwkRxInit+0x34>)
    2cf0:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2cf2:	2000      	movs	r0, #0
    2cf4:	4904      	ldr	r1, [pc, #16]	; (2d08 <nwkRxInit+0x38>)
    2cf6:	4b05      	ldr	r3, [pc, #20]	; (2d0c <nwkRxInit+0x3c>)
    2cf8:	4798      	blx	r3
}
    2cfa:	bd08      	pop	{r3, pc}
    2cfc:	20000ae8 	.word	0x20000ae8
    2d00:	20000c18 	.word	0x20000c18
    2d04:	00002c9d 	.word	0x00002c9d
    2d08:	00002c45 	.word	0x00002c45
    2d0c:	00002135 	.word	0x00002135

00002d10 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    2d10:	b510      	push	{r4, lr}
    2d12:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    2d14:	6803      	ldr	r3, [r0, #0]
    2d16:	785a      	ldrb	r2, [r3, #1]
    2d18:	2a88      	cmp	r2, #136	; 0x88
    2d1a:	d11a      	bne.n	2d52 <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    2d1c:	781b      	ldrb	r3, [r3, #0]
    2d1e:	2220      	movs	r2, #32
    2d20:	4393      	bics	r3, r2
    2d22:	2b41      	cmp	r3, #65	; 0x41
    2d24:	d115      	bne.n	2d52 <PHY_DataInd+0x42>
    2d26:	7903      	ldrb	r3, [r0, #4]
    2d28:	2b0f      	cmp	r3, #15
    2d2a:	d912      	bls.n	2d52 <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    2d2c:	4b09      	ldr	r3, [pc, #36]	; (2d54 <PHY_DataInd+0x44>)
    2d2e:	4798      	blx	r3
    2d30:	2800      	cmp	r0, #0
    2d32:	d00e      	beq.n	2d52 <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    2d34:	2320      	movs	r3, #32
    2d36:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    2d38:	7923      	ldrb	r3, [r4, #4]
    2d3a:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    2d3c:	7962      	ldrb	r2, [r4, #5]
    2d3e:	2385      	movs	r3, #133	; 0x85
    2d40:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    2d42:	79a2      	ldrb	r2, [r4, #6]
    2d44:	2386      	movs	r3, #134	; 0x86
    2d46:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2d48:	3002      	adds	r0, #2
    2d4a:	7922      	ldrb	r2, [r4, #4]
    2d4c:	6821      	ldr	r1, [r4, #0]
    2d4e:	4b02      	ldr	r3, [pc, #8]	; (2d58 <PHY_DataInd+0x48>)
    2d50:	4798      	blx	r3
}
    2d52:	bd10      	pop	{r4, pc}
    2d54:	00002395 	.word	0x00002395
    2d58:	00004dfd 	.word	0x00004dfd

00002d5c <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    2d5c:	2900      	cmp	r1, #0
    2d5e:	d002      	beq.n	2d66 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    2d60:	2322      	movs	r3, #34	; 0x22
    2d62:	7003      	strb	r3, [r0, #0]
    2d64:	e001      	b.n	2d6a <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    2d66:	2324      	movs	r3, #36	; 0x24
    2d68:	7003      	strb	r3, [r0, #0]
	}
}
    2d6a:	4770      	bx	lr

00002d6c <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d6e:	4657      	mov	r7, sl
    2d70:	464e      	mov	r6, r9
    2d72:	4645      	mov	r5, r8
    2d74:	b4e0      	push	{r5, r6, r7}
    2d76:	b084      	sub	sp, #16
	NwkFrame_t *frame = NULL;
    2d78:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d7a:	4dd5      	ldr	r5, [pc, #852]	; (30d0 <nwkRxTaskHandler+0x364>)
    2d7c:	4ed5      	ldr	r6, [pc, #852]	; (30d4 <nwkRxTaskHandler+0x368>)
    2d7e:	362d      	adds	r6, #45	; 0x2d
    2d80:	36ff      	adds	r6, #255	; 0xff
    2d82:	e19f      	b.n	30c4 <nwkRxTaskHandler+0x358>
		switch (frame->state) {
    2d84:	7823      	ldrb	r3, [r4, #0]
    2d86:	3b20      	subs	r3, #32
    2d88:	b2da      	uxtb	r2, r3
    2d8a:	2a04      	cmp	r2, #4
    2d8c:	d900      	bls.n	2d90 <nwkRxTaskHandler+0x24>
    2d8e:	e199      	b.n	30c4 <nwkRxTaskHandler+0x358>
    2d90:	0093      	lsls	r3, r2, #2
    2d92:	4ad1      	ldr	r2, [pc, #836]	; (30d8 <nwkRxTaskHandler+0x36c>)
    2d94:	58d3      	ldr	r3, [r2, r3]
    2d96:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2d98:	2324      	movs	r3, #36	; 0x24
    2d9a:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2d9c:	7ae3      	ldrb	r3, [r4, #11]
    2d9e:	0718      	lsls	r0, r3, #28
    2da0:	d500      	bpl.n	2da4 <nwkRxTaskHandler+0x38>
    2da2:	e18f      	b.n	30c4 <nwkRxTaskHandler+0x358>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2da4:	7961      	ldrb	r1, [r4, #5]
    2da6:	79a2      	ldrb	r2, [r4, #6]
    2da8:	0212      	lsls	r2, r2, #8
    2daa:	430a      	orrs	r2, r1
    2dac:	4bcb      	ldr	r3, [pc, #812]	; (30dc <nwkRxTaskHandler+0x370>)
    2dae:	429a      	cmp	r2, r3
    2db0:	d114      	bne.n	2ddc <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2db2:	7be2      	ldrb	r2, [r4, #15]
    2db4:	7c23      	ldrb	r3, [r4, #16]
    2db6:	021b      	lsls	r3, r3, #8
    2db8:	4313      	orrs	r3, r2
    2dba:	4ac9      	ldr	r2, [pc, #804]	; (30e0 <nwkRxTaskHandler+0x374>)
    2dbc:	8812      	ldrh	r2, [r2, #0]
    2dbe:	429a      	cmp	r2, r3
    2dc0:	d003      	beq.n	2dca <nwkRxTaskHandler+0x5e>
    2dc2:	4ac6      	ldr	r2, [pc, #792]	; (30dc <nwkRxTaskHandler+0x370>)
    2dc4:	4293      	cmp	r3, r2
    2dc6:	d000      	beq.n	2dca <nwkRxTaskHandler+0x5e>
    2dc8:	e17c      	b.n	30c4 <nwkRxTaskHandler+0x358>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2dca:	7ae3      	ldrb	r3, [r4, #11]
    2dcc:	0799      	lsls	r1, r3, #30
    2dce:	d502      	bpl.n	2dd6 <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2dd0:	2321      	movs	r3, #33	; 0x21
    2dd2:	7023      	strb	r3, [r4, #0]
    2dd4:	e176      	b.n	30c4 <nwkRxTaskHandler+0x358>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2dd6:	2322      	movs	r3, #34	; 0x22
    2dd8:	7023      	strb	r3, [r4, #0]
    2dda:	e173      	b.n	30c4 <nwkRxTaskHandler+0x358>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2ddc:	7be1      	ldrb	r1, [r4, #15]
    2dde:	7c22      	ldrb	r2, [r4, #16]
    2de0:	0212      	lsls	r2, r2, #8
    2de2:	430a      	orrs	r2, r1
    2de4:	4bbd      	ldr	r3, [pc, #756]	; (30dc <nwkRxTaskHandler+0x370>)
    2de6:	429a      	cmp	r2, r3
    2de8:	d103      	bne.n	2df2 <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    2dea:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2dec:	07da      	lsls	r2, r3, #31
    2dee:	d500      	bpl.n	2df2 <nwkRxTaskHandler+0x86>
    2df0:	e168      	b.n	30c4 <nwkRxTaskHandler+0x358>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    2df2:	7b61      	ldrb	r1, [r4, #13]
    2df4:	7ba3      	ldrb	r3, [r4, #14]
    2df6:	021b      	lsls	r3, r3, #8
    2df8:	4ab9      	ldr	r2, [pc, #740]	; (30e0 <nwkRxTaskHandler+0x374>)
    2dfa:	8812      	ldrh	r2, [r2, #0]
    2dfc:	430b      	orrs	r3, r1
    2dfe:	429a      	cmp	r2, r3
    2e00:	d100      	bne.n	2e04 <nwkRxTaskHandler+0x98>
    2e02:	e15f      	b.n	30c4 <nwkRxTaskHandler+0x358>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    2e04:	1c20      	adds	r0, r4, #0
    2e06:	4bb7      	ldr	r3, [pc, #732]	; (30e4 <nwkRxTaskHandler+0x378>)
    2e08:	4798      	blx	r3
    2e0a:	4bb2      	ldr	r3, [pc, #712]	; (30d4 <nwkRxTaskHandler+0x368>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2e0c:	2700      	movs	r7, #0
    2e0e:	46b8      	mov	r8, r7

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2e10:	1ca0      	adds	r0, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2e12:	1c19      	adds	r1, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2e14:	791a      	ldrb	r2, [r3, #4]
    2e16:	2a00      	cmp	r2, #0
    2e18:	d037      	beq.n	2e8a <nwkRxTaskHandler+0x11e>
    2e1a:	7ac2      	ldrb	r2, [r0, #11]
    2e1c:	7b07      	ldrb	r7, [r0, #12]
    2e1e:	023f      	lsls	r7, r7, #8
    2e20:	46bc      	mov	ip, r7
    2e22:	881f      	ldrh	r7, [r3, #0]
    2e24:	46ba      	mov	sl, r7
    2e26:	4667      	mov	r7, ip
    2e28:	433a      	orrs	r2, r7
    2e2a:	4592      	cmp	sl, r2
    2e2c:	d12e      	bne.n	2e8c <nwkRxTaskHandler+0x120>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2e2e:	7b22      	ldrb	r2, [r4, #12]
    2e30:	789b      	ldrb	r3, [r3, #2]
    2e32:	1a9b      	subs	r3, r3, r2
    2e34:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    2e36:	2b07      	cmp	r3, #7
    2e38:	d81c      	bhi.n	2e74 <nwkRxTaskHandler+0x108>
				if (entry->mask & (1 << diff)) {
    2e3a:	78ca      	ldrb	r2, [r1, #3]
    2e3c:	1c10      	adds	r0, r2, #0
    2e3e:	4118      	asrs	r0, r3
    2e40:	07c7      	lsls	r7, r0, #31
    2e42:	d512      	bpl.n	2e6a <nwkRxTaskHandler+0xfe>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    2e44:	79e1      	ldrb	r1, [r4, #7]
    2e46:	7a23      	ldrb	r3, [r4, #8]
    2e48:	021b      	lsls	r3, r3, #8
    2e4a:	4aa5      	ldr	r2, [pc, #660]	; (30e0 <nwkRxTaskHandler+0x374>)
    2e4c:	8812      	ldrh	r2, [r2, #0]
    2e4e:	430b      	orrs	r3, r1
    2e50:	429a      	cmp	r2, r3
    2e52:	d000      	beq.n	2e56 <nwkRxTaskHandler+0xea>
    2e54:	e136      	b.n	30c4 <nwkRxTaskHandler+0x358>
						nwkRouteRemove(
    2e56:	7be2      	ldrb	r2, [r4, #15]
    2e58:	7c20      	ldrb	r0, [r4, #16]
    2e5a:	0200      	lsls	r0, r0, #8
    2e5c:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2e5e:	7ae1      	ldrb	r1, [r4, #11]
    2e60:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2e62:	0fc9      	lsrs	r1, r1, #31
    2e64:	4ba0      	ldr	r3, [pc, #640]	; (30e8 <nwkRxTaskHandler+0x37c>)
    2e66:	4798      	blx	r3
    2e68:	e12c      	b.n	30c4 <nwkRxTaskHandler+0x358>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2e6a:	2001      	movs	r0, #1
    2e6c:	4098      	lsls	r0, r3
    2e6e:	4302      	orrs	r2, r0
    2e70:	70ca      	strb	r2, [r1, #3]
    2e72:	e151      	b.n	3118 <nwkRxTaskHandler+0x3ac>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2e74:	708a      	strb	r2, [r1, #2]
				entry->mask = (entry->mask << shift) | 1;
    2e76:	78ca      	ldrb	r2, [r1, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    2e78:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2e7a:	b2db      	uxtb	r3, r3
    2e7c:	409a      	lsls	r2, r3
    2e7e:	2301      	movs	r3, #1
    2e80:	4313      	orrs	r3, r2
    2e82:	70cb      	strb	r3, [r1, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2e84:	2315      	movs	r3, #21
    2e86:	710b      	strb	r3, [r1, #4]
    2e88:	e146      	b.n	3118 <nwkRxTaskHandler+0x3ac>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2e8a:	4698      	mov	r8, r3
    2e8c:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2e8e:	42b3      	cmp	r3, r6
    2e90:	d1bf      	bne.n	2e12 <nwkRxTaskHandler+0xa6>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2e92:	4640      	mov	r0, r8
    2e94:	2800      	cmp	r0, #0
    2e96:	d100      	bne.n	2e9a <nwkRxTaskHandler+0x12e>
    2e98:	e114      	b.n	30c4 <nwkRxTaskHandler+0x358>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2e9a:	7b61      	ldrb	r1, [r4, #13]
    2e9c:	7ba2      	ldrb	r2, [r4, #14]
    2e9e:	0212      	lsls	r2, r2, #8
    2ea0:	430a      	orrs	r2, r1
    2ea2:	8002      	strh	r2, [r0, #0]
	freeEntry->seq = header->nwkSeq;
    2ea4:	7b23      	ldrb	r3, [r4, #12]
    2ea6:	7083      	strb	r3, [r0, #2]
	freeEntry->mask = 1;
    2ea8:	2301      	movs	r3, #1
    2eaa:	70c3      	strb	r3, [r0, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2eac:	2315      	movs	r3, #21
    2eae:	7103      	strb	r3, [r0, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2eb0:	488e      	ldr	r0, [pc, #568]	; (30ec <nwkRxTaskHandler+0x380>)
    2eb2:	4b8f      	ldr	r3, [pc, #572]	; (30f0 <nwkRxTaskHandler+0x384>)
    2eb4:	4798      	blx	r3
    2eb6:	e12f      	b.n	3118 <nwkRxTaskHandler+0x3ac>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2eb8:	4b89      	ldr	r3, [pc, #548]	; (30e0 <nwkRxTaskHandler+0x374>)
    2eba:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2ebc:	7be0      	ldrb	r0, [r4, #15]
    2ebe:	7c23      	ldrb	r3, [r4, #16]
    2ec0:	021b      	lsls	r3, r3, #8
    2ec2:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2ec4:	429a      	cmp	r2, r3
    2ec6:	d010      	beq.n	2eea <nwkRxTaskHandler+0x17e>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    2ec8:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    2eca:	074f      	lsls	r7, r1, #29
    2ecc:	d40a      	bmi.n	2ee4 <nwkRxTaskHandler+0x178>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2ece:	1c20      	adds	r0, r4, #0
    2ed0:	4b88      	ldr	r3, [pc, #544]	; (30f4 <nwkRxTaskHandler+0x388>)
    2ed2:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2ed4:	4b82      	ldr	r3, [pc, #520]	; (30e0 <nwkRxTaskHandler+0x374>)
    2ed6:	881a      	ldrh	r2, [r3, #0]
    2ed8:	7be0      	ldrb	r0, [r4, #15]
    2eda:	7c23      	ldrb	r3, [r4, #16]
    2edc:	021b      	lsls	r3, r3, #8
    2ede:	4303      	orrs	r3, r0
    2ee0:	429a      	cmp	r2, r3
    2ee2:	d002      	beq.n	2eea <nwkRxTaskHandler+0x17e>
    2ee4:	497d      	ldr	r1, [pc, #500]	; (30dc <nwkRxTaskHandler+0x370>)
    2ee6:	428b      	cmp	r3, r1
    2ee8:	d108      	bne.n	2efc <nwkRxTaskHandler+0x190>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2eea:	7ae3      	ldrb	r3, [r4, #11]
    2eec:	0798      	lsls	r0, r3, #30
    2eee:	d502      	bpl.n	2ef6 <nwkRxTaskHandler+0x18a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2ef0:	2321      	movs	r3, #33	; 0x21
    2ef2:	7023      	strb	r3, [r4, #0]
    2ef4:	e0e6      	b.n	30c4 <nwkRxTaskHandler+0x358>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2ef6:	2322      	movs	r3, #34	; 0x22
    2ef8:	7023      	strb	r3, [r4, #0]
    2efa:	e0e3      	b.n	30c4 <nwkRxTaskHandler+0x358>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2efc:	79e1      	ldrb	r1, [r4, #7]
    2efe:	7a23      	ldrb	r3, [r4, #8]
    2f00:	021b      	lsls	r3, r3, #8
    2f02:	430b      	orrs	r3, r1
    2f04:	429a      	cmp	r2, r3
    2f06:	d000      	beq.n	2f0a <nwkRxTaskHandler+0x19e>
    2f08:	e0dc      	b.n	30c4 <nwkRxTaskHandler+0x358>
			frame->state = NWK_RX_STATE_ROUTE;
    2f0a:	2323      	movs	r3, #35	; 0x23
    2f0c:	7023      	strb	r3, [r4, #0]
    2f0e:	e0d9      	b.n	30c4 <nwkRxTaskHandler+0x358>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2f10:	1c20      	adds	r0, r4, #0
    2f12:	2100      	movs	r1, #0
    2f14:	4b78      	ldr	r3, [pc, #480]	; (30f8 <nwkRxTaskHandler+0x38c>)
    2f16:	4798      	blx	r3
		}
		break;
    2f18:	e0d4      	b.n	30c4 <nwkRxTaskHandler+0x358>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2f1a:	2200      	movs	r2, #0
    2f1c:	4b77      	ldr	r3, [pc, #476]	; (30fc <nwkRxTaskHandler+0x390>)
    2f1e:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2f20:	7c61      	ldrb	r1, [r4, #17]
    2f22:	0909      	lsrs	r1, r1, #4
    2f24:	b2ca      	uxtb	r2, r1
    2f26:	3202      	adds	r2, #2
    2f28:	0092      	lsls	r2, r2, #2
    2f2a:	4b6d      	ldr	r3, [pc, #436]	; (30e0 <nwkRxTaskHandler+0x374>)
    2f2c:	58d2      	ldr	r2, [r2, r3]
    2f2e:	2a00      	cmp	r2, #0
    2f30:	d062      	beq.n	2ff8 <nwkRxTaskHandler+0x28c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2f32:	1ca3      	adds	r3, r4, #2
    2f34:	7b67      	ldrb	r7, [r4, #13]
    2f36:	7ba0      	ldrb	r0, [r4, #14]
    2f38:	0200      	lsls	r0, r0, #8
    2f3a:	4338      	orrs	r0, r7
    2f3c:	4680      	mov	r8, r0
    2f3e:	466f      	mov	r7, sp
    2f40:	8038      	strh	r0, [r7, #0]
	ind.dstAddr = header->nwkDstAddr;
    2f42:	7be7      	ldrb	r7, [r4, #15]
    2f44:	7c20      	ldrb	r0, [r4, #16]
    2f46:	0200      	lsls	r0, r0, #8
    2f48:	4307      	orrs	r7, r0
    2f4a:	46b9      	mov	r9, r7
    2f4c:	1c38      	adds	r0, r7, #0
    2f4e:	466f      	mov	r7, sp
    2f50:	8078      	strh	r0, [r7, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2f52:	7c67      	ldrb	r7, [r4, #17]
    2f54:	073f      	lsls	r7, r7, #28
    2f56:	0f3f      	lsrs	r7, r7, #28
    2f58:	4668      	mov	r0, sp
    2f5a:	7107      	strb	r7, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    2f5c:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    2f5e:	2181      	movs	r1, #129	; 0x81
    2f60:	5c61      	ldrb	r1, [r4, r1]
    2f62:	2082      	movs	r0, #130	; 0x82
    2f64:	5c27      	ldrb	r7, [r4, r0]
    2f66:	023f      	lsls	r7, r7, #8
    2f68:	4339      	orrs	r1, r7
    2f6a:	2083      	movs	r0, #131	; 0x83
    2f6c:	5c27      	ldrb	r7, [r4, r0]
    2f6e:	043f      	lsls	r7, r7, #16
    2f70:	4339      	orrs	r1, r7
    2f72:	2084      	movs	r0, #132	; 0x84
    2f74:	5c27      	ldrb	r7, [r4, r0]
    2f76:	063f      	lsls	r7, r7, #24
    2f78:	4339      	orrs	r1, r7
    2f7a:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2f7c:	1a59      	subs	r1, r3, r1
    2f7e:	468c      	mov	ip, r1
    2f80:	7861      	ldrb	r1, [r4, #1]
    2f82:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2f84:	4668      	mov	r0, sp
    2f86:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2f88:	2185      	movs	r1, #133	; 0x85
    2f8a:	5c61      	ldrb	r1, [r4, r1]
    2f8c:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2f8e:	2186      	movs	r1, #134	; 0x86
    2f90:	5c61      	ldrb	r1, [r4, r1]
    2f92:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2f94:	7ae3      	ldrb	r3, [r4, #11]
    2f96:	07d9      	lsls	r1, r3, #31
    2f98:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2f9a:	2702      	movs	r7, #2
    2f9c:	403b      	ands	r3, r7
    2f9e:	430b      	orrs	r3, r1
    2fa0:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2fa2:	7ae1      	ldrb	r1, [r4, #11]
    2fa4:	0749      	lsls	r1, r1, #29
    2fa6:	0fc9      	lsrs	r1, r1, #31
    2fa8:	0149      	lsls	r1, r1, #5
    2faa:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2fac:	7ae1      	ldrb	r1, [r4, #11]
    2fae:	0709      	lsls	r1, r1, #28
    2fb0:	0fc9      	lsrs	r1, r1, #31
    2fb2:	0189      	lsls	r1, r1, #6
    2fb4:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2fb6:	4952      	ldr	r1, [pc, #328]	; (3100 <nwkRxTaskHandler+0x394>)
    2fb8:	1c0f      	adds	r7, r1, #0
    2fba:	444f      	add	r7, r9
    2fbc:	4279      	negs	r1, r7
    2fbe:	414f      	adcs	r7, r1
    2fc0:	00bf      	lsls	r7, r7, #2
    2fc2:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2fc4:	7a67      	ldrb	r7, [r4, #9]
    2fc6:	7aa1      	ldrb	r1, [r4, #10]
    2fc8:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2fca:	4339      	orrs	r1, r7
    2fcc:	4647      	mov	r7, r8
    2fce:	1a78      	subs	r0, r7, r1
    2fd0:	4241      	negs	r1, r0
    2fd2:	4148      	adcs	r0, r1
    2fd4:	00c0      	lsls	r0, r0, #3
    2fd6:	4303      	orrs	r3, r0
    2fd8:	4668      	mov	r0, sp
    2fda:	7183      	strb	r3, [r0, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2fdc:	7960      	ldrb	r0, [r4, #5]
    2fde:	79a1      	ldrb	r1, [r4, #6]
    2fe0:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2fe2:	4301      	orrs	r1, r0
    2fe4:	4f46      	ldr	r7, [pc, #280]	; (3100 <nwkRxTaskHandler+0x394>)
    2fe6:	19c9      	adds	r1, r1, r7
    2fe8:	4248      	negs	r0, r1
    2fea:	4141      	adcs	r1, r0
    2fec:	0109      	lsls	r1, r1, #4
    2fee:	430b      	orrs	r3, r1
    2ff0:	4668      	mov	r0, sp
    2ff2:	7183      	strb	r3, [r0, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2ff4:	4790      	blx	r2
    2ff6:	e000      	b.n	2ffa <nwkRxTaskHandler+0x28e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2ff8:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2ffa:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2ffc:	07db      	lsls	r3, r3, #31
    2ffe:	17db      	asrs	r3, r3, #31
    3000:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3002:	79e3      	ldrb	r3, [r4, #7]
    3004:	7a22      	ldrb	r2, [r4, #8]
    3006:	0212      	lsls	r2, r2, #8
    3008:	431a      	orrs	r2, r3
    300a:	4b34      	ldr	r3, [pc, #208]	; (30dc <nwkRxTaskHandler+0x370>)
    300c:	429a      	cmp	r2, r3
    300e:	d10b      	bne.n	3028 <nwkRxTaskHandler+0x2bc>
			nwkIb.addr == frame->header.nwkDstAddr &&
    3010:	7be1      	ldrb	r1, [r4, #15]
    3012:	7c23      	ldrb	r3, [r4, #16]
    3014:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    3016:	4a32      	ldr	r2, [pc, #200]	; (30e0 <nwkRxTaskHandler+0x374>)
    3018:	8812      	ldrh	r2, [r2, #0]
    301a:	430b      	orrs	r3, r1
    301c:	429a      	cmp	r2, r3
    301e:	d103      	bne.n	3028 <nwkRxTaskHandler+0x2bc>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    3020:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    3022:	0719      	lsls	r1, r3, #28
    3024:	d400      	bmi.n	3028 <nwkRxTaskHandler+0x2bc>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    3026:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    3028:	7963      	ldrb	r3, [r4, #5]
    302a:	79a2      	ldrb	r2, [r4, #6]
    302c:	0212      	lsls	r2, r2, #8
    302e:	431a      	orrs	r2, r3
    3030:	4b2a      	ldr	r3, [pc, #168]	; (30dc <nwkRxTaskHandler+0x370>)
    3032:	429a      	cmp	r2, r3
    3034:	d03c      	beq.n	30b0 <nwkRxTaskHandler+0x344>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    3036:	4b2a      	ldr	r3, [pc, #168]	; (30e0 <nwkRxTaskHandler+0x374>)
    3038:	881a      	ldrh	r2, [r3, #0]
    303a:	4b28      	ldr	r3, [pc, #160]	; (30dc <nwkRxTaskHandler+0x370>)
    303c:	429a      	cmp	r2, r3
    303e:	d037      	beq.n	30b0 <nwkRxTaskHandler+0x344>
		ack = false;
	}

	if (ack) {
    3040:	2800      	cmp	r0, #0
    3042:	d035      	beq.n	30b0 <nwkRxTaskHandler+0x344>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    3044:	4b2f      	ldr	r3, [pc, #188]	; (3104 <nwkRxTaskHandler+0x398>)
    3046:	4798      	blx	r3
    3048:	1e07      	subs	r7, r0, #0
    304a:	d031      	beq.n	30b0 <nwkRxTaskHandler+0x344>
		return;
	}

	nwkFrameCommandInit(ack);
    304c:	4b2e      	ldr	r3, [pc, #184]	; (3108 <nwkRxTaskHandler+0x39c>)
    304e:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    3050:	787b      	ldrb	r3, [r7, #1]
    3052:	3303      	adds	r3, #3
    3054:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    3056:	2200      	movs	r2, #0
    3058:	2389      	movs	r3, #137	; 0x89
    305a:	54fa      	strb	r2, [r7, r3]
    305c:	238a      	movs	r3, #138	; 0x8a
    305e:	54fa      	strb	r2, [r7, r3]
    3060:	238b      	movs	r3, #139	; 0x8b
    3062:	54fa      	strb	r2, [r7, r3]
    3064:	238c      	movs	r3, #140	; 0x8c
    3066:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    3068:	7ae2      	ldrb	r2, [r4, #11]
    306a:	2302      	movs	r3, #2
    306c:	401a      	ands	r2, r3
    306e:	7afb      	ldrb	r3, [r7, #11]
    3070:	2102      	movs	r1, #2
    3072:	438b      	bics	r3, r1
    3074:	4313      	orrs	r3, r2
    3076:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    3078:	7b62      	ldrb	r2, [r4, #13]
    307a:	7ba3      	ldrb	r3, [r4, #14]
    307c:	73fa      	strb	r2, [r7, #15]
    307e:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    3080:	2381      	movs	r3, #129	; 0x81
    3082:	5cfa      	ldrb	r2, [r7, r3]
    3084:	2382      	movs	r3, #130	; 0x82
    3086:	5cfb      	ldrb	r3, [r7, r3]
    3088:	021b      	lsls	r3, r3, #8
    308a:	4313      	orrs	r3, r2
    308c:	2283      	movs	r2, #131	; 0x83
    308e:	5cba      	ldrb	r2, [r7, r2]
    3090:	0412      	lsls	r2, r2, #16
    3092:	4313      	orrs	r3, r2
    3094:	2284      	movs	r2, #132	; 0x84
    3096:	5cba      	ldrb	r2, [r7, r2]
    3098:	0612      	lsls	r2, r2, #24
    309a:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    309c:	2200      	movs	r2, #0
    309e:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    30a0:	4a16      	ldr	r2, [pc, #88]	; (30fc <nwkRxTaskHandler+0x390>)
    30a2:	7812      	ldrb	r2, [r2, #0]
    30a4:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    30a6:	7b22      	ldrb	r2, [r4, #12]
    30a8:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    30aa:	1c38      	adds	r0, r7, #0
    30ac:	4b17      	ldr	r3, [pc, #92]	; (310c <nwkRxTaskHandler+0x3a0>)
    30ae:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    30b0:	2324      	movs	r3, #36	; 0x24
    30b2:	7023      	strb	r3, [r4, #0]
    30b4:	e006      	b.n	30c4 <nwkRxTaskHandler+0x358>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    30b6:	1c20      	adds	r0, r4, #0
    30b8:	4b15      	ldr	r3, [pc, #84]	; (3110 <nwkRxTaskHandler+0x3a4>)
    30ba:	4798      	blx	r3
		}
		break;
    30bc:	e002      	b.n	30c4 <nwkRxTaskHandler+0x358>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    30be:	1c20      	adds	r0, r4, #0
    30c0:	4b14      	ldr	r3, [pc, #80]	; (3114 <nwkRxTaskHandler+0x3a8>)
    30c2:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30c4:	1c20      	adds	r0, r4, #0
    30c6:	47a8      	blx	r5
    30c8:	1e04      	subs	r4, r0, #0
    30ca:	d000      	beq.n	30ce <nwkRxTaskHandler+0x362>
    30cc:	e65a      	b.n	2d84 <nwkRxTaskHandler+0x18>
    30ce:	e02c      	b.n	312a <nwkRxTaskHandler+0x3be>
    30d0:	00002419 	.word	0x00002419
    30d4:	20000ae8 	.word	0x20000ae8
    30d8:	00005094 	.word	0x00005094
    30dc:	0000ffff 	.word	0x0000ffff
    30e0:	20000dac 	.word	0x20000dac
    30e4:	000025b1 	.word	0x000025b1
    30e8:	00002599 	.word	0x00002599
    30ec:	20000c18 	.word	0x20000c18
    30f0:	00003c19 	.word	0x00003c19
    30f4:	00003565 	.word	0x00003565
    30f8:	00003169 	.word	0x00003169
    30fc:	20000c14 	.word	0x20000c14
    3100:	ffff0001 	.word	0xffff0001
    3104:	00002395 	.word	0x00002395
    3108:	00002459 	.word	0x00002459
    310c:	000034a5 	.word	0x000034a5
    3110:	00002699 	.word	0x00002699
    3114:	00002405 	.word	0x00002405
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3118:	79e1      	ldrb	r1, [r4, #7]
    311a:	7a22      	ldrb	r2, [r4, #8]
    311c:	0212      	lsls	r2, r2, #8
    311e:	430a      	orrs	r2, r1
    3120:	4b05      	ldr	r3, [pc, #20]	; (3138 <nwkRxTaskHandler+0x3cc>)
    3122:	429a      	cmp	r2, r3
    3124:	d000      	beq.n	3128 <nwkRxTaskHandler+0x3bc>
    3126:	e6d5      	b.n	2ed4 <nwkRxTaskHandler+0x168>
    3128:	e6c6      	b.n	2eb8 <nwkRxTaskHandler+0x14c>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    312a:	b004      	add	sp, #16
    312c:	bc1c      	pop	{r2, r3, r4}
    312e:	4690      	mov	r8, r2
    3130:	4699      	mov	r9, r3
    3132:	46a2      	mov	sl, r4
    3134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	0000ffff 	.word	0x0000ffff

0000313c <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    313c:	2300      	movs	r3, #0
    313e:	4a02      	ldr	r2, [pc, #8]	; (3148 <nwkSecurityInit+0xc>)
    3140:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    3142:	4a02      	ldr	r2, [pc, #8]	; (314c <nwkSecurityInit+0x10>)
    3144:	6013      	str	r3, [r2, #0]
}
    3146:	4770      	bx	lr
    3148:	20000c2c 	.word	0x20000c2c
    314c:	20000c30 	.word	0x20000c30

00003150 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    3150:	b508      	push	{r3, lr}
    3152:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    3154:	4802      	ldr	r0, [pc, #8]	; (3160 <NWK_SetSecurityKey+0x10>)
    3156:	2210      	movs	r2, #16
    3158:	4b02      	ldr	r3, [pc, #8]	; (3164 <NWK_SetSecurityKey+0x14>)
    315a:	4798      	blx	r3
}
    315c:	bd08      	pop	{r3, pc}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	20000df4 	.word	0x20000df4
    3164:	00004dfd 	.word	0x00004dfd

00003168 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    3168:	2900      	cmp	r1, #0
    316a:	d002      	beq.n	3172 <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    316c:	2330      	movs	r3, #48	; 0x30
    316e:	7003      	strb	r3, [r0, #0]
    3170:	e001      	b.n	3176 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    3172:	2331      	movs	r3, #49	; 0x31
    3174:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    3176:	4b02      	ldr	r3, [pc, #8]	; (3180 <nwkSecurityProcess+0x18>)
    3178:	781a      	ldrb	r2, [r3, #0]
    317a:	3201      	adds	r2, #1
    317c:	701a      	strb	r2, [r3, #0]
}
    317e:	4770      	bx	lr
    3180:	20000c2c 	.word	0x20000c2c

00003184 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    3184:	b5f0      	push	{r4, r5, r6, r7, lr}
    3186:	4647      	mov	r7, r8
    3188:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    318a:	4b24      	ldr	r3, [pc, #144]	; (321c <SYS_EncryptConf+0x98>)
    318c:	681e      	ldr	r6, [r3, #0]
    318e:	4b24      	ldr	r3, [pc, #144]	; (3220 <SYS_EncryptConf+0x9c>)
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	4698      	mov	r8, r3
    3194:	2381      	movs	r3, #129	; 0x81
    3196:	5cf3      	ldrb	r3, [r6, r3]
    3198:	2282      	movs	r2, #130	; 0x82
    319a:	5cb1      	ldrb	r1, [r6, r2]
    319c:	0209      	lsls	r1, r1, #8
    319e:	4319      	orrs	r1, r3
    31a0:	2383      	movs	r3, #131	; 0x83
    31a2:	5cf4      	ldrb	r4, [r6, r3]
    31a4:	0424      	lsls	r4, r4, #16
    31a6:	4321      	orrs	r1, r4
    31a8:	2384      	movs	r3, #132	; 0x84
    31aa:	5cf4      	ldrb	r4, [r6, r3]
    31ac:	0624      	lsls	r4, r4, #24
    31ae:	4321      	orrs	r1, r4
    31b0:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    31b2:	4b1c      	ldr	r3, [pc, #112]	; (3224 <SYS_EncryptConf+0xa0>)
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	469c      	mov	ip, r3
    31b8:	1c1f      	adds	r7, r3, #0
    31ba:	2b10      	cmp	r3, #16
    31bc:	d900      	bls.n	31c0 <SYS_EncryptConf+0x3c>
    31be:	2710      	movs	r7, #16
    31c0:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    31c2:	2f00      	cmp	r7, #0
    31c4:	d016      	beq.n	31f4 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    31c6:	4b18      	ldr	r3, [pc, #96]	; (3228 <SYS_EncryptConf+0xa4>)
    31c8:	781d      	ldrb	r5, [r3, #0]
    31ca:	1c0b      	adds	r3, r1, #0
    31cc:	4a17      	ldr	r2, [pc, #92]	; (322c <SYS_EncryptConf+0xa8>)
    31ce:	1e7c      	subs	r4, r7, #1
    31d0:	b2e4      	uxtb	r4, r4
    31d2:	190c      	adds	r4, r1, r4
    31d4:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    31d6:	7810      	ldrb	r0, [r2, #0]
    31d8:	7819      	ldrb	r1, [r3, #0]
    31da:	4041      	eors	r1, r0
    31dc:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    31de:	2d00      	cmp	r5, #0
    31e0:	d001      	beq.n	31e6 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    31e2:	7011      	strb	r1, [r2, #0]
    31e4:	e002      	b.n	31ec <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    31e6:	7810      	ldrb	r0, [r2, #0]
    31e8:	4041      	eors	r1, r0
    31ea:	7011      	strb	r1, [r2, #0]
    31ec:	3301      	adds	r3, #1
    31ee:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    31f0:	42a3      	cmp	r3, r4
    31f2:	d1f0      	bne.n	31d6 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    31f4:	4643      	mov	r3, r8
    31f6:	18fa      	adds	r2, r7, r3
    31f8:	4b09      	ldr	r3, [pc, #36]	; (3220 <SYS_EncryptConf+0x9c>)
    31fa:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    31fc:	4663      	mov	r3, ip
    31fe:	1bdf      	subs	r7, r3, r7
    3200:	b2ff      	uxtb	r7, r7
    3202:	4b08      	ldr	r3, [pc, #32]	; (3224 <SYS_EncryptConf+0xa0>)
    3204:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    3206:	2f00      	cmp	r7, #0
    3208:	d002      	beq.n	3210 <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    320a:	2332      	movs	r3, #50	; 0x32
    320c:	7033      	strb	r3, [r6, #0]
    320e:	e001      	b.n	3214 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    3210:	2334      	movs	r3, #52	; 0x34
    3212:	7033      	strb	r3, [r6, #0]
	}
}
    3214:	bc04      	pop	{r2}
    3216:	4690      	mov	r8, r2
    3218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	20000c30 	.word	0x20000c30
    3220:	20000c34 	.word	0x20000c34
    3224:	20000c35 	.word	0x20000c35
    3228:	20000c36 	.word	0x20000c36
    322c:	20000c38 	.word	0x20000c38

00003230 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    3230:	b530      	push	{r4, r5, lr}
    3232:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    3234:	4b56      	ldr	r3, [pc, #344]	; (3390 <nwkSecurityTaskHandler+0x160>)
    3236:	781b      	ldrb	r3, [r3, #0]
    3238:	2b00      	cmp	r3, #0
    323a:	d100      	bne.n	323e <nwkSecurityTaskHandler+0xe>
    323c:	e0a5      	b.n	338a <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    323e:	4b55      	ldr	r3, [pc, #340]	; (3394 <nwkSecurityTaskHandler+0x164>)
    3240:	681c      	ldr	r4, [r3, #0]
    3242:	2c00      	cmp	r4, #0
    3244:	d100      	bne.n	3248 <nwkSecurityTaskHandler+0x18>
    3246:	e09b      	b.n	3380 <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    3248:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    324a:	2b34      	cmp	r3, #52	; 0x34
    324c:	d145      	bne.n	32da <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    324e:	2381      	movs	r3, #129	; 0x81
    3250:	5ce3      	ldrb	r3, [r4, r3]
    3252:	2282      	movs	r2, #130	; 0x82
    3254:	5ca1      	ldrb	r1, [r4, r2]
    3256:	0209      	lsls	r1, r1, #8
    3258:	4319      	orrs	r1, r3
    325a:	2383      	movs	r3, #131	; 0x83
    325c:	5ce3      	ldrb	r3, [r4, r3]
    325e:	041b      	lsls	r3, r3, #16
    3260:	4319      	orrs	r1, r3
    3262:	2384      	movs	r3, #132	; 0x84
    3264:	5ce3      	ldrb	r3, [r4, r3]
    3266:	061b      	lsls	r3, r3, #24
    3268:	4319      	orrs	r1, r3
    326a:	4b4b      	ldr	r3, [pc, #300]	; (3398 <nwkSecurityTaskHandler+0x168>)
    326c:	781b      	ldrb	r3, [r3, #0]
    326e:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3270:	4b4a      	ldr	r3, [pc, #296]	; (339c <nwkSecurityTaskHandler+0x16c>)
    3272:	685d      	ldr	r5, [r3, #4]
    3274:	681a      	ldr	r2, [r3, #0]
    3276:	4055      	eors	r5, r2
    3278:	689a      	ldr	r2, [r3, #8]
    327a:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    327c:	68db      	ldr	r3, [r3, #12]
    327e:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3280:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    3282:	4b47      	ldr	r3, [pc, #284]	; (33a0 <nwkSecurityTaskHandler+0x170>)
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	2b00      	cmp	r3, #0
    3288:	d009      	beq.n	329e <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    328a:	1c08      	adds	r0, r1, #0
    328c:	4669      	mov	r1, sp
    328e:	2204      	movs	r2, #4
    3290:	4b44      	ldr	r3, [pc, #272]	; (33a4 <nwkSecurityTaskHandler+0x174>)
    3292:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    3294:	7863      	ldrb	r3, [r4, #1]
    3296:	3304      	adds	r3, #4
    3298:	7063      	strb	r3, [r4, #1]
		return true;
    329a:	2101      	movs	r1, #1
    329c:	e008      	b.n	32b0 <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    329e:	a801      	add	r0, sp, #4
    32a0:	2204      	movs	r2, #4
    32a2:	4b40      	ldr	r3, [pc, #256]	; (33a4 <nwkSecurityTaskHandler+0x174>)
    32a4:	4798      	blx	r3
		return vmic == tmic;
    32a6:	9b01      	ldr	r3, [sp, #4]
    32a8:	1ae9      	subs	r1, r5, r3
    32aa:	424d      	negs	r5, r1
    32ac:	4169      	adcs	r1, r5
    32ae:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    32b0:	4b3b      	ldr	r3, [pc, #236]	; (33a0 <nwkSecurityTaskHandler+0x170>)
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d004      	beq.n	32c2 <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    32b8:	4b36      	ldr	r3, [pc, #216]	; (3394 <nwkSecurityTaskHandler+0x164>)
    32ba:	6818      	ldr	r0, [r3, #0]
    32bc:	4b3a      	ldr	r3, [pc, #232]	; (33a8 <nwkSecurityTaskHandler+0x178>)
    32be:	4798      	blx	r3
    32c0:	e003      	b.n	32ca <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    32c2:	4b34      	ldr	r3, [pc, #208]	; (3394 <nwkSecurityTaskHandler+0x164>)
    32c4:	6818      	ldr	r0, [r3, #0]
    32c6:	4b39      	ldr	r3, [pc, #228]	; (33ac <nwkSecurityTaskHandler+0x17c>)
    32c8:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    32ca:	2200      	movs	r2, #0
    32cc:	4b31      	ldr	r3, [pc, #196]	; (3394 <nwkSecurityTaskHandler+0x164>)
    32ce:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    32d0:	4b2f      	ldr	r3, [pc, #188]	; (3390 <nwkSecurityTaskHandler+0x160>)
    32d2:	781a      	ldrb	r2, [r3, #0]
    32d4:	3a01      	subs	r2, #1
    32d6:	701a      	strb	r2, [r3, #0]
    32d8:	e057      	b.n	338a <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    32da:	2b32      	cmp	r3, #50	; 0x32
    32dc:	d155      	bne.n	338a <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    32de:	2333      	movs	r3, #51	; 0x33
    32e0:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    32e2:	482e      	ldr	r0, [pc, #184]	; (339c <nwkSecurityTaskHandler+0x16c>)
    32e4:	4932      	ldr	r1, [pc, #200]	; (33b0 <nwkSecurityTaskHandler+0x180>)
    32e6:	4b33      	ldr	r3, [pc, #204]	; (33b4 <nwkSecurityTaskHandler+0x184>)
    32e8:	4798      	blx	r3
    32ea:	e04e      	b.n	338a <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    32ec:	7803      	ldrb	r3, [r0, #0]
    32ee:	3b30      	subs	r3, #48	; 0x30
    32f0:	2b01      	cmp	r3, #1
    32f2:	d847      	bhi.n	3384 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    32f4:	4b27      	ldr	r3, [pc, #156]	; (3394 <nwkSecurityTaskHandler+0x164>)
    32f6:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    32f8:	4a28      	ldr	r2, [pc, #160]	; (339c <nwkSecurityTaskHandler+0x16c>)
    32fa:	7b01      	ldrb	r1, [r0, #12]
    32fc:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    32fe:	7bc1      	ldrb	r1, [r0, #15]
    3300:	7c04      	ldrb	r4, [r0, #16]
    3302:	0224      	lsls	r4, r4, #8
    3304:	430c      	orrs	r4, r1
    3306:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    3308:	7c41      	ldrb	r1, [r0, #17]
    330a:	0909      	lsrs	r1, r1, #4
    330c:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    330e:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3310:	7b41      	ldrb	r1, [r0, #13]
    3312:	7b84      	ldrb	r4, [r0, #14]
    3314:	0224      	lsls	r4, r4, #8
    3316:	430c      	orrs	r4, r1
    3318:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    331a:	7c41      	ldrb	r1, [r0, #17]
    331c:	0709      	lsls	r1, r1, #28
    331e:	0f09      	lsrs	r1, r1, #28
    3320:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3322:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    3324:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3326:	7944      	ldrb	r4, [r0, #5]
    3328:	7983      	ldrb	r3, [r0, #6]
    332a:	021b      	lsls	r3, r3, #8
    332c:	4323      	orrs	r3, r4
    332e:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    3330:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3332:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    3334:	7803      	ldrb	r3, [r0, #0]
    3336:	2b31      	cmp	r3, #49	; 0x31
    3338:	d102      	bne.n	3340 <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    333a:	7843      	ldrb	r3, [r0, #1]
    333c:	3b04      	subs	r3, #4
    333e:	7043      	strb	r3, [r0, #1]
    3340:	1c83      	adds	r3, r0, #2
    3342:	2281      	movs	r2, #129	; 0x81
    3344:	5c81      	ldrb	r1, [r0, r2]
    3346:	2282      	movs	r2, #130	; 0x82
    3348:	5c82      	ldrb	r2, [r0, r2]
    334a:	0212      	lsls	r2, r2, #8
    334c:	430a      	orrs	r2, r1
    334e:	2183      	movs	r1, #131	; 0x83
    3350:	5c41      	ldrb	r1, [r0, r1]
    3352:	0409      	lsls	r1, r1, #16
    3354:	430a      	orrs	r2, r1
    3356:	2184      	movs	r1, #132	; 0x84
    3358:	5c41      	ldrb	r1, [r0, r1]
    335a:	0609      	lsls	r1, r1, #24
    335c:	430a      	orrs	r2, r1
    335e:	1a9a      	subs	r2, r3, r2
    3360:	7843      	ldrb	r3, [r0, #1]
    3362:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    3364:	4b14      	ldr	r3, [pc, #80]	; (33b8 <nwkSecurityTaskHandler+0x188>)
    3366:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    3368:	2200      	movs	r2, #0
    336a:	4b0b      	ldr	r3, [pc, #44]	; (3398 <nwkSecurityTaskHandler+0x168>)
    336c:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    336e:	7802      	ldrb	r2, [r0, #0]
    3370:	3a30      	subs	r2, #48	; 0x30
    3372:	4253      	negs	r3, r2
    3374:	415a      	adcs	r2, r3
    3376:	4b0a      	ldr	r3, [pc, #40]	; (33a0 <nwkSecurityTaskHandler+0x170>)
    3378:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    337a:	2332      	movs	r3, #50	; 0x32
    337c:	7003      	strb	r3, [r0, #0]
    337e:	e004      	b.n	338a <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    3380:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3382:	4c0e      	ldr	r4, [pc, #56]	; (33bc <nwkSecurityTaskHandler+0x18c>)
    3384:	47a0      	blx	r4
    3386:	2800      	cmp	r0, #0
    3388:	d1b0      	bne.n	32ec <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    338a:	b003      	add	sp, #12
    338c:	bd30      	pop	{r4, r5, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	20000c2c 	.word	0x20000c2c
    3394:	20000c30 	.word	0x20000c30
    3398:	20000c34 	.word	0x20000c34
    339c:	20000c38 	.word	0x20000c38
    33a0:	20000c36 	.word	0x20000c36
    33a4:	00004dfd 	.word	0x00004dfd
    33a8:	00003639 	.word	0x00003639
    33ac:	00002d5d 	.word	0x00002d5d
    33b0:	20000df4 	.word	0x20000df4
    33b4:	00003ad9 	.word	0x00003ad9
    33b8:	20000c35 	.word	0x20000c35
    33bc:	00002419 	.word	0x00002419

000033c0 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    33c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33c2:	4647      	mov	r7, r8
    33c4:	b480      	push	{r7}
    33c6:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    33c8:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    33ca:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33cc:	4c0f      	ldr	r4, [pc, #60]	; (340c <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    33ce:	2686      	movs	r6, #134	; 0x86
    33d0:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33d2:	e010      	b.n	33f6 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    33d4:	7803      	ldrb	r3, [r0, #0]
    33d6:	2b11      	cmp	r3, #17
    33d8:	d10d      	bne.n	33f6 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    33da:	5d82      	ldrb	r2, [r0, r6]
    33dc:	5d43      	ldrb	r3, [r0, r5]
    33de:	021b      	lsls	r3, r3, #8
    33e0:	4313      	orrs	r3, r2
    33e2:	3b01      	subs	r3, #1
    33e4:	b29b      	uxth	r3, r3
    33e6:	5583      	strb	r3, [r0, r6]
    33e8:	0a1a      	lsrs	r2, r3, #8
    33ea:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    33ec:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    33ee:	2b00      	cmp	r3, #0
    33f0:	d101      	bne.n	33f6 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    33f2:	2313      	movs	r3, #19
    33f4:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33f6:	47a0      	blx	r4
    33f8:	2800      	cmp	r0, #0
    33fa:	d1eb      	bne.n	33d4 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    33fc:	2f00      	cmp	r7, #0
    33fe:	d002      	beq.n	3406 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    3400:	4640      	mov	r0, r8
    3402:	4b03      	ldr	r3, [pc, #12]	; (3410 <nwkTxDelayTimerHandler+0x50>)
    3404:	4798      	blx	r3
	}
}
    3406:	bc04      	pop	{r2}
    3408:	4690      	mov	r8, r2
    340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    340c:	00002419 	.word	0x00002419
    3410:	00003c19 	.word	0x00003c19

00003414 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    3414:	b5f0      	push	{r4, r5, r6, r7, lr}
    3416:	4647      	mov	r7, r8
    3418:	b480      	push	{r7}
    341a:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    341c:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    341e:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3420:	4c11      	ldr	r4, [pc, #68]	; (3468 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3422:	2686      	movs	r6, #134	; 0x86
    3424:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3426:	e013      	b.n	3450 <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    3428:	7803      	ldrb	r3, [r0, #0]
    342a:	2b16      	cmp	r3, #22
    342c:	d110      	bne.n	3450 <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    342e:	5d82      	ldrb	r2, [r0, r6]
    3430:	5d43      	ldrb	r3, [r0, r5]
    3432:	021b      	lsls	r3, r3, #8
    3434:	4313      	orrs	r3, r2
    3436:	3b01      	subs	r3, #1
    3438:	b29b      	uxth	r3, r3
    343a:	5583      	strb	r3, [r0, r6]
    343c:	0a1a      	lsrs	r2, r3, #8
    343e:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    3440:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    3442:	2b00      	cmp	r3, #0
    3444:	d104      	bne.n	3450 <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    3446:	2317      	movs	r3, #23
    3448:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    344a:	2210      	movs	r2, #16
    344c:	2385      	movs	r3, #133	; 0x85
    344e:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3450:	47a0      	blx	r4
    3452:	2800      	cmp	r0, #0
    3454:	d1e8      	bne.n	3428 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    3456:	2f00      	cmp	r7, #0
    3458:	d002      	beq.n	3460 <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    345a:	4640      	mov	r0, r8
    345c:	4b03      	ldr	r3, [pc, #12]	; (346c <nwkTxAckWaitTimerHandler+0x58>)
    345e:	4798      	blx	r3
	}
}
    3460:	bc04      	pop	{r2}
    3462:	4690      	mov	r8, r2
    3464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	00002419 	.word	0x00002419
    346c:	00003c19 	.word	0x00003c19

00003470 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    3470:	2200      	movs	r2, #0
    3472:	4b07      	ldr	r3, [pc, #28]	; (3490 <nwkTxInit+0x20>)
    3474:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    3476:	4b07      	ldr	r3, [pc, #28]	; (3494 <nwkTxInit+0x24>)
    3478:	2132      	movs	r1, #50	; 0x32
    347a:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    347c:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    347e:	4906      	ldr	r1, [pc, #24]	; (3498 <nwkTxInit+0x28>)
    3480:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3482:	4b06      	ldr	r3, [pc, #24]	; (349c <nwkTxInit+0x2c>)
    3484:	210a      	movs	r1, #10
    3486:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3488:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    348a:	4a05      	ldr	r2, [pc, #20]	; (34a0 <nwkTxInit+0x30>)
    348c:	611a      	str	r2, [r3, #16]
}
    348e:	4770      	bx	lr
    3490:	20000c5c 	.word	0x20000c5c
    3494:	20000c48 	.word	0x20000c48
    3498:	00003415 	.word	0x00003415
    349c:	20000c60 	.word	0x20000c60
    34a0:	000033c1 	.word	0x000033c1

000034a4 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    34a4:	b510      	push	{r4, lr}
    34a6:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    34a8:	2388      	movs	r3, #136	; 0x88
    34aa:	5cc3      	ldrb	r3, [r0, r3]
    34ac:	0799      	lsls	r1, r3, #30
    34ae:	d502      	bpl.n	34b6 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    34b0:	2212      	movs	r2, #18
    34b2:	7002      	strb	r2, [r0, #0]
    34b4:	e007      	b.n	34c6 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    34b6:	7ac2      	ldrb	r2, [r0, #11]
    34b8:	0791      	lsls	r1, r2, #30
    34ba:	d502      	bpl.n	34c2 <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    34bc:	2210      	movs	r2, #16
    34be:	7002      	strb	r2, [r0, #0]
    34c0:	e001      	b.n	34c6 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    34c2:	2212      	movs	r2, #18
    34c4:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    34c6:	2100      	movs	r1, #0
    34c8:	2285      	movs	r2, #133	; 0x85
    34ca:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    34cc:	07da      	lsls	r2, r3, #31
    34ce:	d504      	bpl.n	34da <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    34d0:	2101      	movs	r1, #1
    34d2:	4249      	negs	r1, r1
    34d4:	7161      	strb	r1, [r4, #5]
    34d6:	71a1      	strb	r1, [r4, #6]
    34d8:	e004      	b.n	34e4 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    34da:	491e      	ldr	r1, [pc, #120]	; (3554 <nwkTxFrame+0xb0>)
    34dc:	7888      	ldrb	r0, [r1, #2]
    34de:	7160      	strb	r0, [r4, #5]
    34e0:	78c9      	ldrb	r1, [r1, #3]
    34e2:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    34e4:	2205      	movs	r2, #5
    34e6:	421a      	tst	r2, r3
    34e8:	d103      	bne.n	34f2 <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    34ea:	1c20      	adds	r0, r4, #0
    34ec:	4b1a      	ldr	r3, [pc, #104]	; (3558 <nwkTxFrame+0xb4>)
    34ee:	4798      	blx	r3
    34f0:	e003      	b.n	34fa <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    34f2:	7be1      	ldrb	r1, [r4, #15]
    34f4:	7c22      	ldrb	r2, [r4, #16]
    34f6:	71e1      	strb	r1, [r4, #7]
    34f8:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    34fa:	4a16      	ldr	r2, [pc, #88]	; (3554 <nwkTxFrame+0xb0>)
    34fc:	7811      	ldrb	r1, [r2, #0]
    34fe:	7261      	strb	r1, [r4, #9]
    3500:	7851      	ldrb	r1, [r2, #1]
    3502:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    3504:	7951      	ldrb	r1, [r2, #5]
    3506:	3101      	adds	r1, #1
    3508:	b2c9      	uxtb	r1, r1
    350a:	7151      	strb	r1, [r2, #5]
    350c:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    350e:	79e1      	ldrb	r1, [r4, #7]
    3510:	7a22      	ldrb	r2, [r4, #8]
    3512:	0212      	lsls	r2, r2, #8
    3514:	430a      	orrs	r2, r1
    3516:	4b11      	ldr	r3, [pc, #68]	; (355c <nwkTxFrame+0xb8>)
    3518:	429a      	cmp	r2, r3
    351a:	d110      	bne.n	353e <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    351c:	2341      	movs	r3, #65	; 0x41
    351e:	70a3      	strb	r3, [r4, #2]
    3520:	2378      	movs	r3, #120	; 0x78
    3522:	425b      	negs	r3, r3
    3524:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3526:	4b0e      	ldr	r3, [pc, #56]	; (3560 <nwkTxFrame+0xbc>)
    3528:	4798      	blx	r3
    352a:	2307      	movs	r3, #7
    352c:	4018      	ands	r0, r3
    352e:	3001      	adds	r0, #1
    3530:	2386      	movs	r3, #134	; 0x86
    3532:	54e0      	strb	r0, [r4, r3]
    3534:	0a00      	lsrs	r0, r0, #8
    3536:	b280      	uxth	r0, r0
    3538:	2387      	movs	r3, #135	; 0x87
    353a:	54e0      	strb	r0, [r4, r3]
    353c:	e009      	b.n	3552 <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    353e:	2361      	movs	r3, #97	; 0x61
    3540:	70a3      	strb	r3, [r4, #2]
    3542:	2378      	movs	r3, #120	; 0x78
    3544:	425b      	negs	r3, r3
    3546:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    3548:	2200      	movs	r2, #0
    354a:	2386      	movs	r3, #134	; 0x86
    354c:	54e2      	strb	r2, [r4, r3]
    354e:	2387      	movs	r3, #135	; 0x87
    3550:	54e2      	strb	r2, [r4, r3]
	}
}
    3552:	bd10      	pop	{r4, pc}
    3554:	20000dac 	.word	0x20000dac
    3558:	00002645 	.word	0x00002645
    355c:	0000ffff 	.word	0x0000ffff
    3560:	00004e81 	.word	0x00004e81

00003564 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3564:	b538      	push	{r3, r4, r5, lr}
    3566:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    3568:	4b1d      	ldr	r3, [pc, #116]	; (35e0 <nwkTxBroadcastFrame+0x7c>)
    356a:	4798      	blx	r3
    356c:	1e04      	subs	r4, r0, #0
    356e:	d036      	beq.n	35de <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    3570:	2312      	movs	r3, #18
    3572:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3574:	786b      	ldrb	r3, [r5, #1]
    3576:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    3578:	2200      	movs	r2, #0
    357a:	2385      	movs	r3, #133	; 0x85
    357c:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    357e:	4b19      	ldr	r3, [pc, #100]	; (35e4 <nwkTxBroadcastFrame+0x80>)
    3580:	4798      	blx	r3
    3582:	2307      	movs	r3, #7
    3584:	4018      	ands	r0, r3
    3586:	3001      	adds	r0, #1
    3588:	2386      	movs	r3, #134	; 0x86
    358a:	54e0      	strb	r0, [r4, r3]
    358c:	0a00      	lsrs	r0, r0, #8
    358e:	b280      	uxth	r0, r0
    3590:	2387      	movs	r3, #135	; 0x87
    3592:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    3594:	2200      	movs	r2, #0
    3596:	2389      	movs	r3, #137	; 0x89
    3598:	54e2      	strb	r2, [r4, r3]
    359a:	238a      	movs	r3, #138	; 0x8a
    359c:	54e2      	strb	r2, [r4, r3]
    359e:	238b      	movs	r3, #139	; 0x8b
    35a0:	54e2      	strb	r2, [r4, r3]
    35a2:	238c      	movs	r3, #140	; 0x8c
    35a4:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    35a6:	1ca0      	adds	r0, r4, #2
    35a8:	786a      	ldrb	r2, [r5, #1]
    35aa:	1ca9      	adds	r1, r5, #2
    35ac:	4b0e      	ldr	r3, [pc, #56]	; (35e8 <nwkTxBroadcastFrame+0x84>)
    35ae:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    35b0:	2341      	movs	r3, #65	; 0x41
    35b2:	70a3      	strb	r3, [r4, #2]
    35b4:	2378      	movs	r3, #120	; 0x78
    35b6:	425b      	negs	r3, r3
    35b8:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    35ba:	2301      	movs	r3, #1
    35bc:	425b      	negs	r3, r3
    35be:	71e3      	strb	r3, [r4, #7]
    35c0:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    35c2:	796a      	ldrb	r2, [r5, #5]
    35c4:	79ab      	ldrb	r3, [r5, #6]
    35c6:	7162      	strb	r2, [r4, #5]
    35c8:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    35ca:	4b08      	ldr	r3, [pc, #32]	; (35ec <nwkTxBroadcastFrame+0x88>)
    35cc:	781a      	ldrb	r2, [r3, #0]
    35ce:	7262      	strb	r2, [r4, #9]
    35d0:	785a      	ldrb	r2, [r3, #1]
    35d2:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    35d4:	795a      	ldrb	r2, [r3, #5]
    35d6:	3201      	adds	r2, #1
    35d8:	b2d2      	uxtb	r2, r2
    35da:	715a      	strb	r2, [r3, #5]
    35dc:	7122      	strb	r2, [r4, #4]
}
    35de:	bd38      	pop	{r3, r4, r5, pc}
    35e0:	00002395 	.word	0x00002395
    35e4:	00004e81 	.word	0x00004e81
    35e8:	00004dfd 	.word	0x00004dfd
    35ec:	20000dac 	.word	0x20000dac

000035f0 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    35f0:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    35f2:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    35f4:	7b03      	ldrb	r3, [r0, #12]
		return false;
    35f6:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    35f8:	2b03      	cmp	r3, #3
    35fa:	d113      	bne.n	3624 <nwkTxAckReceived+0x34>
    35fc:	e00d      	b.n	361a <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    35fe:	7803      	ldrb	r3, [r0, #0]
    3600:	2b16      	cmp	r3, #22
    3602:	d10c      	bne.n	361e <nwkTxAckReceived+0x2e>
    3604:	7b02      	ldrb	r2, [r0, #12]
    3606:	786b      	ldrb	r3, [r5, #1]
    3608:	429a      	cmp	r2, r3
    360a:	d108      	bne.n	361e <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    360c:	2317      	movs	r3, #23
    360e:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    3610:	78aa      	ldrb	r2, [r5, #2]
    3612:	2388      	movs	r3, #136	; 0x88
    3614:	54c2      	strb	r2, [r0, r3]
			return true;
    3616:	2001      	movs	r0, #1
    3618:	e004      	b.n	3624 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    361a:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    361c:	4c02      	ldr	r4, [pc, #8]	; (3628 <nwkTxAckReceived+0x38>)
    361e:	47a0      	blx	r4
    3620:	2800      	cmp	r0, #0
    3622:	d1ec      	bne.n	35fe <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    3624:	bd38      	pop	{r3, r4, r5, pc}
    3626:	46c0      	nop			; (mov r8, r8)
    3628:	00002419 	.word	0x00002419

0000362c <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    362c:	2317      	movs	r3, #23
    362e:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    3630:	2385      	movs	r3, #133	; 0x85
    3632:	54c1      	strb	r1, [r0, r3]
}
    3634:	4770      	bx	lr
    3636:	46c0      	nop			; (mov r8, r8)

00003638 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    3638:	2312      	movs	r3, #18
    363a:	7003      	strb	r3, [r0, #0]
}
    363c:	4770      	bx	lr
    363e:	46c0      	nop			; (mov r8, r8)

00003640 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3640:	4b0d      	ldr	r3, [pc, #52]	; (3678 <PHY_DataConf+0x38>)
    3642:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3644:	2801      	cmp	r0, #1
    3646:	d009      	beq.n	365c <PHY_DataConf+0x1c>
    3648:	2800      	cmp	r0, #0
    364a:	d003      	beq.n	3654 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    364c:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    364e:	2802      	cmp	r0, #2
    3650:	d005      	beq.n	365e <PHY_DataConf+0x1e>
    3652:	e001      	b.n	3658 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    3654:	2200      	movs	r2, #0
    3656:	e002      	b.n	365e <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    3658:	2201      	movs	r2, #1
    365a:	e000      	b.n	365e <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    365c:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    365e:	2185      	movs	r1, #133	; 0x85
    3660:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    3662:	2215      	movs	r2, #21
    3664:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    3666:	2200      	movs	r2, #0
    3668:	4b03      	ldr	r3, [pc, #12]	; (3678 <PHY_DataConf+0x38>)
    366a:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    366c:	4a03      	ldr	r2, [pc, #12]	; (367c <PHY_DataConf+0x3c>)
    366e:	2358      	movs	r3, #88	; 0x58
    3670:	5ad1      	ldrh	r1, [r2, r3]
    3672:	3901      	subs	r1, #1
    3674:	52d1      	strh	r1, [r2, r3]
}
    3676:	4770      	bx	lr
    3678:	20000c5c 	.word	0x20000c5c
    367c:	20000dac 	.word	0x20000dac

00003680 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3680:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    3682:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    3684:	4d37      	ldr	r5, [pc, #220]	; (3764 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    3686:	4e38      	ldr	r6, [pc, #224]	; (3768 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3688:	e066      	b.n	3758 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    368a:	7823      	ldrb	r3, [r4, #0]
    368c:	3b10      	subs	r3, #16
    368e:	b2da      	uxtb	r2, r3
    3690:	2a07      	cmp	r2, #7
    3692:	d861      	bhi.n	3758 <nwkTxTaskHandler+0xd8>
    3694:	0093      	lsls	r3, r2, #2
    3696:	58f3      	ldr	r3, [r6, r3]
    3698:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    369a:	1c20      	adds	r0, r4, #0
    369c:	2101      	movs	r1, #1
    369e:	4b33      	ldr	r3, [pc, #204]	; (376c <nwkTxTaskHandler+0xec>)
    36a0:	4798      	blx	r3
		}
		break;
    36a2:	e059      	b.n	3758 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    36a4:	2386      	movs	r3, #134	; 0x86
    36a6:	5ce2      	ldrb	r2, [r4, r3]
    36a8:	2387      	movs	r3, #135	; 0x87
    36aa:	5ce3      	ldrb	r3, [r4, r3]
    36ac:	021b      	lsls	r3, r3, #8
    36ae:	4313      	orrs	r3, r2
    36b0:	d005      	beq.n	36be <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    36b2:	2311      	movs	r3, #17
    36b4:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    36b6:	482e      	ldr	r0, [pc, #184]	; (3770 <nwkTxTaskHandler+0xf0>)
    36b8:	4b2e      	ldr	r3, [pc, #184]	; (3774 <nwkTxTaskHandler+0xf4>)
    36ba:	4798      	blx	r3
    36bc:	e04c      	b.n	3758 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    36be:	2313      	movs	r3, #19
    36c0:	7023      	strb	r3, [r4, #0]
    36c2:	e049      	b.n	3758 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    36c4:	4b2c      	ldr	r3, [pc, #176]	; (3778 <nwkTxTaskHandler+0xf8>)
    36c6:	681b      	ldr	r3, [r3, #0]
    36c8:	2b00      	cmp	r3, #0
    36ca:	d145      	bne.n	3758 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    36cc:	4b2a      	ldr	r3, [pc, #168]	; (3778 <nwkTxTaskHandler+0xf8>)
    36ce:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    36d0:	2314      	movs	r3, #20
    36d2:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    36d4:	1c60      	adds	r0, r4, #1
    36d6:	4b29      	ldr	r3, [pc, #164]	; (377c <nwkTxTaskHandler+0xfc>)
    36d8:	4798      	blx	r3
				nwkIb.lock++;
    36da:	4a29      	ldr	r2, [pc, #164]	; (3780 <nwkTxTaskHandler+0x100>)
    36dc:	2358      	movs	r3, #88	; 0x58
    36de:	5ad1      	ldrh	r1, [r2, r3]
    36e0:	3101      	adds	r1, #1
    36e2:	52d1      	strh	r1, [r2, r3]
    36e4:	e038      	b.n	3758 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    36e6:	2385      	movs	r3, #133	; 0x85
    36e8:	5ce3      	ldrb	r3, [r4, r3]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d119      	bne.n	3722 <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    36ee:	7b61      	ldrb	r1, [r4, #13]
    36f0:	7ba3      	ldrb	r3, [r4, #14]
    36f2:	021b      	lsls	r3, r3, #8
    36f4:	4a22      	ldr	r2, [pc, #136]	; (3780 <nwkTxTaskHandler+0x100>)
    36f6:	8812      	ldrh	r2, [r2, #0]
    36f8:	430b      	orrs	r3, r1
    36fa:	429a      	cmp	r2, r3
    36fc:	d10e      	bne.n	371c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    36fe:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    3700:	07da      	lsls	r2, r3, #31
    3702:	d50b      	bpl.n	371c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    3704:	2316      	movs	r3, #22
    3706:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    3708:	2215      	movs	r2, #21
    370a:	2386      	movs	r3, #134	; 0x86
    370c:	54e2      	strb	r2, [r4, r3]
    370e:	2200      	movs	r2, #0
    3710:	2387      	movs	r3, #135	; 0x87
    3712:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    3714:	481b      	ldr	r0, [pc, #108]	; (3784 <nwkTxTaskHandler+0x104>)
    3716:	4b17      	ldr	r3, [pc, #92]	; (3774 <nwkTxTaskHandler+0xf4>)
    3718:	4798      	blx	r3
    371a:	e01d      	b.n	3758 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    371c:	2317      	movs	r3, #23
    371e:	7023      	strb	r3, [r4, #0]
    3720:	e01a      	b.n	3758 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    3722:	2317      	movs	r3, #23
    3724:	7023      	strb	r3, [r4, #0]
    3726:	e017      	b.n	3758 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3728:	1c20      	adds	r0, r4, #0
    372a:	4b17      	ldr	r3, [pc, #92]	; (3788 <nwkTxTaskHandler+0x108>)
    372c:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    372e:	2389      	movs	r3, #137	; 0x89
    3730:	5ce2      	ldrb	r2, [r4, r3]
    3732:	238a      	movs	r3, #138	; 0x8a
    3734:	5ce3      	ldrb	r3, [r4, r3]
    3736:	021b      	lsls	r3, r3, #8
    3738:	4313      	orrs	r3, r2
    373a:	228b      	movs	r2, #139	; 0x8b
    373c:	5ca2      	ldrb	r2, [r4, r2]
    373e:	0412      	lsls	r2, r2, #16
    3740:	4313      	orrs	r3, r2
    3742:	228c      	movs	r2, #140	; 0x8c
    3744:	5ca2      	ldrb	r2, [r4, r2]
    3746:	0612      	lsls	r2, r2, #24
    3748:	4313      	orrs	r3, r2
    374a:	d103      	bne.n	3754 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    374c:	1c20      	adds	r0, r4, #0
    374e:	4b0f      	ldr	r3, [pc, #60]	; (378c <nwkTxTaskHandler+0x10c>)
    3750:	4798      	blx	r3
    3752:	e001      	b.n	3758 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    3754:	1c20      	adds	r0, r4, #0
    3756:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3758:	1c20      	adds	r0, r4, #0
    375a:	47a8      	blx	r5
    375c:	1e04      	subs	r4, r0, #0
    375e:	d194      	bne.n	368a <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    3760:	bd70      	pop	{r4, r5, r6, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	00002419 	.word	0x00002419
    3768:	000050a8 	.word	0x000050a8
    376c:	00003169 	.word	0x00003169
    3770:	20000c60 	.word	0x20000c60
    3774:	00003c19 	.word	0x00003c19
    3778:	20000c5c 	.word	0x20000c5c
    377c:	00003919 	.word	0x00003919
    3780:	20000dac 	.word	0x20000dac
    3784:	20000c48 	.word	0x20000c48
    3788:	000025b5 	.word	0x000025b5
    378c:	00002405 	.word	0x00002405

00003790 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3792:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3794:	4f0b      	ldr	r7, [pc, #44]	; (37c4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3796:	4e0c      	ldr	r6, [pc, #48]	; (37c8 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3798:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    379a:	2002      	movs	r0, #2
    379c:	2103      	movs	r1, #3
    379e:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37a0:	2001      	movs	r0, #1
    37a2:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    37a4:	4028      	ands	r0, r5
    37a6:	2808      	cmp	r0, #8
    37a8:	d1f7      	bne.n	379a <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    37aa:	4f06      	ldr	r7, [pc, #24]	; (37c4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37ac:	4e06      	ldr	r6, [pc, #24]	; (37c8 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    37ae:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    37b0:	2002      	movs	r0, #2
    37b2:	1c21      	adds	r1, r4, #0
    37b4:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37b6:	2001      	movs	r0, #1
    37b8:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    37ba:	4028      	ands	r0, r5
    37bc:	4284      	cmp	r4, r0
    37be:	d1f7      	bne.n	37b0 <phyTrxSetState+0x20>
}
    37c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	000042e9 	.word	0x000042e9
    37c8:	000041f1 	.word	0x000041f1

000037cc <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    37cc:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    37ce:	2008      	movs	r0, #8
    37d0:	4b06      	ldr	r3, [pc, #24]	; (37ec <phySetRxState+0x20>)
    37d2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37d4:	200f      	movs	r0, #15
    37d6:	4b06      	ldr	r3, [pc, #24]	; (37f0 <phySetRxState+0x24>)
    37d8:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    37da:	4b06      	ldr	r3, [pc, #24]	; (37f4 <phySetRxState+0x28>)
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	2b00      	cmp	r3, #0
    37e0:	d002      	beq.n	37e8 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    37e2:	2016      	movs	r0, #22
    37e4:	4b01      	ldr	r3, [pc, #4]	; (37ec <phySetRxState+0x20>)
    37e6:	4798      	blx	r3
	}
}
    37e8:	bd08      	pop	{r3, pc}
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	00003791 	.word	0x00003791
    37f0:	000041f1 	.word	0x000041f1
    37f4:	20000cf5 	.word	0x20000cf5

000037f8 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    37f8:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    37fa:	4b0e      	ldr	r3, [pc, #56]	; (3834 <PHY_Init+0x3c>)
    37fc:	4798      	blx	r3
	PhyReset();
    37fe:	4b0e      	ldr	r3, [pc, #56]	; (3838 <PHY_Init+0x40>)
    3800:	4798      	blx	r3
	phyRxState = false;
    3802:	2200      	movs	r2, #0
    3804:	4b0d      	ldr	r3, [pc, #52]	; (383c <PHY_Init+0x44>)
    3806:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    3808:	2201      	movs	r2, #1
    380a:	4b0d      	ldr	r3, [pc, #52]	; (3840 <PHY_Init+0x48>)
    380c:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    380e:	4e0d      	ldr	r6, [pc, #52]	; (3844 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3810:	4d0d      	ldr	r5, [pc, #52]	; (3848 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3812:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3814:	2002      	movs	r0, #2
    3816:	2108      	movs	r1, #8
    3818:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    381a:	2001      	movs	r0, #1
    381c:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    381e:	4020      	ands	r0, r4
    3820:	2808      	cmp	r0, #8
    3822:	d1f7      	bne.n	3814 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3824:	2004      	movs	r0, #4
    3826:	212e      	movs	r1, #46	; 0x2e
    3828:	4c06      	ldr	r4, [pc, #24]	; (3844 <PHY_Init+0x4c>)
    382a:	47a0      	blx	r4
    382c:	200c      	movs	r0, #12
    382e:	21a0      	movs	r1, #160	; 0xa0
    3830:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    3832:	bd70      	pop	{r4, r5, r6, pc}
    3834:	000040b1 	.word	0x000040b1
    3838:	000041c1 	.word	0x000041c1
    383c:	20000cf5 	.word	0x20000cf5
    3840:	20000cf4 	.word	0x20000cf4
    3844:	000042e9 	.word	0x000042e9
    3848:	000041f1 	.word	0x000041f1

0000384c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    384c:	b508      	push	{r3, lr}
	phyRxState = rx;
    384e:	4b02      	ldr	r3, [pc, #8]	; (3858 <PHY_SetRxState+0xc>)
    3850:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    3852:	4b02      	ldr	r3, [pc, #8]	; (385c <PHY_SetRxState+0x10>)
    3854:	4798      	blx	r3
}
    3856:	bd08      	pop	{r3, pc}
    3858:	20000cf5 	.word	0x20000cf5
    385c:	000037cd 	.word	0x000037cd

00003860 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    3860:	b510      	push	{r4, lr}
    3862:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3864:	2008      	movs	r0, #8
    3866:	4b05      	ldr	r3, [pc, #20]	; (387c <PHY_SetChannel+0x1c>)
    3868:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    386a:	231f      	movs	r3, #31
    386c:	1c01      	adds	r1, r0, #0
    386e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    3870:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3872:	b2e1      	uxtb	r1, r4
    3874:	2008      	movs	r0, #8
    3876:	4b02      	ldr	r3, [pc, #8]	; (3880 <PHY_SetChannel+0x20>)
    3878:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    387a:	bd10      	pop	{r4, pc}
    387c:	000041f1 	.word	0x000041f1
    3880:	000042e9 	.word	0x000042e9

00003884 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    3884:	b530      	push	{r4, r5, lr}
    3886:	b083      	sub	sp, #12
    3888:	466c      	mov	r4, sp
    388a:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    388c:	b2c1      	uxtb	r1, r0
    388e:	2022      	movs	r0, #34	; 0x22
    3890:	4d03      	ldr	r5, [pc, #12]	; (38a0 <PHY_SetPanId+0x1c>)
    3892:	47a8      	blx	r5
    3894:	79e1      	ldrb	r1, [r4, #7]
    3896:	2023      	movs	r0, #35	; 0x23
    3898:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    389a:	b003      	add	sp, #12
    389c:	bd30      	pop	{r4, r5, pc}
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	000042e9 	.word	0x000042e9

000038a4 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    38a4:	b570      	push	{r4, r5, r6, lr}
    38a6:	b082      	sub	sp, #8
    38a8:	466d      	mov	r5, sp
    38aa:	80e8      	strh	r0, [r5, #6]
    38ac:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    38ae:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    38b0:	2020      	movs	r0, #32
    38b2:	1c31      	adds	r1, r6, #0
    38b4:	4c05      	ldr	r4, [pc, #20]	; (38cc <PHY_SetShortAddr+0x28>)
    38b6:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    38b8:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    38ba:	2021      	movs	r0, #33	; 0x21
    38bc:	1c29      	adds	r1, r5, #0
    38be:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    38c0:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    38c2:	b2f1      	uxtb	r1, r6
    38c4:	202d      	movs	r0, #45	; 0x2d
    38c6:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    38c8:	b002      	add	sp, #8
    38ca:	bd70      	pop	{r4, r5, r6, pc}
    38cc:	000042e9 	.word	0x000042e9

000038d0 <PHY_Sleep>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
    38d0:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    38d2:	2008      	movs	r0, #8
    38d4:	4b04      	ldr	r3, [pc, #16]	; (38e8 <PHY_Sleep+0x18>)
    38d6:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    38d8:	2280      	movs	r2, #128	; 0x80
    38da:	0352      	lsls	r2, r2, #13
    38dc:	4b03      	ldr	r3, [pc, #12]	; (38ec <PHY_Sleep+0x1c>)
    38de:	619a      	str	r2, [r3, #24]
	TRX_SLP_TR_HIGH();
	phyState = PHY_STATE_SLEEP;
    38e0:	2202      	movs	r2, #2
    38e2:	4b03      	ldr	r3, [pc, #12]	; (38f0 <PHY_Sleep+0x20>)
    38e4:	701a      	strb	r2, [r3, #0]
}
    38e6:	bd08      	pop	{r3, pc}
    38e8:	00003791 	.word	0x00003791
    38ec:	41004400 	.word	0x41004400
    38f0:	20000cf4 	.word	0x20000cf4

000038f4 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
    38f4:	b508      	push	{r3, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    38f6:	2280      	movs	r2, #128	; 0x80
    38f8:	0352      	lsls	r2, r2, #13
    38fa:	4b04      	ldr	r3, [pc, #16]	; (390c <PHY_Wakeup+0x18>)
    38fc:	615a      	str	r2, [r3, #20]
	TRX_SLP_TR_LOW();
	phySetRxState();
    38fe:	4b04      	ldr	r3, [pc, #16]	; (3910 <PHY_Wakeup+0x1c>)
    3900:	4798      	blx	r3
	phyState = PHY_STATE_IDLE;
    3902:	2201      	movs	r2, #1
    3904:	4b03      	ldr	r3, [pc, #12]	; (3914 <PHY_Wakeup+0x20>)
    3906:	701a      	strb	r2, [r3, #0]
}
    3908:	bd08      	pop	{r3, pc}
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	41004400 	.word	0x41004400
    3910:	000037cd 	.word	0x000037cd
    3914:	20000cf4 	.word	0x20000cf4

00003918 <PHY_DataReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    3918:	b510      	push	{r4, lr}
    391a:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    391c:	2019      	movs	r0, #25
    391e:	4b0c      	ldr	r3, [pc, #48]	; (3950 <PHY_DataReq+0x38>)
    3920:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3922:	200f      	movs	r0, #15
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <PHY_DataReq+0x3c>)
    3926:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    3928:	7821      	ldrb	r1, [r4, #0]
    392a:	1c8b      	adds	r3, r1, #2
    392c:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    392e:	3101      	adds	r1, #1
    3930:	b2c9      	uxtb	r1, r1
    3932:	1c20      	adds	r0, r4, #0
    3934:	4b08      	ldr	r3, [pc, #32]	; (3958 <PHY_DataReq+0x40>)
    3936:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    3938:	2203      	movs	r2, #3
    393a:	4b08      	ldr	r3, [pc, #32]	; (395c <PHY_DataReq+0x44>)
    393c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    393e:	4b08      	ldr	r3, [pc, #32]	; (3960 <PHY_DataReq+0x48>)
    3940:	2280      	movs	r2, #128	; 0x80
    3942:	0352      	lsls	r2, r2, #13
    3944:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    394a:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    394c:	bd10      	pop	{r4, pc}
    394e:	46c0      	nop			; (mov r8, r8)
    3950:	00003791 	.word	0x00003791
    3954:	000041f1 	.word	0x000041f1
    3958:	00004525 	.word	0x00004525
    395c:	20000cf4 	.word	0x20000cf4
    3960:	41004400 	.word	0x41004400

00003964 <PHY_RandomReq>:

/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    3964:	b5f0      	push	{r4, r5, r6, r7, lr}
    3966:	4647      	mov	r7, r8
    3968:	b480      	push	{r7}
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);
    396a:	2006      	movs	r0, #6
    396c:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <PHY_RandomReq+0x3c>)
    396e:	4798      	blx	r3
    3970:	2400      	movs	r4, #0

/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
	uint16_t rnd = 0;
    3972:	2500      	movs	r5, #0
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    3974:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <PHY_RandomReq+0x40>)
    3976:	4698      	mov	r8, r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3978:	4f0b      	ldr	r7, [pc, #44]	; (39a8 <PHY_RandomReq+0x44>)

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    397a:	2603      	movs	r6, #3
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    397c:	2001      	movs	r0, #1
    397e:	47c0      	blx	r8
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3980:	2006      	movs	r0, #6
    3982:	47b8      	blx	r7

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    3984:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    3986:	4030      	ands	r0, r6
    3988:	40a0      	lsls	r0, r4
    398a:	4305      	orrs	r5, r0
    398c:	b2ad      	uxth	r5, r5
    398e:	3402      	adds	r4, #2
	uint16_t rnd = 0;
	uint8_t rndValue;

	phyTrxSetState(TRX_CMD_RX_ON);

	for (uint8_t i = 0; i < 16; i += 2) {
    3990:	2c10      	cmp	r4, #16
    3992:	d1f3      	bne.n	397c <PHY_RandomReq+0x18>
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
		rnd |= rndValue << i;
	}

	phySetRxState();
    3994:	4b05      	ldr	r3, [pc, #20]	; (39ac <PHY_RandomReq+0x48>)
    3996:	4798      	blx	r3

	return rnd;
}
    3998:	1c28      	adds	r0, r5, #0
    399a:	bc04      	pop	{r2}
    399c:	4690      	mov	r8, r2
    399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39a0:	00003791 	.word	0x00003791
    39a4:	0000014d 	.word	0x0000014d
    39a8:	000041f1 	.word	0x000041f1
    39ac:	000037cd 	.word	0x000037cd

000039b0 <PHY_EncryptReq>:

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    39b0:	b510      	push	{r4, lr}
    39b2:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    39b4:	1c08      	adds	r0, r1, #0
    39b6:	2100      	movs	r1, #0
    39b8:	2200      	movs	r2, #0
    39ba:	4b05      	ldr	r3, [pc, #20]	; (39d0 <PHY_EncryptReq+0x20>)
    39bc:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    39be:	1c20      	adds	r0, r4, #0
    39c0:	2100      	movs	r1, #0
    39c2:	4b04      	ldr	r3, [pc, #16]	; (39d4 <PHY_EncryptReq+0x24>)
    39c4:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    39c6:	1c20      	adds	r0, r4, #0
    39c8:	4b03      	ldr	r3, [pc, #12]	; (39d8 <PHY_EncryptReq+0x28>)
    39ca:	4798      	blx	r3
}
    39cc:	bd10      	pop	{r4, pc}
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	00003ea9 	.word	0x00003ea9
    39d4:	00003e3d 	.word	0x00003e3d
    39d8:	00003fe1 	.word	0x00003fe1

000039dc <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    39dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39de:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    39e0:	4b26      	ldr	r3, [pc, #152]	; (3a7c <PHY_TaskHandler+0xa0>)
    39e2:	781b      	ldrb	r3, [r3, #0]
    39e4:	2b02      	cmp	r3, #2
    39e6:	d046      	beq.n	3a76 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    39e8:	200f      	movs	r0, #15
    39ea:	4b25      	ldr	r3, [pc, #148]	; (3a80 <PHY_TaskHandler+0xa4>)
    39ec:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    39ee:	0703      	lsls	r3, r0, #28
    39f0:	d541      	bpl.n	3a76 <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    39f2:	4b22      	ldr	r3, [pc, #136]	; (3a7c <PHY_TaskHandler+0xa0>)
    39f4:	781b      	ldrb	r3, [r3, #0]
    39f6:	2b01      	cmp	r3, #1
    39f8:	d124      	bne.n	3a44 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    39fa:	2007      	movs	r0, #7
    39fc:	4b20      	ldr	r3, [pc, #128]	; (3a80 <PHY_TaskHandler+0xa4>)
    39fe:	4798      	blx	r3
    3a00:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    3a02:	466c      	mov	r4, sp
    3a04:	3407      	adds	r4, #7
    3a06:	1c20      	adds	r0, r4, #0
    3a08:	2101      	movs	r1, #1
    3a0a:	4e1e      	ldr	r6, [pc, #120]	; (3a84 <PHY_TaskHandler+0xa8>)
    3a0c:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    3a0e:	4d1e      	ldr	r5, [pc, #120]	; (3a88 <PHY_TaskHandler+0xac>)
    3a10:	7821      	ldrb	r1, [r4, #0]
    3a12:	3102      	adds	r1, #2
    3a14:	b2c9      	uxtb	r1, r1
    3a16:	1c28      	adds	r0, r5, #0
    3a18:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    3a1a:	a802      	add	r0, sp, #8
    3a1c:	1c6a      	adds	r2, r5, #1
    3a1e:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3a20:	7822      	ldrb	r2, [r4, #0]
    3a22:	1e91      	subs	r1, r2, #2
    3a24:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    3a26:	18ad      	adds	r5, r5, r2
    3a28:	786a      	ldrb	r2, [r5, #1]
    3a2a:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    3a2c:	3f5b      	subs	r7, #91	; 0x5b
    3a2e:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    3a30:	4b16      	ldr	r3, [pc, #88]	; (3a8c <PHY_TaskHandler+0xb0>)
    3a32:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3a34:	4d12      	ldr	r5, [pc, #72]	; (3a80 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3a36:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3a38:	2001      	movs	r0, #1
    3a3a:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3a3c:	4020      	ands	r0, r4
    3a3e:	2816      	cmp	r0, #22
    3a40:	d1fa      	bne.n	3a38 <PHY_TaskHandler+0x5c>
    3a42:	e018      	b.n	3a76 <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    3a44:	2b03      	cmp	r3, #3
    3a46:	d116      	bne.n	3a76 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3a48:	2002      	movs	r0, #2
    3a4a:	4b0d      	ldr	r3, [pc, #52]	; (3a80 <PHY_TaskHandler+0xa4>)
    3a4c:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    3a4e:	0944      	lsrs	r4, r0, #5
    3a50:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    3a52:	2c00      	cmp	r4, #0
    3a54:	d007      	beq.n	3a66 <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    3a56:	2c03      	cmp	r4, #3
    3a58:	d004      	beq.n	3a64 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    3a5a:	3c05      	subs	r4, #5
    3a5c:	1e63      	subs	r3, r4, #1
    3a5e:	419c      	sbcs	r4, r3
    3a60:	3402      	adds	r4, #2
    3a62:	e000      	b.n	3a66 <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    3a64:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    3a66:	4b0a      	ldr	r3, [pc, #40]	; (3a90 <PHY_TaskHandler+0xb4>)
    3a68:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    3a6a:	2201      	movs	r2, #1
    3a6c:	4b03      	ldr	r3, [pc, #12]	; (3a7c <PHY_TaskHandler+0xa0>)
    3a6e:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    3a70:	1c20      	adds	r0, r4, #0
    3a72:	4b08      	ldr	r3, [pc, #32]	; (3a94 <PHY_TaskHandler+0xb8>)
    3a74:	4798      	blx	r3
		}
	}
}
    3a76:	b005      	add	sp, #20
    3a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	20000cf4 	.word	0x20000cf4
    3a80:	000041f1 	.word	0x000041f1
    3a84:	000043e5 	.word	0x000043e5
    3a88:	20000c74 	.word	0x20000c74
    3a8c:	00002d11 	.word	0x00002d11
    3a90:	000037cd 	.word	0x000037cd
    3a94:	00003641 	.word	0x00003641

00003a98 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    3a98:	b508      	push	{r3, lr}
	SYS_TimerInit();
    3a9a:	4b04      	ldr	r3, [pc, #16]	; (3aac <SYS_Init+0x14>)
    3a9c:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    3a9e:	4b04      	ldr	r3, [pc, #16]	; (3ab0 <SYS_Init+0x18>)
    3aa0:	4798      	blx	r3
#endif
	PHY_Init();
    3aa2:	4b04      	ldr	r3, [pc, #16]	; (3ab4 <SYS_Init+0x1c>)
    3aa4:	4798      	blx	r3
	NWK_Init();
    3aa6:	4b04      	ldr	r3, [pc, #16]	; (3ab8 <SYS_Init+0x20>)
    3aa8:	4798      	blx	r3
}
    3aaa:	bd08      	pop	{r3, pc}
    3aac:	00003b69 	.word	0x00003b69
    3ab0:	00003e39 	.word	0x00003e39
    3ab4:	000037f9 	.word	0x000037f9
    3ab8:	000020b1 	.word	0x000020b1

00003abc <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    3abc:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    3abe:	4b03      	ldr	r3, [pc, #12]	; (3acc <SYS_TaskHandler+0x10>)
    3ac0:	4798      	blx	r3
	NWK_TaskHandler();
    3ac2:	4b03      	ldr	r3, [pc, #12]	; (3ad0 <SYS_TaskHandler+0x14>)
    3ac4:	4798      	blx	r3
	SYS_TimerTaskHandler();
    3ac6:	4b03      	ldr	r3, [pc, #12]	; (3ad4 <SYS_TaskHandler+0x18>)
    3ac8:	4798      	blx	r3
}
    3aca:	bd08      	pop	{r3, pc}
    3acc:	000039dd 	.word	0x000039dd
    3ad0:	00002191 	.word	0x00002191
    3ad4:	00003c35 	.word	0x00003c35

00003ad8 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3ad8:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    3ada:	4b02      	ldr	r3, [pc, #8]	; (3ae4 <SYS_EncryptReq+0xc>)
    3adc:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    3ade:	4b02      	ldr	r3, [pc, #8]	; (3ae8 <SYS_EncryptReq+0x10>)
    3ae0:	4798      	blx	r3
}
    3ae2:	bd08      	pop	{r3, pc}
    3ae4:	000039b1 	.word	0x000039b1
    3ae8:	00003185 	.word	0x00003185

00003aec <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3aec:	b530      	push	{r4, r5, lr}
	if (timers) {
    3aee:	4b15      	ldr	r3, [pc, #84]	; (3b44 <placeTimer+0x58>)
    3af0:	681d      	ldr	r5, [r3, #0]
    3af2:	2d00      	cmp	r5, #0
    3af4:	d01e      	beq.n	3b34 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3af6:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3af8:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3afa:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    3afc:	428a      	cmp	r2, r1
    3afe:	d20a      	bcs.n	3b16 <placeTimer+0x2a>
    3b00:	e004      	b.n	3b0c <placeTimer+0x20>
    3b02:	6859      	ldr	r1, [r3, #4]
    3b04:	4291      	cmp	r1, r2
    3b06:	d803      	bhi.n	3b10 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3b08:	1c1c      	adds	r4, r3, #0
    3b0a:	e004      	b.n	3b16 <placeTimer+0x2a>
    3b0c:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    3b0e:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    3b10:	1a89      	subs	r1, r1, r2
    3b12:	6059      	str	r1, [r3, #4]
				break;
    3b14:	e003      	b.n	3b1e <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    3b16:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3b18:	6823      	ldr	r3, [r4, #0]
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d1f1      	bne.n	3b02 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    3b1e:	6042      	str	r2, [r0, #4]

		if (prev) {
    3b20:	2c00      	cmp	r4, #0
    3b22:	d003      	beq.n	3b2c <placeTimer+0x40>
			timer->next = prev->next;
    3b24:	6823      	ldr	r3, [r4, #0]
    3b26:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3b28:	6020      	str	r0, [r4, #0]
    3b2a:	e009      	b.n	3b40 <placeTimer+0x54>
		} else {
			timer->next = timers;
    3b2c:	6005      	str	r5, [r0, #0]
			timers = timer;
    3b2e:	4b05      	ldr	r3, [pc, #20]	; (3b44 <placeTimer+0x58>)
    3b30:	6018      	str	r0, [r3, #0]
    3b32:	e005      	b.n	3b40 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    3b34:	2300      	movs	r3, #0
    3b36:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3b38:	6883      	ldr	r3, [r0, #8]
    3b3a:	6043      	str	r3, [r0, #4]
		timers = timer;
    3b3c:	4b01      	ldr	r3, [pc, #4]	; (3b44 <placeTimer+0x58>)
    3b3e:	6018      	str	r0, [r3, #0]
	}
}
    3b40:	bd30      	pop	{r4, r5, pc}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	20000cf8 	.word	0x20000cf8

00003b48 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3b48:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    3b4a:	4b04      	ldr	r3, [pc, #16]	; (3b5c <SYS_HwExpiry_Cb+0x14>)
    3b4c:	781a      	ldrb	r2, [r3, #0]
    3b4e:	3201      	adds	r2, #1
    3b50:	b2d2      	uxtb	r2, r2
    3b52:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3b54:	4802      	ldr	r0, [pc, #8]	; (3b60 <SYS_HwExpiry_Cb+0x18>)
    3b56:	4b03      	ldr	r3, [pc, #12]	; (3b64 <SYS_HwExpiry_Cb+0x1c>)
    3b58:	4798      	blx	r3
}
    3b5a:	bd08      	pop	{r3, pc}
    3b5c:	20000e08 	.word	0x20000e08
    3b60:	00002710 	.word	0x00002710
    3b64:	00004bd1 	.word	0x00004bd1

00003b68 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3b68:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    3b6a:	2400      	movs	r4, #0
    3b6c:	4b06      	ldr	r3, [pc, #24]	; (3b88 <SYS_TimerInit+0x20>)
    3b6e:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3b70:	4806      	ldr	r0, [pc, #24]	; (3b8c <SYS_TimerInit+0x24>)
    3b72:	4b07      	ldr	r3, [pc, #28]	; (3b90 <SYS_TimerInit+0x28>)
    3b74:	4798      	blx	r3
	common_tc_init();
    3b76:	4b07      	ldr	r3, [pc, #28]	; (3b94 <SYS_TimerInit+0x2c>)
    3b78:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3b7a:	4807      	ldr	r0, [pc, #28]	; (3b98 <SYS_TimerInit+0x30>)
    3b7c:	4b07      	ldr	r3, [pc, #28]	; (3b9c <SYS_TimerInit+0x34>)
    3b7e:	4798      	blx	r3
	timers = NULL;
    3b80:	4b07      	ldr	r3, [pc, #28]	; (3ba0 <SYS_TimerInit+0x38>)
    3b82:	601c      	str	r4, [r3, #0]
}
    3b84:	bd10      	pop	{r4, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	20000e08 	.word	0x20000e08
    3b8c:	00003b49 	.word	0x00003b49
    3b90:	00004cc1 	.word	0x00004cc1
    3b94:	00004c3d 	.word	0x00004c3d
    3b98:	00002710 	.word	0x00002710
    3b9c:	00004bd1 	.word	0x00004bd1
    3ba0:	20000cf8 	.word	0x20000cf8

00003ba4 <SYS_TimerStop>:
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3ba4:	4b10      	ldr	r3, [pc, #64]	; (3be8 <SYS_TimerStop+0x44>)
    3ba6:	681a      	ldr	r2, [r3, #0]
    3ba8:	2a00      	cmp	r2, #0
    3baa:	d01b      	beq.n	3be4 <SYS_TimerStop+0x40>
		if (t == timer) {
    3bac:	4282      	cmp	r2, r0
    3bae:	d116      	bne.n	3bde <SYS_TimerStop+0x3a>
    3bb0:	e009      	b.n	3bc6 <SYS_TimerStop+0x22>
    3bb2:	4298      	cmp	r0, r3
    3bb4:	d001      	beq.n	3bba <SYS_TimerStop+0x16>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3bb6:	1c1a      	adds	r2, r3, #0
    3bb8:	e011      	b.n	3bde <SYS_TimerStop+0x3a>
		if (t == timer) {
			if (prev) {
    3bba:	2a00      	cmp	r2, #0
    3bbc:	d002      	beq.n	3bc4 <SYS_TimerStop+0x20>
				prev->next = t->next;
    3bbe:	6819      	ldr	r1, [r3, #0]
    3bc0:	6011      	str	r1, [r2, #0]
    3bc2:	e004      	b.n	3bce <SYS_TimerStop+0x2a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3bc4:	1c1a      	adds	r2, r3, #0
		if (t == timer) {
			if (prev) {
				prev->next = t->next;
			} else {
				timers = t->next;
    3bc6:	4b08      	ldr	r3, [pc, #32]	; (3be8 <SYS_TimerStop+0x44>)
    3bc8:	6811      	ldr	r1, [r2, #0]
    3bca:	6019      	str	r1, [r3, #0]
    3bcc:	1c13      	adds	r3, r2, #0
			}

			if (t->next) {
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d007      	beq.n	3be4 <SYS_TimerStop+0x40>
				t->next->timeout += timer->timeout;
    3bd4:	6842      	ldr	r2, [r0, #4]
    3bd6:	6859      	ldr	r1, [r3, #4]
    3bd8:	188a      	adds	r2, r1, r2
    3bda:	605a      	str	r2, [r3, #4]
    3bdc:	e002      	b.n	3be4 <SYS_TimerStop+0x40>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3bde:	6813      	ldr	r3, [r2, #0]
    3be0:	2b00      	cmp	r3, #0
    3be2:	d1e6      	bne.n	3bb2 <SYS_TimerStop+0xe>
			break;
		}

		prev = t;
	}
}
    3be4:	4770      	bx	lr
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	20000cf8 	.word	0x20000cf8

00003bec <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3bec:	4b09      	ldr	r3, [pc, #36]	; (3c14 <SYS_TimerStarted+0x28>)
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d009      	beq.n	3c08 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    3bf4:	4283      	cmp	r3, r0
    3bf6:	d102      	bne.n	3bfe <SYS_TimerStarted+0x12>
    3bf8:	e008      	b.n	3c0c <SYS_TimerStarted+0x20>
    3bfa:	4298      	cmp	r0, r3
    3bfc:	d008      	beq.n	3c10 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	2b00      	cmp	r3, #0
    3c02:	d1fa      	bne.n	3bfa <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    3c04:	2000      	movs	r0, #0
    3c06:	e004      	b.n	3c12 <SYS_TimerStarted+0x26>
    3c08:	2000      	movs	r0, #0
    3c0a:	e002      	b.n	3c12 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    3c0c:	2001      	movs	r0, #1
    3c0e:	e000      	b.n	3c12 <SYS_TimerStarted+0x26>
    3c10:	2001      	movs	r0, #1
		}
	}
	return false;
}
    3c12:	4770      	bx	lr
    3c14:	20000cf8 	.word	0x20000cf8

00003c18 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3c18:	b510      	push	{r4, lr}
    3c1a:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    3c1c:	4b03      	ldr	r3, [pc, #12]	; (3c2c <SYS_TimerStart+0x14>)
    3c1e:	4798      	blx	r3
    3c20:	2800      	cmp	r0, #0
    3c22:	d102      	bne.n	3c2a <SYS_TimerStart+0x12>
		placeTimer(timer);
    3c24:	1c20      	adds	r0, r4, #0
    3c26:	4b02      	ldr	r3, [pc, #8]	; (3c30 <SYS_TimerStart+0x18>)
    3c28:	4798      	blx	r3
	}
}
    3c2a:	bd10      	pop	{r4, pc}
    3c2c:	00003bed 	.word	0x00003bed
    3c30:	00003aed 	.word	0x00003aed

00003c34 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    3c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    3c36:	4b1a      	ldr	r3, [pc, #104]	; (3ca0 <SYS_TimerTaskHandler+0x6c>)
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d02f      	beq.n	3c9e <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c3e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3c42:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3c44:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3c48:	2100      	movs	r1, #0
    3c4a:	4b16      	ldr	r3, [pc, #88]	; (3ca4 <SYS_TimerTaskHandler+0x70>)
    3c4c:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    3c4e:	4a14      	ldr	r2, [pc, #80]	; (3ca0 <SYS_TimerTaskHandler+0x6c>)
    3c50:	7813      	ldrb	r3, [r2, #0]
    3c52:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    3c54:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3c56:	2800      	cmp	r0, #0
    3c58:	d105      	bne.n	3c66 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    3c5a:	2101      	movs	r1, #1
    3c5c:	4a11      	ldr	r2, [pc, #68]	; (3ca4 <SYS_TimerTaskHandler+0x70>)
    3c5e:	7011      	strb	r1, [r2, #0]
    3c60:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3c64:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    3c66:	009d      	lsls	r5, r3, #2
    3c68:	18ed      	adds	r5, r5, r3
    3c6a:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    3c6c:	4e0e      	ldr	r6, [pc, #56]	; (3ca8 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    3c6e:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3c70:	e00d      	b.n	3c8e <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    3c72:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3c74:	6823      	ldr	r3, [r4, #0]
    3c76:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3c78:	7b23      	ldrb	r3, [r4, #12]
    3c7a:	2b01      	cmp	r3, #1
    3c7c:	d102      	bne.n	3c84 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    3c7e:	1c20      	adds	r0, r4, #0
    3c80:	4b0a      	ldr	r3, [pc, #40]	; (3cac <SYS_TimerTaskHandler+0x78>)
    3c82:	4798      	blx	r3
		}
		if(timer->handler)
    3c84:	6923      	ldr	r3, [r4, #16]
    3c86:	2b00      	cmp	r3, #0
    3c88:	d001      	beq.n	3c8e <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    3c8a:	1c20      	adds	r0, r4, #0
    3c8c:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3c8e:	6834      	ldr	r4, [r6, #0]
    3c90:	2c00      	cmp	r4, #0
    3c92:	d004      	beq.n	3c9e <SYS_TimerTaskHandler+0x6a>
    3c94:	6863      	ldr	r3, [r4, #4]
    3c96:	429d      	cmp	r5, r3
    3c98:	d2eb      	bcs.n	3c72 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    3c9a:	1b5d      	subs	r5, r3, r5
    3c9c:	6065      	str	r5, [r4, #4]
	}
}
    3c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ca0:	20000e08 	.word	0x20000e08
    3ca4:	20000008 	.word	0x20000008
    3ca8:	20000cf8 	.word	0x20000cf8
    3cac:	00003aed 	.word	0x00003aed

00003cb0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3cb0:	b508      	push	{r3, lr}
	tmr_cca_callback();
    3cb2:	4b01      	ldr	r3, [pc, #4]	; (3cb8 <tc_cca_callback+0x8>)
    3cb4:	4798      	blx	r3
}
    3cb6:	bd08      	pop	{r3, pc}
    3cb8:	00004ca5 	.word	0x00004ca5

00003cbc <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    3cbc:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    3cbe:	4b01      	ldr	r3, [pc, #4]	; (3cc4 <tc_ovf_callback+0x8>)
    3cc0:	4798      	blx	r3
}
    3cc2:	bd08      	pop	{r3, pc}
    3cc4:	00004c5d 	.word	0x00004c5d

00003cc8 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    3cc8:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3cca:	4802      	ldr	r0, [pc, #8]	; (3cd4 <tmr_read_count+0xc>)
    3ccc:	4b02      	ldr	r3, [pc, #8]	; (3cd8 <tmr_read_count+0x10>)
    3cce:	4798      	blx	r3
    3cd0:	b280      	uxth	r0, r0
}
    3cd2:	bd08      	pop	{r3, pc}
    3cd4:	20000e40 	.word	0x20000e40
    3cd8:	0000192d 	.word	0x0000192d

00003cdc <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3cdc:	4b03      	ldr	r3, [pc, #12]	; (3cec <tmr_disable_cc_interrupt+0x10>)
    3cde:	2210      	movs	r2, #16
    3ce0:	6819      	ldr	r1, [r3, #0]
    3ce2:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3ce4:	7e59      	ldrb	r1, [r3, #25]
    3ce6:	4391      	bics	r1, r2
    3ce8:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3cea:	4770      	bx	lr
    3cec:	20000e40 	.word	0x20000e40

00003cf0 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    3cf0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3cf2:	4c0a      	ldr	r4, [pc, #40]	; (3d1c <tmr_enable_cc_interrupt+0x2c>)
    3cf4:	6820      	ldr	r0, [r4, #0]
    3cf6:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <tmr_enable_cc_interrupt+0x30>)
    3cf8:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3cfa:	4b0a      	ldr	r3, [pc, #40]	; (3d24 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3cfc:	5c1b      	ldrb	r3, [r3, r0]
    3cfe:	221f      	movs	r2, #31
    3d00:	401a      	ands	r2, r3
    3d02:	2301      	movs	r3, #1
    3d04:	4093      	lsls	r3, r2
    3d06:	1c1a      	adds	r2, r3, #0
    3d08:	4b07      	ldr	r3, [pc, #28]	; (3d28 <tmr_enable_cc_interrupt+0x38>)
    3d0a:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3d0c:	7e62      	ldrb	r2, [r4, #25]
    3d0e:	2310      	movs	r3, #16
    3d10:	4313      	orrs	r3, r2
    3d12:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3d14:	6823      	ldr	r3, [r4, #0]
    3d16:	2210      	movs	r2, #16
    3d18:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3d1a:	bd10      	pop	{r4, pc}
    3d1c:	20000e40 	.word	0x20000e40
    3d20:	00001681 	.word	0x00001681
    3d24:	000050c8 	.word	0x000050c8
    3d28:	e000e100 	.word	0xe000e100

00003d2c <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    3d2c:	b508      	push	{r3, lr}
    3d2e:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3d30:	4802      	ldr	r0, [pc, #8]	; (3d3c <tmr_write_cmpreg+0x10>)
    3d32:	2100      	movs	r1, #0
    3d34:	4b02      	ldr	r3, [pc, #8]	; (3d40 <tmr_write_cmpreg+0x14>)
    3d36:	4798      	blx	r3
			(uint32_t)compare_value);
}
    3d38:	bd08      	pop	{r3, pc}
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	20000e40 	.word	0x20000e40
    3d40:	0000195d 	.word	0x0000195d

00003d44 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d46:	464f      	mov	r7, r9
    3d48:	4646      	mov	r6, r8
    3d4a:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3d4c:	4a2d      	ldr	r2, [pc, #180]	; (3e04 <tmr_init+0xc0>)
    3d4e:	2300      	movs	r3, #0
    3d50:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3d52:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3d54:	2100      	movs	r1, #0
    3d56:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3d58:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3d5a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3d5c:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3d5e:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3d60:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3d62:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3d64:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3d66:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3d68:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3d6a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3d6c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3d6e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3d70:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3d72:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3d74:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3d76:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3d78:	2301      	movs	r3, #1
    3d7a:	425b      	negs	r3, r3
    3d7c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3d7e:	4c22      	ldr	r4, [pc, #136]	; (3e08 <tmr_init+0xc4>)
    3d80:	1c20      	adds	r0, r4, #0
    3d82:	4922      	ldr	r1, [pc, #136]	; (3e0c <tmr_init+0xc8>)
    3d84:	4b22      	ldr	r3, [pc, #136]	; (3e10 <tmr_init+0xcc>)
    3d86:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3d88:	1c20      	adds	r0, r4, #0
    3d8a:	4922      	ldr	r1, [pc, #136]	; (3e14 <tmr_init+0xd0>)
    3d8c:	2200      	movs	r2, #0
    3d8e:	4d22      	ldr	r5, [pc, #136]	; (3e18 <tmr_init+0xd4>)
    3d90:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3d92:	1c20      	adds	r0, r4, #0
    3d94:	4921      	ldr	r1, [pc, #132]	; (3e1c <tmr_init+0xd8>)
    3d96:	2202      	movs	r2, #2
    3d98:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3d9a:	6820      	ldr	r0, [r4, #0]
    3d9c:	4a20      	ldr	r2, [pc, #128]	; (3e20 <tmr_init+0xdc>)
    3d9e:	4691      	mov	r9, r2
    3da0:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3da2:	4b20      	ldr	r3, [pc, #128]	; (3e24 <tmr_init+0xe0>)
    3da4:	4698      	mov	r8, r3
    3da6:	5c1b      	ldrb	r3, [r3, r0]
    3da8:	271f      	movs	r7, #31
    3daa:	403b      	ands	r3, r7
    3dac:	2501      	movs	r5, #1
    3dae:	1c2a      	adds	r2, r5, #0
    3db0:	409a      	lsls	r2, r3
    3db2:	4e1d      	ldr	r6, [pc, #116]	; (3e28 <tmr_init+0xe4>)
    3db4:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3db6:	7e62      	ldrb	r2, [r4, #25]
    3db8:	2301      	movs	r3, #1
    3dba:	4313      	orrs	r3, r2
    3dbc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3dbe:	6820      	ldr	r0, [r4, #0]
    3dc0:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3dc2:	47c8      	blx	r9
    3dc4:	4642      	mov	r2, r8
    3dc6:	5c13      	ldrb	r3, [r2, r0]
    3dc8:	401f      	ands	r7, r3
    3dca:	40bd      	lsls	r5, r7
    3dcc:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3dce:	7e62      	ldrb	r2, [r4, #25]
    3dd0:	2310      	movs	r3, #16
    3dd2:	4313      	orrs	r3, r2
    3dd4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3dd6:	6822      	ldr	r2, [r4, #0]
    3dd8:	2310      	movs	r3, #16
    3dda:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3ddc:	217f      	movs	r1, #127	; 0x7f
    3dde:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3de0:	438b      	bics	r3, r1
    3de2:	d1fc      	bne.n	3dde <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3de4:	8811      	ldrh	r1, [r2, #0]
    3de6:	2302      	movs	r3, #2
    3de8:	430b      	orrs	r3, r1
    3dea:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3dec:	2000      	movs	r0, #0
    3dee:	4b0f      	ldr	r3, [pc, #60]	; (3e2c <tmr_init+0xe8>)
    3df0:	4798      	blx	r3
    3df2:	490f      	ldr	r1, [pc, #60]	; (3e30 <tmr_init+0xec>)
    3df4:	4b0f      	ldr	r3, [pc, #60]	; (3e34 <tmr_init+0xf0>)
    3df6:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3df8:	b2c0      	uxtb	r0, r0
}
    3dfa:	bc0c      	pop	{r2, r3}
    3dfc:	4690      	mov	r8, r2
    3dfe:	4699      	mov	r9, r3
    3e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	20000e0c 	.word	0x20000e0c
    3e08:	20000e40 	.word	0x20000e40
    3e0c:	42002c00 	.word	0x42002c00
    3e10:	000016b9 	.word	0x000016b9
    3e14:	00003cbd 	.word	0x00003cbd
    3e18:	000015c1 	.word	0x000015c1
    3e1c:	00003cb1 	.word	0x00003cb1
    3e20:	00001681 	.word	0x00001681
    3e24:	000050c8 	.word	0x000050c8
    3e28:	e000e100 	.word	0xe000e100
    3e2c:	00001379 	.word	0x00001379
    3e30:	000f4240 	.word	0x000f4240
    3e34:	00004ccd 	.word	0x00004ccd

00003e38 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3e38:	4770      	bx	lr
    3e3a:	46c0      	nop			; (mov r8, r8)

00003e3c <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3e3c:	b538      	push	{r3, r4, r5, lr}
    3e3e:	1c03      	adds	r3, r0, #0
    3e40:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3e42:	4c14      	ldr	r4, [pc, #80]	; (3e94 <sal_aes_wrrd+0x58>)
    3e44:	1c60      	adds	r0, r4, #1
    3e46:	1c19      	adds	r1, r3, #0
    3e48:	2210      	movs	r2, #16
    3e4a:	4b13      	ldr	r3, [pc, #76]	; (3e98 <sal_aes_wrrd+0x5c>)
    3e4c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3e4e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3e50:	4b12      	ldr	r3, [pc, #72]	; (3e9c <sal_aes_wrrd+0x60>)
    3e52:	781b      	ldrb	r3, [r3, #0]
    3e54:	2b00      	cmp	r3, #0
    3e56:	d008      	beq.n	3e6a <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3e58:	2083      	movs	r0, #131	; 0x83
    3e5a:	490e      	ldr	r1, [pc, #56]	; (3e94 <sal_aes_wrrd+0x58>)
    3e5c:	2212      	movs	r2, #18
    3e5e:	4b10      	ldr	r3, [pc, #64]	; (3ea0 <sal_aes_wrrd+0x64>)
    3e60:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3e62:	2200      	movs	r2, #0
    3e64:	4b0d      	ldr	r3, [pc, #52]	; (3e9c <sal_aes_wrrd+0x60>)
    3e66:	701a      	strb	r2, [r3, #0]
    3e68:	e005      	b.n	3e76 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3e6a:	2084      	movs	r0, #132	; 0x84
    3e6c:	4909      	ldr	r1, [pc, #36]	; (3e94 <sal_aes_wrrd+0x58>)
    3e6e:	3101      	adds	r1, #1
    3e70:	2211      	movs	r2, #17
    3e72:	4b0b      	ldr	r3, [pc, #44]	; (3ea0 <sal_aes_wrrd+0x64>)
    3e74:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3e76:	2d00      	cmp	r5, #0
    3e78:	d005      	beq.n	3e86 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3e7a:	1c28      	adds	r0, r5, #0
    3e7c:	4905      	ldr	r1, [pc, #20]	; (3e94 <sal_aes_wrrd+0x58>)
    3e7e:	3101      	adds	r1, #1
    3e80:	2210      	movs	r2, #16
    3e82:	4b05      	ldr	r3, [pc, #20]	; (3e98 <sal_aes_wrrd+0x5c>)
    3e84:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3e86:	4b03      	ldr	r3, [pc, #12]	; (3e94 <sal_aes_wrrd+0x58>)
    3e88:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3e8a:	2018      	movs	r0, #24
    3e8c:	4b05      	ldr	r3, [pc, #20]	; (3ea4 <sal_aes_wrrd+0x68>)
    3e8e:	4798      	blx	r3
}
    3e90:	bd38      	pop	{r3, r4, r5, pc}
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	20000d20 	.word	0x20000d20
    3e98:	00004dfd 	.word	0x00004dfd
    3e9c:	20000d34 	.word	0x20000d34
    3ea0:	0000495d 	.word	0x0000495d
    3ea4:	0000014d 	.word	0x0000014d

00003ea8 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eaa:	4647      	mov	r7, r8
    3eac:	b480      	push	{r7}
    3eae:	b084      	sub	sp, #16
    3eb0:	1c05      	adds	r5, r0, #0
    3eb2:	1c0f      	adds	r7, r1, #0
    3eb4:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    3eb6:	2800      	cmp	r0, #0
    3eb8:	d017      	beq.n	3eea <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    3eba:	2200      	movs	r2, #0
    3ebc:	4b3e      	ldr	r3, [pc, #248]	; (3fb8 <sal_aes_setup+0x110>)
    3ebe:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    3ec0:	2202      	movs	r2, #2
    3ec2:	4b3e      	ldr	r3, [pc, #248]	; (3fbc <sal_aes_setup+0x114>)
    3ec4:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    3ec6:	483e      	ldr	r0, [pc, #248]	; (3fc0 <sal_aes_setup+0x118>)
    3ec8:	1c29      	adds	r1, r5, #0
    3eca:	2210      	movs	r2, #16
    3ecc:	4b3d      	ldr	r3, [pc, #244]	; (3fc4 <sal_aes_setup+0x11c>)
    3ece:	4698      	mov	r8, r3
    3ed0:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3ed2:	4e3d      	ldr	r6, [pc, #244]	; (3fc8 <sal_aes_setup+0x120>)
    3ed4:	2310      	movs	r3, #16
    3ed6:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3ed8:	1c70      	adds	r0, r6, #1
    3eda:	1c29      	adds	r1, r5, #0
    3edc:	2210      	movs	r2, #16
    3ede:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3ee0:	2083      	movs	r0, #131	; 0x83
    3ee2:	1c31      	adds	r1, r6, #0
    3ee4:	2211      	movs	r2, #17
    3ee6:	4b39      	ldr	r3, [pc, #228]	; (3fcc <sal_aes_setup+0x124>)
    3ee8:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    3eea:	2c00      	cmp	r4, #0
    3eec:	d002      	beq.n	3ef4 <sal_aes_setup+0x4c>
    3eee:	2c01      	cmp	r4, #1
    3ef0:	d012      	beq.n	3f18 <sal_aes_setup+0x70>
    3ef2:	e05a      	b.n	3faa <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    3ef4:	4b31      	ldr	r3, [pc, #196]	; (3fbc <sal_aes_setup+0x114>)
    3ef6:	781b      	ldrb	r3, [r3, #0]
    3ef8:	2b01      	cmp	r3, #1
    3efa:	d13d      	bne.n	3f78 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3efc:	4d32      	ldr	r5, [pc, #200]	; (3fc8 <sal_aes_setup+0x120>)
    3efe:	2310      	movs	r3, #16
    3f00:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3f02:	1c68      	adds	r0, r5, #1
    3f04:	492e      	ldr	r1, [pc, #184]	; (3fc0 <sal_aes_setup+0x118>)
    3f06:	2210      	movs	r2, #16
    3f08:	4b2e      	ldr	r3, [pc, #184]	; (3fc4 <sal_aes_setup+0x11c>)
    3f0a:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3f0c:	2083      	movs	r0, #131	; 0x83
    3f0e:	1c29      	adds	r1, r5, #0
    3f10:	2211      	movs	r2, #17
    3f12:	4b2e      	ldr	r3, [pc, #184]	; (3fcc <sal_aes_setup+0x124>)
    3f14:	4798      	blx	r3
    3f16:	e02f      	b.n	3f78 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    3f18:	4b28      	ldr	r3, [pc, #160]	; (3fbc <sal_aes_setup+0x114>)
    3f1a:	781b      	ldrb	r3, [r3, #0]
    3f1c:	2b01      	cmp	r3, #1
    3f1e:	d02b      	beq.n	3f78 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3f20:	2210      	movs	r2, #16
    3f22:	4b29      	ldr	r3, [pc, #164]	; (3fc8 <sal_aes_setup+0x120>)
    3f24:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    3f26:	4b24      	ldr	r3, [pc, #144]	; (3fb8 <sal_aes_setup+0x110>)
    3f28:	781b      	ldrb	r3, [r3, #0]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d116      	bne.n	3f5c <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3f2e:	4d26      	ldr	r5, [pc, #152]	; (3fc8 <sal_aes_setup+0x120>)
    3f30:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3f32:	2380      	movs	r3, #128	; 0x80
    3f34:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    3f36:	2201      	movs	r2, #1
    3f38:	4b25      	ldr	r3, [pc, #148]	; (3fd0 <sal_aes_setup+0x128>)
    3f3a:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    3f3c:	4668      	mov	r0, sp
    3f3e:	2100      	movs	r1, #0
    3f40:	4b24      	ldr	r3, [pc, #144]	; (3fd4 <sal_aes_setup+0x12c>)
    3f42:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3f44:	2310      	movs	r3, #16
    3f46:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3f48:	2083      	movs	r0, #131	; 0x83
    3f4a:	1c29      	adds	r1, r5, #0
    3f4c:	2201      	movs	r2, #1
    3f4e:	4b1f      	ldr	r3, [pc, #124]	; (3fcc <sal_aes_setup+0x124>)
    3f50:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    3f52:	2084      	movs	r0, #132	; 0x84
    3f54:	4920      	ldr	r1, [pc, #128]	; (3fd8 <sal_aes_setup+0x130>)
    3f56:	2210      	movs	r2, #16
    3f58:	4b20      	ldr	r3, [pc, #128]	; (3fdc <sal_aes_setup+0x134>)
    3f5a:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3f5c:	4d1a      	ldr	r5, [pc, #104]	; (3fc8 <sal_aes_setup+0x120>)
    3f5e:	1c68      	adds	r0, r5, #1
    3f60:	491d      	ldr	r1, [pc, #116]	; (3fd8 <sal_aes_setup+0x130>)
    3f62:	2210      	movs	r2, #16
    3f64:	4b17      	ldr	r3, [pc, #92]	; (3fc4 <sal_aes_setup+0x11c>)
    3f66:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3f68:	2083      	movs	r0, #131	; 0x83
    3f6a:	1c29      	adds	r1, r5, #0
    3f6c:	2211      	movs	r2, #17
    3f6e:	4b17      	ldr	r3, [pc, #92]	; (3fcc <sal_aes_setup+0x124>)
    3f70:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    3f72:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <sal_aes_setup+0x110>)
    3f74:	2201      	movs	r2, #1
    3f76:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3f78:	4b10      	ldr	r3, [pc, #64]	; (3fbc <sal_aes_setup+0x114>)
    3f7a:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    3f7c:	2f00      	cmp	r7, #0
    3f7e:	d002      	beq.n	3f86 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3f80:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    3f82:	2f02      	cmp	r7, #2
    3f84:	d113      	bne.n	3fae <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    3f86:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3f88:	2308      	movs	r3, #8
    3f8a:	401c      	ands	r4, r3
    3f8c:	013f      	lsls	r7, r7, #4
    3f8e:	2370      	movs	r3, #112	; 0x70
    3f90:	401f      	ands	r7, r3
    3f92:	433c      	orrs	r4, r7
    3f94:	4b0c      	ldr	r3, [pc, #48]	; (3fc8 <sal_aes_setup+0x120>)
    3f96:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3f98:	2780      	movs	r7, #128	; 0x80
    3f9a:	427f      	negs	r7, r7
    3f9c:	433c      	orrs	r4, r7
    3f9e:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3fa0:	2201      	movs	r2, #1
    3fa2:	4b0b      	ldr	r3, [pc, #44]	; (3fd0 <sal_aes_setup+0x128>)
    3fa4:	701a      	strb	r2, [r3, #0]

	return (true);
    3fa6:	2001      	movs	r0, #1
    3fa8:	e001      	b.n	3fae <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    3faa:	2000      	movs	r0, #0
    3fac:	e7ff      	b.n	3fae <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    3fae:	b004      	add	sp, #16
    3fb0:	bc04      	pop	{r2}
    3fb2:	4690      	mov	r8, r2
    3fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000cfc 	.word	0x20000cfc
    3fbc:	20000010 	.word	0x20000010
    3fc0:	20000d10 	.word	0x20000d10
    3fc4:	00004dfd 	.word	0x00004dfd
    3fc8:	20000d20 	.word	0x20000d20
    3fcc:	00004649 	.word	0x00004649
    3fd0:	20000d34 	.word	0x20000d34
    3fd4:	00003e3d 	.word	0x00003e3d
    3fd8:	20000d00 	.word	0x20000d00
    3fdc:	000047c1 	.word	0x000047c1

00003fe0 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3fe0:	b508      	push	{r3, lr}
    3fe2:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3fe4:	2084      	movs	r0, #132	; 0x84
    3fe6:	2210      	movs	r2, #16
    3fe8:	4b01      	ldr	r3, [pc, #4]	; (3ff0 <sal_aes_read+0x10>)
    3fea:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3fec:	bd08      	pop	{r3, pc}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	000047c1 	.word	0x000047c1

00003ff4 <rtc_overflow_callback>:
			RTC_COUNT_CALLBACK_OVERFLOW);
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
}

static void rtc_overflow_callback(void)
{
    3ff4:	b508      	push	{r3, lr}
	/* Do something on RTC overflow here */
	rtc_count_disable(&rtc_instance);
    3ff6:	4802      	ldr	r0, [pc, #8]	; (4000 <rtc_overflow_callback+0xc>)
    3ff8:	4b02      	ldr	r3, [pc, #8]	; (4004 <rtc_overflow_callback+0x10>)
    3ffa:	4798      	blx	r3
}
    3ffc:	bd08      	pop	{r3, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	20000e5c 	.word	0x20000e5c
    4004:	000004fd 	.word	0x000004fd

00004008 <sm_init>:
/**
 * \brief This function Initializes the Sleep functions
 * Enable RTC Clock in conf_clocks.h
 */
void sm_init(void)
{
    4008:	b510      	push	{r4, lr}
    400a:	b084      	sub	sp, #16
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    400c:	2300      	movs	r3, #0
    400e:	466a      	mov	r2, sp
    4010:	70d3      	strb	r3, [r2, #3]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    4012:	9302      	str	r3, [sp, #8]
    4014:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;

	rtc_count_get_config_defaults(&config_rtc_count);
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    4016:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    4018:	7093      	strb	r3, [r2, #2]

	/** Continuously update the counter value so no synchronization is
	 *  needed for reading. */
	config_rtc_count.continuously_update = true;
    401a:	2301      	movs	r3, #1
    401c:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    401e:	4c08      	ldr	r4, [pc, #32]	; (4040 <sm_init+0x38>)
    4020:	1c20      	adds	r0, r4, #0
    4022:	4908      	ldr	r1, [pc, #32]	; (4044 <sm_init+0x3c>)
    4024:	4b08      	ldr	r3, [pc, #32]	; (4048 <sm_init+0x40>)
    4026:	4798      	blx	r3
}

static void configure_rtc_callbacks(void)
{
	/*Register rtc callback*/
	rtc_count_register_callback(
    4028:	1c20      	adds	r0, r4, #0
    402a:	4908      	ldr	r1, [pc, #32]	; (404c <sm_init+0x44>)
    402c:	2202      	movs	r2, #2
    402e:	4b08      	ldr	r3, [pc, #32]	; (4050 <sm_init+0x48>)
    4030:	4798      	blx	r3
			&rtc_instance, rtc_overflow_callback,
			RTC_COUNT_CALLBACK_OVERFLOW);
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    4032:	1c20      	adds	r0, r4, #0
    4034:	2102      	movs	r1, #2
    4036:	4b07      	ldr	r3, [pc, #28]	; (4054 <sm_init+0x4c>)
    4038:	4798      	blx	r3
	/** Continuously update the counter value so no synchronization is
	 *  needed for reading. */
	config_rtc_count.continuously_update = true;
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
	configure_rtc_callbacks();
}
    403a:	b004      	add	sp, #16
    403c:	bd10      	pop	{r4, pc}
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	20000e5c 	.word	0x20000e5c
    4044:	40001400 	.word	0x40001400
    4048:	000005b5 	.word	0x000005b5
    404c:	00003ff5 	.word	0x00003ff5
    4050:	000006bd 	.word	0x000006bd
    4054:	000006f9 	.word	0x000006f9

00004058 <sm_sleep>:

/**
 * \brief This function puts the transceiver and device to sleep
 */
void sm_sleep(uint32_t interval)
{
    4058:	b510      	push	{r4, lr}
	interval = interval * 1000;
	rtc_count_set_period(&rtc_instance, interval);
    405a:	4c0a      	ldr	r4, [pc, #40]	; (4084 <sm_sleep+0x2c>)
/**
 * \brief This function puts the transceiver and device to sleep
 */
void sm_sleep(uint32_t interval)
{
	interval = interval * 1000;
    405c:	21fa      	movs	r1, #250	; 0xfa
    405e:	0089      	lsls	r1, r1, #2
    4060:	4341      	muls	r1, r0
	rtc_count_set_period(&rtc_instance, interval);
    4062:	b289      	uxth	r1, r1
    4064:	1c20      	adds	r0, r4, #0
    4066:	4b08      	ldr	r3, [pc, #32]	; (4088 <sm_sleep+0x30>)
    4068:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    406a:	1c20      	adds	r0, r4, #0
    406c:	4b07      	ldr	r3, [pc, #28]	; (408c <sm_sleep+0x34>)
    406e:	4798      	blx	r3
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4070:	4b07      	ldr	r3, [pc, #28]	; (4090 <sm_sleep+0x38>)
    4072:	6919      	ldr	r1, [r3, #16]
    4074:	2204      	movs	r2, #4
    4076:	430a      	orrs	r2, r1
    4078:	611a      	str	r2, [r3, #16]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    407a:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    407e:	bf30      	wfi
	/*put the MCU in standby mode with RTC as wakeup source*/
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
	system_sleep();
}
    4080:	bd10      	pop	{r4, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	20000e5c 	.word	0x20000e5c
    4088:	00000699 	.word	0x00000699
    408c:	000004d5 	.word	0x000004d5
    4090:	e000ed00 	.word	0xe000ed00

00004094 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    4094:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4096:	2201      	movs	r2, #1
    4098:	4b03      	ldr	r3, [pc, #12]	; (40a8 <AT86RFX_ISR+0x14>)
    409a:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    409c:	4b03      	ldr	r3, [pc, #12]	; (40ac <AT86RFX_ISR+0x18>)
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	2b00      	cmp	r3, #0
    40a2:	d000      	beq.n	40a6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    40a4:	4798      	blx	r3
	}
}
    40a6:	bd08      	pop	{r3, pc}
    40a8:	40001800 	.word	0x40001800
    40ac:	20000d38 	.word	0x20000d38

000040b0 <trx_spi_init>:

void trx_spi_init(void)
{
    40b0:	b530      	push	{r4, r5, lr}
    40b2:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    40b4:	4a32      	ldr	r2, [pc, #200]	; (4180 <trx_spi_init+0xd0>)
    40b6:	2300      	movs	r3, #0
    40b8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    40ba:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    40bc:	213f      	movs	r1, #63	; 0x3f
    40be:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    40c0:	4c30      	ldr	r4, [pc, #192]	; (4184 <trx_spi_init+0xd4>)
    40c2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    40c4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    40c6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    40c8:	2201      	movs	r2, #1
    40ca:	4668      	mov	r0, sp
    40cc:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
    40ce:	7083      	strb	r3, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    40d0:	7002      	strb	r2, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    40d2:	203f      	movs	r0, #63	; 0x3f
    40d4:	4669      	mov	r1, sp
    40d6:	4b2c      	ldr	r3, [pc, #176]	; (4188 <trx_spi_init+0xd8>)
    40d8:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    40da:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    40dc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    40de:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    40e0:	2900      	cmp	r1, #0
    40e2:	d103      	bne.n	40ec <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    40e4:	095a      	lsrs	r2, r3, #5
    40e6:	01d2      	lsls	r2, r2, #7
    40e8:	4928      	ldr	r1, [pc, #160]	; (418c <trx_spi_init+0xdc>)
    40ea:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    40ec:	211f      	movs	r1, #31
    40ee:	400b      	ands	r3, r1
    40f0:	2101      	movs	r1, #1
    40f2:	1c08      	adds	r0, r1, #0
    40f4:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    40f6:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    40f8:	4a25      	ldr	r2, [pc, #148]	; (4190 <trx_spi_init+0xe0>)
    40fa:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    40fc:	2300      	movs	r3, #0
    40fe:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4100:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    4102:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    4104:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    4106:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4108:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    410a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    410c:	2124      	movs	r1, #36	; 0x24
    410e:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    4110:	61d3      	str	r3, [r2, #28]
    4112:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    4114:	2380      	movs	r3, #128	; 0x80
    4116:	025b      	lsls	r3, r3, #9
    4118:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    411a:	4b1e      	ldr	r3, [pc, #120]	; (4194 <trx_spi_init+0xe4>)
    411c:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    411e:	4b1e      	ldr	r3, [pc, #120]	; (4198 <trx_spi_init+0xe8>)
    4120:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    4122:	2301      	movs	r3, #1
    4124:	425b      	negs	r3, r3
    4126:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    4128:	4b1c      	ldr	r3, [pc, #112]	; (419c <trx_spi_init+0xec>)
    412a:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    412c:	4b1c      	ldr	r3, [pc, #112]	; (41a0 <trx_spi_init+0xf0>)
    412e:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    4130:	4c1c      	ldr	r4, [pc, #112]	; (41a4 <trx_spi_init+0xf4>)
    4132:	1c20      	adds	r0, r4, #0
    4134:	491c      	ldr	r1, [pc, #112]	; (41a8 <trx_spi_init+0xf8>)
    4136:	4b1d      	ldr	r3, [pc, #116]	; (41ac <trx_spi_init+0xfc>)
    4138:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    413a:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    413c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    413e:	2b00      	cmp	r3, #0
    4140:	d1fc      	bne.n	413c <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4142:	6813      	ldr	r3, [r2, #0]
    4144:	2502      	movs	r5, #2
    4146:	432b      	orrs	r3, r5
    4148:	6013      	str	r3, [r2, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    414a:	ac01      	add	r4, sp, #4
    414c:	1c20      	adds	r0, r4, #0
    414e:	4b18      	ldr	r3, [pc, #96]	; (41b0 <trx_spi_init+0x100>)
    4150:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    4152:	2320      	movs	r3, #32
    4154:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    4156:	2380      	movs	r3, #128	; 0x80
    4158:	039b      	lsls	r3, r3, #14
    415a:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    415c:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    415e:	2301      	movs	r3, #1
    4160:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    4162:	2200      	movs	r2, #0
    4164:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    4166:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    4168:	2000      	movs	r0, #0
    416a:	1c21      	adds	r1, r4, #0
    416c:	4b11      	ldr	r3, [pc, #68]	; (41b4 <trx_spi_init+0x104>)
    416e:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    4170:	4811      	ldr	r0, [pc, #68]	; (41b8 <trx_spi_init+0x108>)
    4172:	2100      	movs	r1, #0
    4174:	2200      	movs	r2, #0
    4176:	4b11      	ldr	r3, [pc, #68]	; (41bc <trx_spi_init+0x10c>)
    4178:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    417a:	b005      	add	sp, #20
    417c:	bd30      	pop	{r4, r5, pc}
    417e:	46c0      	nop			; (mov r8, r8)
    4180:	20000e78 	.word	0x20000e78
    4184:	20000e7c 	.word	0x20000e7c
    4188:	000004a9 	.word	0x000004a9
    418c:	41004400 	.word	0x41004400
    4190:	20000e80 	.word	0x20000e80
    4194:	004c4b40 	.word	0x004c4b40
    4198:	00530005 	.word	0x00530005
    419c:	003e0005 	.word	0x003e0005
    41a0:	00520005 	.word	0x00520005
    41a4:	20000eb8 	.word	0x20000eb8
    41a8:	42001800 	.word	0x42001800
    41ac:	000009ed 	.word	0x000009ed
    41b0:	0000041d 	.word	0x0000041d
    41b4:	00000431 	.word	0x00000431
    41b8:	00004095 	.word	0x00004095
    41bc:	000002b9 	.word	0x000002b9

000041c0 <PhyReset>:

void PhyReset(void)
{
    41c0:	b570      	push	{r4, r5, r6, lr}
    41c2:	4b09      	ldr	r3, [pc, #36]	; (41e8 <PhyReset+0x28>)
    41c4:	1c1c      	adds	r4, r3, #0
    41c6:	3480      	adds	r4, #128	; 0x80
    41c8:	2580      	movs	r5, #128	; 0x80
    41ca:	022d      	lsls	r5, r5, #8
    41cc:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    41ce:	2280      	movs	r2, #128	; 0x80
    41d0:	0352      	lsls	r2, r2, #13
    41d2:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    41d4:	20a5      	movs	r0, #165	; 0xa5
    41d6:	0040      	lsls	r0, r0, #1
    41d8:	4e04      	ldr	r6, [pc, #16]	; (41ec <PhyReset+0x2c>)
    41da:	47b0      	blx	r6
    41dc:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    41de:	200a      	movs	r0, #10
    41e0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    41e2:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    41e4:	bd70      	pop	{r4, r5, r6, pc}
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	41004400 	.word	0x41004400
    41ec:	0000014d 	.word	0x0000014d

000041f0 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    41f0:	b570      	push	{r4, r5, r6, lr}
    41f2:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41f4:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    41f8:	4263      	negs	r3, r4
    41fa:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    41fc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    41fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4202:	2200      	movs	r2, #0
    4204:	4b33      	ldr	r3, [pc, #204]	; (42d4 <trx_reg_read+0xe4>)
    4206:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4208:	4d33      	ldr	r5, [pc, #204]	; (42d8 <trx_reg_read+0xe8>)
    420a:	1c28      	adds	r0, r5, #0
    420c:	4933      	ldr	r1, [pc, #204]	; (42dc <trx_reg_read+0xec>)
    420e:	2201      	movs	r2, #1
    4210:	4b33      	ldr	r3, [pc, #204]	; (42e0 <trx_reg_read+0xf0>)
    4212:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4214:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4216:	2101      	movs	r1, #1
    4218:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    421a:	420a      	tst	r2, r1
    421c:	d0fc      	beq.n	4218 <trx_reg_read+0x28>
    421e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4220:	07d1      	lsls	r1, r2, #31
    4222:	d502      	bpl.n	422a <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4224:	2280      	movs	r2, #128	; 0x80
    4226:	4316      	orrs	r6, r2
    4228:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    422a:	2102      	movs	r1, #2
    422c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    422e:	420a      	tst	r2, r1
    4230:	d0fc      	beq.n	422c <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4232:	2104      	movs	r1, #4
    4234:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4236:	420a      	tst	r2, r1
    4238:	d0fc      	beq.n	4234 <trx_reg_read+0x44>
    423a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    423c:	0751      	lsls	r1, r2, #29
    423e:	d514      	bpl.n	426a <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4240:	8b5a      	ldrh	r2, [r3, #26]
    4242:	0751      	lsls	r1, r2, #29
    4244:	d503      	bpl.n	424e <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4246:	8b59      	ldrh	r1, [r3, #26]
    4248:	2204      	movs	r2, #4
    424a:	430a      	orrs	r2, r1
    424c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    424e:	4a22      	ldr	r2, [pc, #136]	; (42d8 <trx_reg_read+0xe8>)
    4250:	7992      	ldrb	r2, [r2, #6]
    4252:	2a01      	cmp	r2, #1
    4254:	d105      	bne.n	4262 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4256:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4258:	05c9      	lsls	r1, r1, #23
    425a:	0dc9      	lsrs	r1, r1, #23
    425c:	4a21      	ldr	r2, [pc, #132]	; (42e4 <trx_reg_read+0xf4>)
    425e:	8011      	strh	r1, [r2, #0]
    4260:	e003      	b.n	426a <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4262:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4264:	b2c9      	uxtb	r1, r1
    4266:	4a1f      	ldr	r2, [pc, #124]	; (42e4 <trx_reg_read+0xf4>)
    4268:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    426a:	2101      	movs	r1, #1
    426c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    426e:	420a      	tst	r2, r1
    4270:	d0fc      	beq.n	426c <trx_reg_read+0x7c>
    4272:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4274:	07d1      	lsls	r1, r2, #31
    4276:	d501      	bpl.n	427c <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4278:	2200      	movs	r2, #0
    427a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    427c:	2102      	movs	r1, #2
    427e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4280:	420a      	tst	r2, r1
    4282:	d0fc      	beq.n	427e <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4284:	2104      	movs	r1, #4
    4286:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    4288:	420a      	tst	r2, r1
    428a:	d0fc      	beq.n	4286 <trx_reg_read+0x96>
    428c:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    428e:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4290:	0751      	lsls	r1, r2, #29
    4292:	d510      	bpl.n	42b6 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4294:	8b5a      	ldrh	r2, [r3, #26]
    4296:	0751      	lsls	r1, r2, #29
    4298:	d503      	bpl.n	42a2 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    429a:	8b59      	ldrh	r1, [r3, #26]
    429c:	2204      	movs	r2, #4
    429e:	430a      	orrs	r2, r1
    42a0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42a2:	4a0d      	ldr	r2, [pc, #52]	; (42d8 <trx_reg_read+0xe8>)
    42a4:	7992      	ldrb	r2, [r2, #6]
    42a6:	2a01      	cmp	r2, #1
    42a8:	d103      	bne.n	42b2 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    42aa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    42ac:	05ed      	lsls	r5, r5, #23
    42ae:	0ded      	lsrs	r5, r5, #23
    42b0:	e001      	b.n	42b6 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42b2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    42b4:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    42b6:	4808      	ldr	r0, [pc, #32]	; (42d8 <trx_reg_read+0xe8>)
    42b8:	4908      	ldr	r1, [pc, #32]	; (42dc <trx_reg_read+0xec>)
    42ba:	2200      	movs	r2, #0
    42bc:	4b08      	ldr	r3, [pc, #32]	; (42e0 <trx_reg_read+0xf0>)
    42be:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    42c0:	2c00      	cmp	r4, #0
    42c2:	d005      	beq.n	42d0 <trx_reg_read+0xe0>
		cpu_irq_enable();
    42c4:	2201      	movs	r2, #1
    42c6:	4b03      	ldr	r3, [pc, #12]	; (42d4 <trx_reg_read+0xe4>)
    42c8:	701a      	strb	r2, [r3, #0]
    42ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    42ce:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    42d0:	b2e8      	uxtb	r0, r5
}
    42d2:	bd70      	pop	{r4, r5, r6, pc}
    42d4:	20000008 	.word	0x20000008
    42d8:	20000eb8 	.word	0x20000eb8
    42dc:	20000e7c 	.word	0x20000e7c
    42e0:	00000c9d 	.word	0x00000c9d
    42e4:	20000e74 	.word	0x20000e74

000042e8 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    42e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ea:	1c07      	adds	r7, r0, #0
    42ec:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42ee:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    42f2:	4263      	negs	r3, r4
    42f4:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    42f6:	b672      	cpsid	i
    42f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    42fc:	2200      	movs	r2, #0
    42fe:	4b34      	ldr	r3, [pc, #208]	; (43d0 <trx_reg_write+0xe8>)
    4300:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4302:	4e34      	ldr	r6, [pc, #208]	; (43d4 <trx_reg_write+0xec>)
    4304:	1c30      	adds	r0, r6, #0
    4306:	4934      	ldr	r1, [pc, #208]	; (43d8 <trx_reg_write+0xf0>)
    4308:	2201      	movs	r2, #1
    430a:	4b34      	ldr	r3, [pc, #208]	; (43dc <trx_reg_write+0xf4>)
    430c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    430e:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4310:	2101      	movs	r1, #1
    4312:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4314:	420a      	tst	r2, r1
    4316:	d0fc      	beq.n	4312 <trx_reg_write+0x2a>
    4318:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    431a:	07d1      	lsls	r1, r2, #31
    431c:	d502      	bpl.n	4324 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    431e:	22c0      	movs	r2, #192	; 0xc0
    4320:	4317      	orrs	r7, r2
    4322:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4324:	2102      	movs	r1, #2
    4326:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4328:	420a      	tst	r2, r1
    432a:	d0fc      	beq.n	4326 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    432c:	2104      	movs	r1, #4
    432e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4330:	420a      	tst	r2, r1
    4332:	d0fc      	beq.n	432e <trx_reg_write+0x46>
    4334:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4336:	0751      	lsls	r1, r2, #29
    4338:	d514      	bpl.n	4364 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    433a:	8b5a      	ldrh	r2, [r3, #26]
    433c:	0751      	lsls	r1, r2, #29
    433e:	d503      	bpl.n	4348 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4340:	8b59      	ldrh	r1, [r3, #26]
    4342:	2204      	movs	r2, #4
    4344:	430a      	orrs	r2, r1
    4346:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4348:	4a22      	ldr	r2, [pc, #136]	; (43d4 <trx_reg_write+0xec>)
    434a:	7992      	ldrb	r2, [r2, #6]
    434c:	2a01      	cmp	r2, #1
    434e:	d105      	bne.n	435c <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4350:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4352:	05c9      	lsls	r1, r1, #23
    4354:	0dc9      	lsrs	r1, r1, #23
    4356:	4a22      	ldr	r2, [pc, #136]	; (43e0 <trx_reg_write+0xf8>)
    4358:	8011      	strh	r1, [r2, #0]
    435a:	e003      	b.n	4364 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    435c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    435e:	b2c9      	uxtb	r1, r1
    4360:	4a1f      	ldr	r2, [pc, #124]	; (43e0 <trx_reg_write+0xf8>)
    4362:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4364:	2001      	movs	r0, #1
    4366:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    4368:	4202      	tst	r2, r0
    436a:	d0fc      	beq.n	4366 <trx_reg_write+0x7e>
    436c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    436e:	07d1      	lsls	r1, r2, #31
    4370:	d500      	bpl.n	4374 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4372:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4374:	2102      	movs	r1, #2
    4376:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    4378:	420a      	tst	r2, r1
    437a:	d0fc      	beq.n	4376 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    437c:	2104      	movs	r1, #4
    437e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4380:	420a      	tst	r2, r1
    4382:	d0fc      	beq.n	437e <trx_reg_write+0x96>
    4384:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4386:	0751      	lsls	r1, r2, #29
    4388:	d514      	bpl.n	43b4 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    438a:	8b5a      	ldrh	r2, [r3, #26]
    438c:	0751      	lsls	r1, r2, #29
    438e:	d503      	bpl.n	4398 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4390:	8b59      	ldrh	r1, [r3, #26]
    4392:	2204      	movs	r2, #4
    4394:	430a      	orrs	r2, r1
    4396:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4398:	4a0e      	ldr	r2, [pc, #56]	; (43d4 <trx_reg_write+0xec>)
    439a:	7992      	ldrb	r2, [r2, #6]
    439c:	2a01      	cmp	r2, #1
    439e:	d105      	bne.n	43ac <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    43a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43a2:	05d2      	lsls	r2, r2, #23
    43a4:	0dd2      	lsrs	r2, r2, #23
    43a6:	4b0e      	ldr	r3, [pc, #56]	; (43e0 <trx_reg_write+0xf8>)
    43a8:	801a      	strh	r2, [r3, #0]
    43aa:	e003      	b.n	43b4 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43ae:	b2d2      	uxtb	r2, r2
    43b0:	4b0b      	ldr	r3, [pc, #44]	; (43e0 <trx_reg_write+0xf8>)
    43b2:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    43b4:	4807      	ldr	r0, [pc, #28]	; (43d4 <trx_reg_write+0xec>)
    43b6:	4908      	ldr	r1, [pc, #32]	; (43d8 <trx_reg_write+0xf0>)
    43b8:	2200      	movs	r2, #0
    43ba:	4b08      	ldr	r3, [pc, #32]	; (43dc <trx_reg_write+0xf4>)
    43bc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    43be:	2c00      	cmp	r4, #0
    43c0:	d005      	beq.n	43ce <trx_reg_write+0xe6>
		cpu_irq_enable();
    43c2:	2201      	movs	r2, #1
    43c4:	4b02      	ldr	r3, [pc, #8]	; (43d0 <trx_reg_write+0xe8>)
    43c6:	701a      	strb	r2, [r3, #0]
    43c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    43cc:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    43ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43d0:	20000008 	.word	0x20000008
    43d4:	20000eb8 	.word	0x20000eb8
    43d8:	20000e7c 	.word	0x20000e7c
    43dc:	00000c9d 	.word	0x00000c9d
    43e0:	20000e74 	.word	0x20000e74

000043e4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    43e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43e6:	465f      	mov	r7, fp
    43e8:	4656      	mov	r6, sl
    43ea:	464d      	mov	r5, r9
    43ec:	4644      	mov	r4, r8
    43ee:	b4f0      	push	{r4, r5, r6, r7}
    43f0:	b083      	sub	sp, #12
    43f2:	1c06      	adds	r6, r0, #0
    43f4:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43f6:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    43fa:	4278      	negs	r0, r7
    43fc:	4178      	adcs	r0, r7
    43fe:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4400:	b672      	cpsid	i
    4402:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4406:	2200      	movs	r2, #0
    4408:	4b41      	ldr	r3, [pc, #260]	; (4510 <trx_frame_read+0x12c>)
    440a:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    440c:	4d41      	ldr	r5, [pc, #260]	; (4514 <trx_frame_read+0x130>)
    440e:	1c28      	adds	r0, r5, #0
    4410:	4941      	ldr	r1, [pc, #260]	; (4518 <trx_frame_read+0x134>)
    4412:	2201      	movs	r2, #1
    4414:	4b41      	ldr	r3, [pc, #260]	; (451c <trx_frame_read+0x138>)
    4416:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4418:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    441a:	2101      	movs	r1, #1
    441c:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    441e:	420a      	tst	r2, r1
    4420:	d0fc      	beq.n	441c <trx_frame_read+0x38>
    4422:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4424:	07d1      	lsls	r1, r2, #31
    4426:	d501      	bpl.n	442c <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4428:	2220      	movs	r2, #32
    442a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    442c:	2102      	movs	r1, #2
    442e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4430:	420a      	tst	r2, r1
    4432:	d0fc      	beq.n	442e <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4434:	2004      	movs	r0, #4
    4436:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4438:	4202      	tst	r2, r0
    443a:	d0fc      	beq.n	4436 <trx_frame_read+0x52>
    443c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    443e:	0750      	lsls	r0, r2, #29
    4440:	d50f      	bpl.n	4462 <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4442:	8b5a      	ldrh	r2, [r3, #26]
    4444:	0751      	lsls	r1, r2, #29
    4446:	d503      	bpl.n	4450 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4448:	8b59      	ldrh	r1, [r3, #26]
    444a:	2204      	movs	r2, #4
    444c:	430a      	orrs	r2, r1
    444e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4450:	4a30      	ldr	r2, [pc, #192]	; (4514 <trx_frame_read+0x130>)
    4452:	7992      	ldrb	r2, [r2, #6]
    4454:	2a01      	cmp	r2, #1
    4456:	d109      	bne.n	446c <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    445a:	05d2      	lsls	r2, r2, #23
    445c:	0dd2      	lsrs	r2, r2, #23
    445e:	4b30      	ldr	r3, [pc, #192]	; (4520 <trx_frame_read+0x13c>)
    4460:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4462:	1e63      	subs	r3, r4, #1
    4464:	b2db      	uxtb	r3, r3
    4466:	2c00      	cmp	r4, #0
    4468:	d105      	bne.n	4476 <trx_frame_read+0x92>
    446a:	e03c      	b.n	44e6 <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    446c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    446e:	b2d2      	uxtb	r2, r2
    4470:	4b2b      	ldr	r3, [pc, #172]	; (4520 <trx_frame_read+0x13c>)
    4472:	801a      	strh	r2, [r3, #0]
    4474:	e7f5      	b.n	4462 <trx_frame_read+0x7e>
    4476:	3301      	adds	r3, #1
    4478:	199b      	adds	r3, r3, r6
    447a:	4699      	mov	r9, r3
    447c:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    447e:	4a25      	ldr	r2, [pc, #148]	; (4514 <trx_frame_read+0x130>)
    4480:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4482:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4484:	2300      	movs	r3, #0
    4486:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4488:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    448a:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    448c:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    448e:	2204      	movs	r2, #4
    4490:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4492:	4642      	mov	r2, r8
    4494:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4496:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4498:	4222      	tst	r2, r4
    449a:	d0fc      	beq.n	4496 <trx_frame_read+0xb2>
    449c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    449e:	4222      	tst	r2, r4
    44a0:	d001      	beq.n	44a6 <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44a2:	4652      	mov	r2, sl
    44a4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    44a6:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    44a8:	422a      	tst	r2, r5
    44aa:	d0fc      	beq.n	44a6 <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44ac:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    44ae:	420a      	tst	r2, r1
    44b0:	d0fc      	beq.n	44ac <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44b2:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    44b4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    44b6:	420a      	tst	r2, r1
    44b8:	d011      	beq.n	44de <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44ba:	8b5a      	ldrh	r2, [r3, #26]
    44bc:	420a      	tst	r2, r1
    44be:	d004      	beq.n	44ca <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    44c0:	8b5a      	ldrh	r2, [r3, #26]
    44c2:	4658      	mov	r0, fp
    44c4:	4302      	orrs	r2, r0
    44c6:	b292      	uxth	r2, r2
    44c8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    44ca:	4812      	ldr	r0, [pc, #72]	; (4514 <trx_frame_read+0x130>)
    44cc:	7982      	ldrb	r2, [r0, #6]
    44ce:	2a01      	cmp	r2, #1
    44d0:	d103      	bne.n	44da <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    44d4:	05c0      	lsls	r0, r0, #23
    44d6:	0dc0      	lsrs	r0, r0, #23
    44d8:	e001      	b.n	44de <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44da:	6a98      	ldr	r0, [r3, #40]	; 0x28
    44dc:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    44de:	7030      	strb	r0, [r6, #0]
		data++;
    44e0:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    44e2:	454e      	cmp	r6, r9
    44e4:	d1d5      	bne.n	4492 <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    44e6:	480b      	ldr	r0, [pc, #44]	; (4514 <trx_frame_read+0x130>)
    44e8:	490b      	ldr	r1, [pc, #44]	; (4518 <trx_frame_read+0x134>)
    44ea:	2200      	movs	r2, #0
    44ec:	4b0b      	ldr	r3, [pc, #44]	; (451c <trx_frame_read+0x138>)
    44ee:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    44f0:	9901      	ldr	r1, [sp, #4]
    44f2:	2900      	cmp	r1, #0
    44f4:	d005      	beq.n	4502 <trx_frame_read+0x11e>
		cpu_irq_enable();
    44f6:	2201      	movs	r2, #1
    44f8:	4b05      	ldr	r3, [pc, #20]	; (4510 <trx_frame_read+0x12c>)
    44fa:	701a      	strb	r2, [r3, #0]
    44fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4500:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4502:	b003      	add	sp, #12
    4504:	bc3c      	pop	{r2, r3, r4, r5}
    4506:	4690      	mov	r8, r2
    4508:	4699      	mov	r9, r3
    450a:	46a2      	mov	sl, r4
    450c:	46ab      	mov	fp, r5
    450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4510:	20000008 	.word	0x20000008
    4514:	20000eb8 	.word	0x20000eb8
    4518:	20000e7c 	.word	0x20000e7c
    451c:	00000c9d 	.word	0x00000c9d
    4520:	20000e74 	.word	0x20000e74

00004524 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    4524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4526:	464f      	mov	r7, r9
    4528:	4646      	mov	r6, r8
    452a:	b4c0      	push	{r6, r7}
    452c:	1c04      	adds	r4, r0, #0
    452e:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4530:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4534:	4271      	negs	r1, r6
    4536:	4171      	adcs	r1, r6
    4538:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    453a:	b672      	cpsid	i
    453c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4540:	2200      	movs	r2, #0
    4542:	4b3c      	ldr	r3, [pc, #240]	; (4634 <trx_frame_write+0x110>)
    4544:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4546:	4f3c      	ldr	r7, [pc, #240]	; (4638 <trx_frame_write+0x114>)
    4548:	1c38      	adds	r0, r7, #0
    454a:	493c      	ldr	r1, [pc, #240]	; (463c <trx_frame_write+0x118>)
    454c:	2201      	movs	r2, #1
    454e:	4b3c      	ldr	r3, [pc, #240]	; (4640 <trx_frame_write+0x11c>)
    4550:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4552:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4554:	2101      	movs	r1, #1
    4556:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4558:	420a      	tst	r2, r1
    455a:	d0fc      	beq.n	4556 <trx_frame_write+0x32>
    455c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    455e:	07d1      	lsls	r1, r2, #31
    4560:	d501      	bpl.n	4566 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4562:	2260      	movs	r2, #96	; 0x60
    4564:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4566:	2102      	movs	r1, #2
    4568:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    456a:	420a      	tst	r2, r1
    456c:	d0fc      	beq.n	4568 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    456e:	2104      	movs	r1, #4
    4570:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4572:	420a      	tst	r2, r1
    4574:	d0fc      	beq.n	4570 <trx_frame_write+0x4c>
    4576:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4578:	0751      	lsls	r1, r2, #29
    457a:	d50f      	bpl.n	459c <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    457c:	8b5a      	ldrh	r2, [r3, #26]
    457e:	0751      	lsls	r1, r2, #29
    4580:	d503      	bpl.n	458a <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4582:	8b59      	ldrh	r1, [r3, #26]
    4584:	2204      	movs	r2, #4
    4586:	430a      	orrs	r2, r1
    4588:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    458a:	4a2b      	ldr	r2, [pc, #172]	; (4638 <trx_frame_write+0x114>)
    458c:	7992      	ldrb	r2, [r2, #6]
    458e:	2a01      	cmp	r2, #1
    4590:	d10e      	bne.n	45b0 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4592:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4594:	05c9      	lsls	r1, r1, #23
    4596:	0dc9      	lsrs	r1, r1, #23
    4598:	4a2a      	ldr	r2, [pc, #168]	; (4644 <trx_frame_write+0x120>)
    459a:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    459c:	4a26      	ldr	r2, [pc, #152]	; (4638 <trx_frame_write+0x114>)
    459e:	7992      	ldrb	r2, [r2, #6]
    45a0:	4690      	mov	r8, r2
    45a2:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45a4:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45a6:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45a8:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    45aa:	2204      	movs	r2, #4
    45ac:	4694      	mov	ip, r2
    45ae:	e02b      	b.n	4608 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    45b2:	b2c9      	uxtb	r1, r1
    45b4:	4a23      	ldr	r2, [pc, #140]	; (4644 <trx_frame_write+0x120>)
    45b6:	8011      	strh	r1, [r2, #0]
    45b8:	e7f0      	b.n	459c <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45ba:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    45bc:	423a      	tst	r2, r7
    45be:	d0fc      	beq.n	45ba <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    45c0:	7831      	ldrb	r1, [r6, #0]
    45c2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    45c4:	423a      	tst	r2, r7
    45c6:	d000      	beq.n	45ca <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    45c8:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45ca:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    45cc:	4202      	tst	r2, r0
    45ce:	d0fc      	beq.n	45ca <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45d0:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    45d2:	4222      	tst	r2, r4
    45d4:	d0fc      	beq.n	45d0 <trx_frame_write+0xac>
    45d6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    45d8:	4222      	tst	r2, r4
    45da:	d014      	beq.n	4606 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45dc:	8b5a      	ldrh	r2, [r3, #26]
    45de:	4222      	tst	r2, r4
    45e0:	d004      	beq.n	45ec <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    45e2:	8b5a      	ldrh	r2, [r3, #26]
    45e4:	4661      	mov	r1, ip
    45e6:	430a      	orrs	r2, r1
    45e8:	b292      	uxth	r2, r2
    45ea:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45ec:	4642      	mov	r2, r8
    45ee:	2a01      	cmp	r2, #1
    45f0:	d105      	bne.n	45fe <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    45f4:	05d2      	lsls	r2, r2, #23
    45f6:	0dd2      	lsrs	r2, r2, #23
    45f8:	4912      	ldr	r1, [pc, #72]	; (4644 <trx_frame_write+0x120>)
    45fa:	800a      	strh	r2, [r1, #0]
    45fc:	e003      	b.n	4606 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4600:	b2d2      	uxtb	r2, r2
    4602:	4910      	ldr	r1, [pc, #64]	; (4644 <trx_frame_write+0x120>)
    4604:	800a      	strh	r2, [r1, #0]
    4606:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    4608:	3d01      	subs	r5, #1
    460a:	b2ed      	uxtb	r5, r5
    460c:	2dff      	cmp	r5, #255	; 0xff
    460e:	d1d4      	bne.n	45ba <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4610:	4809      	ldr	r0, [pc, #36]	; (4638 <trx_frame_write+0x114>)
    4612:	490a      	ldr	r1, [pc, #40]	; (463c <trx_frame_write+0x118>)
    4614:	2200      	movs	r2, #0
    4616:	4b0a      	ldr	r3, [pc, #40]	; (4640 <trx_frame_write+0x11c>)
    4618:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    461a:	464a      	mov	r2, r9
    461c:	2a00      	cmp	r2, #0
    461e:	d005      	beq.n	462c <trx_frame_write+0x108>
		cpu_irq_enable();
    4620:	2201      	movs	r2, #1
    4622:	4b04      	ldr	r3, [pc, #16]	; (4634 <trx_frame_write+0x110>)
    4624:	701a      	strb	r2, [r3, #0]
    4626:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    462a:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    462c:	bc0c      	pop	{r2, r3}
    462e:	4690      	mov	r8, r2
    4630:	4699      	mov	r9, r3
    4632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4634:	20000008 	.word	0x20000008
    4638:	20000eb8 	.word	0x20000eb8
    463c:	20000e7c 	.word	0x20000e7c
    4640:	00000c9d 	.word	0x00000c9d
    4644:	20000e74 	.word	0x20000e74

00004648 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464a:	464f      	mov	r7, r9
    464c:	4646      	mov	r6, r8
    464e:	b4c0      	push	{r6, r7}
    4650:	1c07      	adds	r7, r0, #0
    4652:	1c0c      	adds	r4, r1, #0
    4654:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4656:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    465a:	4271      	negs	r1, r6
    465c:	4171      	adcs	r1, r6
    465e:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4660:	b672      	cpsid	i
    4662:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4666:	2200      	movs	r2, #0
    4668:	4b50      	ldr	r3, [pc, #320]	; (47ac <trx_sram_write+0x164>)
    466a:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    466c:	4e50      	ldr	r6, [pc, #320]	; (47b0 <trx_sram_write+0x168>)
    466e:	1c30      	adds	r0, r6, #0
    4670:	4950      	ldr	r1, [pc, #320]	; (47b4 <trx_sram_write+0x16c>)
    4672:	2201      	movs	r2, #1
    4674:	4b50      	ldr	r3, [pc, #320]	; (47b8 <trx_sram_write+0x170>)
    4676:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4678:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    467a:	2101      	movs	r1, #1
    467c:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    467e:	420a      	tst	r2, r1
    4680:	d0fc      	beq.n	467c <trx_sram_write+0x34>
    4682:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4684:	07d1      	lsls	r1, r2, #31
    4686:	d501      	bpl.n	468c <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4688:	2240      	movs	r2, #64	; 0x40
    468a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    468c:	2102      	movs	r1, #2
    468e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4690:	420a      	tst	r2, r1
    4692:	d0fc      	beq.n	468e <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4694:	2104      	movs	r1, #4
    4696:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4698:	420a      	tst	r2, r1
    469a:	d0fc      	beq.n	4696 <trx_sram_write+0x4e>
    469c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    469e:	0751      	lsls	r1, r2, #29
    46a0:	d514      	bpl.n	46cc <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46a2:	8b5a      	ldrh	r2, [r3, #26]
    46a4:	0751      	lsls	r1, r2, #29
    46a6:	d503      	bpl.n	46b0 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    46a8:	8b59      	ldrh	r1, [r3, #26]
    46aa:	2204      	movs	r2, #4
    46ac:	430a      	orrs	r2, r1
    46ae:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46b0:	4a3f      	ldr	r2, [pc, #252]	; (47b0 <trx_sram_write+0x168>)
    46b2:	7992      	ldrb	r2, [r2, #6]
    46b4:	2a01      	cmp	r2, #1
    46b6:	d105      	bne.n	46c4 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    46ba:	05c9      	lsls	r1, r1, #23
    46bc:	0dc9      	lsrs	r1, r1, #23
    46be:	4a3f      	ldr	r2, [pc, #252]	; (47bc <trx_sram_write+0x174>)
    46c0:	8011      	strh	r1, [r2, #0]
    46c2:	e003      	b.n	46cc <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    46c6:	b2c9      	uxtb	r1, r1
    46c8:	4a3c      	ldr	r2, [pc, #240]	; (47bc <trx_sram_write+0x174>)
    46ca:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46cc:	2101      	movs	r1, #1
    46ce:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    46d0:	420a      	tst	r2, r1
    46d2:	d0fc      	beq.n	46ce <trx_sram_write+0x86>
    46d4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46d6:	07d1      	lsls	r1, r2, #31
    46d8:	d500      	bpl.n	46dc <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46da:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46dc:	2102      	movs	r1, #2
    46de:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    46e0:	420a      	tst	r2, r1
    46e2:	d0fc      	beq.n	46de <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46e4:	2104      	movs	r1, #4
    46e6:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    46e8:	420a      	tst	r2, r1
    46ea:	d0fc      	beq.n	46e6 <trx_sram_write+0x9e>
    46ec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46ee:	0751      	lsls	r1, r2, #29
    46f0:	d50f      	bpl.n	4712 <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46f2:	8b5a      	ldrh	r2, [r3, #26]
    46f4:	0751      	lsls	r1, r2, #29
    46f6:	d503      	bpl.n	4700 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    46f8:	8b59      	ldrh	r1, [r3, #26]
    46fa:	2204      	movs	r2, #4
    46fc:	430a      	orrs	r2, r1
    46fe:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4700:	4a2b      	ldr	r2, [pc, #172]	; (47b0 <trx_sram_write+0x168>)
    4702:	7992      	ldrb	r2, [r2, #6]
    4704:	2a01      	cmp	r2, #1
    4706:	d10e      	bne.n	4726 <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4708:	6a99      	ldr	r1, [r3, #40]	; 0x28
    470a:	05c9      	lsls	r1, r1, #23
    470c:	0dc9      	lsrs	r1, r1, #23
    470e:	4a2b      	ldr	r2, [pc, #172]	; (47bc <trx_sram_write+0x174>)
    4710:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4712:	4a27      	ldr	r2, [pc, #156]	; (47b0 <trx_sram_write+0x168>)
    4714:	7992      	ldrb	r2, [r2, #6]
    4716:	4690      	mov	r8, r2
    4718:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    471a:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    471c:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    471e:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4720:	2204      	movs	r2, #4
    4722:	4694      	mov	ip, r2
    4724:	e02b      	b.n	477e <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4726:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4728:	b2c9      	uxtb	r1, r1
    472a:	4a24      	ldr	r2, [pc, #144]	; (47bc <trx_sram_write+0x174>)
    472c:	8011      	strh	r1, [r2, #0]
    472e:	e7f0      	b.n	4712 <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4730:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4732:	4238      	tst	r0, r7
    4734:	d0fc      	beq.n	4730 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    4736:	7832      	ldrb	r2, [r6, #0]
    4738:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    473a:	4238      	tst	r0, r7
    473c:	d000      	beq.n	4740 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    473e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4740:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4742:	4208      	tst	r0, r1
    4744:	d0fc      	beq.n	4740 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4746:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4748:	4220      	tst	r0, r4
    474a:	d0fc      	beq.n	4746 <trx_sram_write+0xfe>
    474c:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    474e:	4220      	tst	r0, r4
    4750:	d014      	beq.n	477c <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4752:	8b58      	ldrh	r0, [r3, #26]
    4754:	4220      	tst	r0, r4
    4756:	d004      	beq.n	4762 <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4758:	8b58      	ldrh	r0, [r3, #26]
    475a:	4662      	mov	r2, ip
    475c:	4310      	orrs	r0, r2
    475e:	b280      	uxth	r0, r0
    4760:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4762:	4642      	mov	r2, r8
    4764:	2a01      	cmp	r2, #1
    4766:	d105      	bne.n	4774 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4768:	6a98      	ldr	r0, [r3, #40]	; 0x28
    476a:	05c0      	lsls	r0, r0, #23
    476c:	0dc0      	lsrs	r0, r0, #23
    476e:	4a13      	ldr	r2, [pc, #76]	; (47bc <trx_sram_write+0x174>)
    4770:	8010      	strh	r0, [r2, #0]
    4772:	e003      	b.n	477c <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4774:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4776:	b2c0      	uxtb	r0, r0
    4778:	4a10      	ldr	r2, [pc, #64]	; (47bc <trx_sram_write+0x174>)
    477a:	8010      	strh	r0, [r2, #0]
    477c:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    477e:	3d01      	subs	r5, #1
    4780:	b2ed      	uxtb	r5, r5
    4782:	2dff      	cmp	r5, #255	; 0xff
    4784:	d1d4      	bne.n	4730 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4786:	480a      	ldr	r0, [pc, #40]	; (47b0 <trx_sram_write+0x168>)
    4788:	490a      	ldr	r1, [pc, #40]	; (47b4 <trx_sram_write+0x16c>)
    478a:	2200      	movs	r2, #0
    478c:	4b0a      	ldr	r3, [pc, #40]	; (47b8 <trx_sram_write+0x170>)
    478e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4790:	464b      	mov	r3, r9
    4792:	2b00      	cmp	r3, #0
    4794:	d005      	beq.n	47a2 <trx_sram_write+0x15a>
		cpu_irq_enable();
    4796:	2201      	movs	r2, #1
    4798:	4b04      	ldr	r3, [pc, #16]	; (47ac <trx_sram_write+0x164>)
    479a:	701a      	strb	r2, [r3, #0]
    479c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    47a0:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    47a2:	bc0c      	pop	{r2, r3}
    47a4:	4690      	mov	r8, r2
    47a6:	4699      	mov	r9, r3
    47a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	20000008 	.word	0x20000008
    47b0:	20000eb8 	.word	0x20000eb8
    47b4:	20000e7c 	.word	0x20000e7c
    47b8:	00000c9d 	.word	0x00000c9d
    47bc:	20000e74 	.word	0x20000e74

000047c0 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    47c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47c2:	465f      	mov	r7, fp
    47c4:	4656      	mov	r6, sl
    47c6:	464d      	mov	r5, r9
    47c8:	4644      	mov	r4, r8
    47ca:	b4f0      	push	{r4, r5, r6, r7}
    47cc:	b083      	sub	sp, #12
    47ce:	1c05      	adds	r5, r0, #0
    47d0:	1c0e      	adds	r6, r1, #0
    47d2:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    47d4:	2001      	movs	r0, #1
    47d6:	4b5b      	ldr	r3, [pc, #364]	; (4944 <trx_sram_read+0x184>)
    47d8:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    47da:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    47de:	4279      	negs	r1, r7
    47e0:	4179      	adcs	r1, r7
    47e2:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    47e4:	b672      	cpsid	i
    47e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    47ea:	2200      	movs	r2, #0
    47ec:	4b56      	ldr	r3, [pc, #344]	; (4948 <trx_sram_read+0x188>)
    47ee:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    47f0:	4f56      	ldr	r7, [pc, #344]	; (494c <trx_sram_read+0x18c>)
    47f2:	1c38      	adds	r0, r7, #0
    47f4:	4956      	ldr	r1, [pc, #344]	; (4950 <trx_sram_read+0x190>)
    47f6:	2201      	movs	r2, #1
    47f8:	4b56      	ldr	r3, [pc, #344]	; (4954 <trx_sram_read+0x194>)
    47fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    47fc:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    47fe:	2101      	movs	r1, #1
    4800:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4802:	420a      	tst	r2, r1
    4804:	d0fc      	beq.n	4800 <trx_sram_read+0x40>
    4806:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4808:	07d1      	lsls	r1, r2, #31
    480a:	d501      	bpl.n	4810 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    480c:	2200      	movs	r2, #0
    480e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4810:	2102      	movs	r1, #2
    4812:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4814:	420a      	tst	r2, r1
    4816:	d0fc      	beq.n	4812 <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4818:	2204      	movs	r2, #4
    481a:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    481c:	4211      	tst	r1, r2
    481e:	d0fc      	beq.n	481a <trx_sram_read+0x5a>
    4820:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4822:	0751      	lsls	r1, r2, #29
    4824:	d514      	bpl.n	4850 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4826:	8b5a      	ldrh	r2, [r3, #26]
    4828:	0751      	lsls	r1, r2, #29
    482a:	d503      	bpl.n	4834 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    482c:	8b59      	ldrh	r1, [r3, #26]
    482e:	2204      	movs	r2, #4
    4830:	430a      	orrs	r2, r1
    4832:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4834:	4a45      	ldr	r2, [pc, #276]	; (494c <trx_sram_read+0x18c>)
    4836:	7992      	ldrb	r2, [r2, #6]
    4838:	2a01      	cmp	r2, #1
    483a:	d105      	bne.n	4848 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    483c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    483e:	05c9      	lsls	r1, r1, #23
    4840:	0dc9      	lsrs	r1, r1, #23
    4842:	4a45      	ldr	r2, [pc, #276]	; (4958 <trx_sram_read+0x198>)
    4844:	8011      	strh	r1, [r2, #0]
    4846:	e003      	b.n	4850 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4848:	6a99      	ldr	r1, [r3, #40]	; 0x28
    484a:	b2c9      	uxtb	r1, r1
    484c:	4a42      	ldr	r2, [pc, #264]	; (4958 <trx_sram_read+0x198>)
    484e:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4850:	2201      	movs	r2, #1
    4852:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4854:	4211      	tst	r1, r2
    4856:	d0fc      	beq.n	4852 <trx_sram_read+0x92>
    4858:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    485a:	07d1      	lsls	r1, r2, #31
    485c:	d500      	bpl.n	4860 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    485e:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4860:	2202      	movs	r2, #2
    4862:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4864:	4211      	tst	r1, r2
    4866:	d0fc      	beq.n	4862 <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4868:	2204      	movs	r2, #4
    486a:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    486c:	4211      	tst	r1, r2
    486e:	d0fc      	beq.n	486a <trx_sram_read+0xaa>
    4870:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4872:	0751      	lsls	r1, r2, #29
    4874:	d50f      	bpl.n	4896 <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4876:	8b5a      	ldrh	r2, [r3, #26]
    4878:	0751      	lsls	r1, r2, #29
    487a:	d503      	bpl.n	4884 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    487c:	8b59      	ldrh	r1, [r3, #26]
    487e:	2204      	movs	r2, #4
    4880:	430a      	orrs	r2, r1
    4882:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4884:	4a31      	ldr	r2, [pc, #196]	; (494c <trx_sram_read+0x18c>)
    4886:	7992      	ldrb	r2, [r2, #6]
    4888:	2a01      	cmp	r2, #1
    488a:	d109      	bne.n	48a0 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    488c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    488e:	05d2      	lsls	r2, r2, #23
    4890:	0dd2      	lsrs	r2, r2, #23
    4892:	4b31      	ldr	r3, [pc, #196]	; (4958 <trx_sram_read+0x198>)
    4894:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4896:	1e63      	subs	r3, r4, #1
    4898:	b2db      	uxtb	r3, r3
    489a:	2c00      	cmp	r4, #0
    489c:	d105      	bne.n	48aa <trx_sram_read+0xea>
    489e:	e03b      	b.n	4918 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    48a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    48a2:	b2d2      	uxtb	r2, r2
    48a4:	4b2c      	ldr	r3, [pc, #176]	; (4958 <trx_sram_read+0x198>)
    48a6:	801a      	strh	r2, [r3, #0]
    48a8:	e7f5      	b.n	4896 <trx_sram_read+0xd6>
    48aa:	3301      	adds	r3, #1
    48ac:	199b      	adds	r3, r3, r6
    48ae:	4699      	mov	r9, r3
    48b0:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    48b2:	4a26      	ldr	r2, [pc, #152]	; (494c <trx_sram_read+0x18c>)
    48b4:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48b6:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48b8:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    48ba:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48bc:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    48be:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    48c0:	2204      	movs	r2, #4
    48c2:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    48c4:	4642      	mov	r2, r8
    48c6:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48c8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    48ca:	4222      	tst	r2, r4
    48cc:	d0fc      	beq.n	48c8 <trx_sram_read+0x108>
    48ce:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    48d0:	4222      	tst	r2, r4
    48d2:	d001      	beq.n	48d8 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48d4:	4652      	mov	r2, sl
    48d6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    48d8:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    48da:	422a      	tst	r2, r5
    48dc:	d0fc      	beq.n	48d8 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48de:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    48e0:	4202      	tst	r2, r0
    48e2:	d0fc      	beq.n	48de <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    48e4:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    48e8:	4202      	tst	r2, r0
    48ea:	d011      	beq.n	4910 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    48ec:	8b5a      	ldrh	r2, [r3, #26]
    48ee:	4202      	tst	r2, r0
    48f0:	d004      	beq.n	48fc <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    48f2:	8b5a      	ldrh	r2, [r3, #26]
    48f4:	4659      	mov	r1, fp
    48f6:	430a      	orrs	r2, r1
    48f8:	b292      	uxth	r2, r2
    48fa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48fc:	4913      	ldr	r1, [pc, #76]	; (494c <trx_sram_read+0x18c>)
    48fe:	798a      	ldrb	r2, [r1, #6]
    4900:	2a01      	cmp	r2, #1
    4902:	d103      	bne.n	490c <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4904:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4906:	05c9      	lsls	r1, r1, #23
    4908:	0dc9      	lsrs	r1, r1, #23
    490a:	e001      	b.n	4910 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    490c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    490e:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    4910:	7031      	strb	r1, [r6, #0]
		data++;
    4912:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4914:	454e      	cmp	r6, r9
    4916:	d1d5      	bne.n	48c4 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4918:	480c      	ldr	r0, [pc, #48]	; (494c <trx_sram_read+0x18c>)
    491a:	490d      	ldr	r1, [pc, #52]	; (4950 <trx_sram_read+0x190>)
    491c:	2200      	movs	r2, #0
    491e:	4b0d      	ldr	r3, [pc, #52]	; (4954 <trx_sram_read+0x194>)
    4920:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4922:	9a01      	ldr	r2, [sp, #4]
    4924:	2a00      	cmp	r2, #0
    4926:	d005      	beq.n	4934 <trx_sram_read+0x174>
		cpu_irq_enable();
    4928:	2201      	movs	r2, #1
    492a:	4b07      	ldr	r3, [pc, #28]	; (4948 <trx_sram_read+0x188>)
    492c:	701a      	strb	r2, [r3, #0]
    492e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4932:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4934:	b003      	add	sp, #12
    4936:	bc3c      	pop	{r2, r3, r4, r5}
    4938:	4690      	mov	r8, r2
    493a:	4699      	mov	r9, r3
    493c:	46a2      	mov	sl, r4
    493e:	46ab      	mov	fp, r5
    4940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	0000014d 	.word	0x0000014d
    4948:	20000008 	.word	0x20000008
    494c:	20000eb8 	.word	0x20000eb8
    4950:	20000e7c 	.word	0x20000e7c
    4954:	00000c9d 	.word	0x00000c9d
    4958:	20000e74 	.word	0x20000e74

0000495c <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    495c:	b5f0      	push	{r4, r5, r6, r7, lr}
    495e:	465f      	mov	r7, fp
    4960:	4656      	mov	r6, sl
    4962:	464d      	mov	r5, r9
    4964:	4644      	mov	r4, r8
    4966:	b4f0      	push	{r4, r5, r6, r7}
    4968:	b083      	sub	sp, #12
    496a:	1c05      	adds	r5, r0, #0
    496c:	4688      	mov	r8, r1
    496e:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    4970:	2001      	movs	r0, #1
    4972:	4b83      	ldr	r3, [pc, #524]	; (4b80 <trx_aes_wrrd+0x224>)
    4974:	4798      	blx	r3

	ENTER_TRX_REGION();
    4976:	2000      	movs	r0, #0
    4978:	2100      	movs	r1, #0
    497a:	4b82      	ldr	r3, [pc, #520]	; (4b84 <trx_aes_wrrd+0x228>)
    497c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    497e:	4e82      	ldr	r6, [pc, #520]	; (4b88 <trx_aes_wrrd+0x22c>)
    4980:	1c30      	adds	r0, r6, #0
    4982:	4982      	ldr	r1, [pc, #520]	; (4b8c <trx_aes_wrrd+0x230>)
    4984:	2201      	movs	r2, #1
    4986:	4b82      	ldr	r3, [pc, #520]	; (4b90 <trx_aes_wrrd+0x234>)
    4988:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    498a:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    498c:	2101      	movs	r1, #1
    498e:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4990:	420a      	tst	r2, r1
    4992:	d0fc      	beq.n	498e <trx_aes_wrrd+0x32>
    4994:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4996:	07d0      	lsls	r0, r2, #31
    4998:	d501      	bpl.n	499e <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    499a:	2240      	movs	r2, #64	; 0x40
    499c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    499e:	2102      	movs	r1, #2
    49a0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    49a2:	420a      	tst	r2, r1
    49a4:	d0fc      	beq.n	49a0 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    49a6:	2104      	movs	r1, #4
    49a8:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    49aa:	420a      	tst	r2, r1
    49ac:	d0fc      	beq.n	49a8 <trx_aes_wrrd+0x4c>
    49ae:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    49b0:	0751      	lsls	r1, r2, #29
    49b2:	d514      	bpl.n	49de <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49b4:	8b5a      	ldrh	r2, [r3, #26]
    49b6:	0756      	lsls	r6, r2, #29
    49b8:	d503      	bpl.n	49c2 <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    49ba:	8b59      	ldrh	r1, [r3, #26]
    49bc:	2204      	movs	r2, #4
    49be:	430a      	orrs	r2, r1
    49c0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49c2:	4a71      	ldr	r2, [pc, #452]	; (4b88 <trx_aes_wrrd+0x22c>)
    49c4:	7992      	ldrb	r2, [r2, #6]
    49c6:	2a01      	cmp	r2, #1
    49c8:	d105      	bne.n	49d6 <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    49ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    49cc:	05c9      	lsls	r1, r1, #23
    49ce:	0dc9      	lsrs	r1, r1, #23
    49d0:	4a70      	ldr	r2, [pc, #448]	; (4b94 <trx_aes_wrrd+0x238>)
    49d2:	8011      	strh	r1, [r2, #0]
    49d4:	e003      	b.n	49de <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    49d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    49d8:	b2c9      	uxtb	r1, r1
    49da:	4a6e      	ldr	r2, [pc, #440]	; (4b94 <trx_aes_wrrd+0x238>)
    49dc:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    49de:	2101      	movs	r1, #1
    49e0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    49e2:	420a      	tst	r2, r1
    49e4:	d0fc      	beq.n	49e0 <trx_aes_wrrd+0x84>
    49e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    49e8:	07d0      	lsls	r0, r2, #31
    49ea:	d500      	bpl.n	49ee <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    49ec:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    49ee:	2102      	movs	r1, #2
    49f0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    49f2:	420a      	tst	r2, r1
    49f4:	d0fc      	beq.n	49f0 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    49f6:	2204      	movs	r2, #4
    49f8:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    49fa:	4211      	tst	r1, r2
    49fc:	d0fc      	beq.n	49f8 <trx_aes_wrrd+0x9c>
    49fe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4a00:	0751      	lsls	r1, r2, #29
    4a02:	d514      	bpl.n	4a2e <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a04:	8b5a      	ldrh	r2, [r3, #26]
    4a06:	0756      	lsls	r6, r2, #29
    4a08:	d503      	bpl.n	4a12 <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4a0a:	8b59      	ldrh	r1, [r3, #26]
    4a0c:	2204      	movs	r2, #4
    4a0e:	430a      	orrs	r2, r1
    4a10:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a12:	4a5d      	ldr	r2, [pc, #372]	; (4b88 <trx_aes_wrrd+0x22c>)
    4a14:	7992      	ldrb	r2, [r2, #6]
    4a16:	2a01      	cmp	r2, #1
    4a18:	d105      	bne.n	4a26 <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4a1c:	05c9      	lsls	r1, r1, #23
    4a1e:	0dc9      	lsrs	r1, r1, #23
    4a20:	4a5c      	ldr	r2, [pc, #368]	; (4b94 <trx_aes_wrrd+0x238>)
    4a22:	8011      	strh	r1, [r2, #0]
    4a24:	e003      	b.n	4a2e <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4a26:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4a28:	b2c9      	uxtb	r1, r1
    4a2a:	4a5a      	ldr	r2, [pc, #360]	; (4b94 <trx_aes_wrrd+0x238>)
    4a2c:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4a2e:	2201      	movs	r2, #1
    4a30:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    4a32:	4211      	tst	r1, r2
    4a34:	d0fc      	beq.n	4a30 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    4a36:	4640      	mov	r0, r8
    4a38:	7801      	ldrb	r1, [r0, #0]
    4a3a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4a3c:	07d6      	lsls	r6, r2, #31
    4a3e:	d500      	bpl.n	4a42 <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4a40:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a42:	2202      	movs	r2, #2
    4a44:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    4a46:	4211      	tst	r1, r2
    4a48:	d0fc      	beq.n	4a44 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4a4a:	2204      	movs	r2, #4
    4a4c:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4a4e:	4211      	tst	r1, r2
    4a50:	d0fc      	beq.n	4a4c <trx_aes_wrrd+0xf0>
    4a52:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4a54:	0750      	lsls	r0, r2, #29
    4a56:	d50f      	bpl.n	4a78 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a58:	8b5a      	ldrh	r2, [r3, #26]
    4a5a:	0751      	lsls	r1, r2, #29
    4a5c:	d503      	bpl.n	4a66 <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4a5e:	8b59      	ldrh	r1, [r3, #26]
    4a60:	2204      	movs	r2, #4
    4a62:	430a      	orrs	r2, r1
    4a64:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a66:	4a48      	ldr	r2, [pc, #288]	; (4b88 <trx_aes_wrrd+0x22c>)
    4a68:	7992      	ldrb	r2, [r2, #6]
    4a6a:	2a01      	cmp	r2, #1
    4a6c:	d108      	bne.n	4a80 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a70:	05d2      	lsls	r2, r2, #23
    4a72:	0dd2      	lsrs	r2, r2, #23
    4a74:	4b47      	ldr	r3, [pc, #284]	; (4b94 <trx_aes_wrrd+0x238>)
    4a76:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4a78:	2100      	movs	r1, #0
    4a7a:	2c00      	cmp	r4, #0
    4a7c:	d047      	beq.n	4b0e <trx_aes_wrrd+0x1b2>
    4a7e:	e004      	b.n	4a8a <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a82:	b2d2      	uxtb	r2, r2
    4a84:	4b43      	ldr	r3, [pc, #268]	; (4b94 <trx_aes_wrrd+0x238>)
    4a86:	801a      	strh	r2, [r3, #0]
    4a88:	e7f6      	b.n	4a78 <trx_aes_wrrd+0x11c>
    4a8a:	4645      	mov	r5, r8
    4a8c:	3c01      	subs	r4, #1
    4a8e:	b2e4      	uxtb	r4, r4
    4a90:	9401      	str	r4, [sp, #4]
    4a92:	1c23      	adds	r3, r4, #0
    4a94:	4443      	add	r3, r8
    4a96:	3301      	adds	r3, #1
    4a98:	469b      	mov	fp, r3
    4a9a:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4a9c:	4b3a      	ldr	r3, [pc, #232]	; (4b88 <trx_aes_wrrd+0x22c>)
    4a9e:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4aa0:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4aa2:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4aa4:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4aa6:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4aa8:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4aaa:	4656      	mov	r6, sl
    4aac:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4aae:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4ab0:	4206      	tst	r6, r0
    4ab2:	d0fc      	beq.n	4aae <trx_aes_wrrd+0x152>
    4ab4:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    4ab6:	786e      	ldrb	r6, [r5, #1]
    4ab8:	46b3      	mov	fp, r6
    4aba:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4abc:	4206      	tst	r6, r0
    4abe:	d001      	beq.n	4ac4 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4ac0:	465e      	mov	r6, fp
    4ac2:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4ac4:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4ac6:	4226      	tst	r6, r4
    4ac8:	d0fc      	beq.n	4ac4 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4aca:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    4acc:	4216      	tst	r6, r2
    4ace:	d0fc      	beq.n	4aca <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4ad0:	464e      	mov	r6, r9
    4ad2:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4ad4:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4ad6:	4216      	tst	r6, r2
    4ad8:	d011      	beq.n	4afe <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4ada:	8b59      	ldrh	r1, [r3, #26]
    4adc:	4211      	tst	r1, r2
    4ade:	d004      	beq.n	4aea <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4ae0:	8b59      	ldrh	r1, [r3, #26]
    4ae2:	2604      	movs	r6, #4
    4ae4:	4331      	orrs	r1, r6
    4ae6:	b289      	uxth	r1, r1
    4ae8:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4aea:	4e27      	ldr	r6, [pc, #156]	; (4b88 <trx_aes_wrrd+0x22c>)
    4aec:	79b1      	ldrb	r1, [r6, #6]
    4aee:	2901      	cmp	r1, #1
    4af0:	d103      	bne.n	4afa <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4af2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4af4:	05c9      	lsls	r1, r1, #23
    4af6:	0dc9      	lsrs	r1, r1, #23
    4af8:	e001      	b.n	4afe <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4afa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4afc:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    4afe:	4663      	mov	r3, ip
    4b00:	7019      	strb	r1, [r3, #0]
    4b02:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4b04:	42bd      	cmp	r5, r7
    4b06:	d1d0      	bne.n	4aaa <trx_aes_wrrd+0x14e>
    4b08:	9b01      	ldr	r3, [sp, #4]
    4b0a:	3301      	adds	r3, #1
    4b0c:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4b0e:	4b1e      	ldr	r3, [pc, #120]	; (4b88 <trx_aes_wrrd+0x22c>)
    4b10:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b12:	2001      	movs	r0, #1
    4b14:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    4b16:	4202      	tst	r2, r0
    4b18:	d0fc      	beq.n	4b14 <trx_aes_wrrd+0x1b8>
    4b1a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4b1c:	07d6      	lsls	r6, r2, #31
    4b1e:	d501      	bpl.n	4b24 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b20:	2200      	movs	r2, #0
    4b22:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4b24:	2002      	movs	r0, #2
    4b26:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4b28:	4202      	tst	r2, r0
    4b2a:	d0fc      	beq.n	4b26 <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b2c:	2004      	movs	r0, #4
    4b2e:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    4b30:	4202      	tst	r2, r0
    4b32:	d0fc      	beq.n	4b2e <trx_aes_wrrd+0x1d2>
    4b34:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4b36:	0750      	lsls	r0, r2, #29
    4b38:	d510      	bpl.n	4b5c <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b3a:	8b5a      	ldrh	r2, [r3, #26]
    4b3c:	0751      	lsls	r1, r2, #29
    4b3e:	d503      	bpl.n	4b48 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4b40:	8b59      	ldrh	r1, [r3, #26]
    4b42:	2204      	movs	r2, #4
    4b44:	430a      	orrs	r2, r1
    4b46:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b48:	4a0f      	ldr	r2, [pc, #60]	; (4b88 <trx_aes_wrrd+0x22c>)
    4b4a:	7992      	ldrb	r2, [r2, #6]
    4b4c:	2a01      	cmp	r2, #1
    4b4e:	d103      	bne.n	4b58 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4b50:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4b52:	05c9      	lsls	r1, r1, #23
    4b54:	0dc9      	lsrs	r1, r1, #23
    4b56:	e001      	b.n	4b5c <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b58:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4b5a:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    4b5c:	4642      	mov	r2, r8
    4b5e:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4b60:	4809      	ldr	r0, [pc, #36]	; (4b88 <trx_aes_wrrd+0x22c>)
    4b62:	490a      	ldr	r1, [pc, #40]	; (4b8c <trx_aes_wrrd+0x230>)
    4b64:	2200      	movs	r2, #0
    4b66:	4b0a      	ldr	r3, [pc, #40]	; (4b90 <trx_aes_wrrd+0x234>)
    4b68:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    4b6a:	2000      	movs	r0, #0
    4b6c:	2100      	movs	r1, #0
    4b6e:	4b0a      	ldr	r3, [pc, #40]	; (4b98 <trx_aes_wrrd+0x23c>)
    4b70:	4798      	blx	r3
}
    4b72:	b003      	add	sp, #12
    4b74:	bc3c      	pop	{r2, r3, r4, r5}
    4b76:	4690      	mov	r8, r2
    4b78:	4699      	mov	r9, r3
    4b7a:	46a2      	mov	sl, r4
    4b7c:	46ab      	mov	fp, r5
    4b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b80:	0000014d 	.word	0x0000014d
    4b84:	00000309 	.word	0x00000309
    4b88:	20000eb8 	.word	0x20000eb8
    4b8c:	20000e7c 	.word	0x20000e7c
    4b90:	00000c9d 	.word	0x00000c9d
    4b94:	20000e74 	.word	0x20000e74
    4b98:	000002e9 	.word	0x000002e9

00004b9c <main>:

 #include "wsndemo.h"
 #include "asf.h"

int main(void)
{
    4b9c:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	
	#if SAMD || SAMR21
	system_init();
    4b9e:	4b07      	ldr	r3, [pc, #28]	; (4bbc <main+0x20>)
    4ba0:	4798      	blx	r3
	delay_init();
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <main+0x24>)
    4ba4:	4798      	blx	r3
	#else
	sysclk_init();
	board_init();
	#endif
	
	wsndemo_init();
    4ba6:	4b07      	ldr	r3, [pc, #28]	; (4bc4 <main+0x28>)
    4ba8:	4798      	blx	r3
	cpu_irq_enable();
    4baa:	2201      	movs	r2, #1
    4bac:	4b06      	ldr	r3, [pc, #24]	; (4bc8 <main+0x2c>)
    4bae:	701a      	strb	r2, [r3, #0]
    4bb0:	f3bf 8f5f 	dmb	sy
    4bb4:	b662      	cpsie	i
	
	while(1)
	{
	wsndemo_task();	
    4bb6:	4c05      	ldr	r4, [pc, #20]	; (4bcc <main+0x30>)
    4bb8:	47a0      	blx	r4
    4bba:	e7fd      	b.n	4bb8 <main+0x1c>
    4bbc:	0000159d 	.word	0x0000159d
    4bc0:	00000111 	.word	0x00000111
    4bc4:	00001de9 	.word	0x00001de9
    4bc8:	20000008 	.word	0x20000008
    4bcc:	00001e65 	.word	0x00001e65

00004bd0 <common_tc_delay>:
    4bd0:	b510      	push	{r4, lr}
    4bd2:	1c04      	adds	r4, r0, #0
    4bd4:	4b13      	ldr	r3, [pc, #76]	; (4c24 <common_tc_delay+0x54>)
    4bd6:	4798      	blx	r3
    4bd8:	4b13      	ldr	r3, [pc, #76]	; (4c28 <common_tc_delay+0x58>)
    4bda:	781a      	ldrb	r2, [r3, #0]
    4bdc:	4362      	muls	r2, r4
    4bde:	1881      	adds	r1, r0, r2
    4be0:	4b12      	ldr	r3, [pc, #72]	; (4c2c <common_tc_delay+0x5c>)
    4be2:	6059      	str	r1, [r3, #4]
    4be4:	6859      	ldr	r1, [r3, #4]
    4be6:	0c09      	lsrs	r1, r1, #16
    4be8:	6059      	str	r1, [r3, #4]
    4bea:	685b      	ldr	r3, [r3, #4]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d007      	beq.n	4c00 <common_tc_delay+0x30>
    4bf0:	4b0e      	ldr	r3, [pc, #56]	; (4c2c <common_tc_delay+0x5c>)
    4bf2:	6859      	ldr	r1, [r3, #4]
    4bf4:	3201      	adds	r2, #1
    4bf6:	1880      	adds	r0, r0, r2
    4bf8:	8118      	strh	r0, [r3, #8]
    4bfa:	4b0d      	ldr	r3, [pc, #52]	; (4c30 <common_tc_delay+0x60>)
    4bfc:	4798      	blx	r3
    4bfe:	e004      	b.n	4c0a <common_tc_delay+0x3a>
    4c00:	1882      	adds	r2, r0, r2
    4c02:	4b0a      	ldr	r3, [pc, #40]	; (4c2c <common_tc_delay+0x5c>)
    4c04:	811a      	strh	r2, [r3, #8]
    4c06:	4b0b      	ldr	r3, [pc, #44]	; (4c34 <common_tc_delay+0x64>)
    4c08:	4798      	blx	r3
    4c0a:	4b08      	ldr	r3, [pc, #32]	; (4c2c <common_tc_delay+0x5c>)
    4c0c:	891b      	ldrh	r3, [r3, #8]
    4c0e:	2b63      	cmp	r3, #99	; 0x63
    4c10:	d802      	bhi.n	4c18 <common_tc_delay+0x48>
    4c12:	3364      	adds	r3, #100	; 0x64
    4c14:	4a05      	ldr	r2, [pc, #20]	; (4c2c <common_tc_delay+0x5c>)
    4c16:	8113      	strh	r3, [r2, #8]
    4c18:	4b04      	ldr	r3, [pc, #16]	; (4c2c <common_tc_delay+0x5c>)
    4c1a:	8918      	ldrh	r0, [r3, #8]
    4c1c:	4b06      	ldr	r3, [pc, #24]	; (4c38 <common_tc_delay+0x68>)
    4c1e:	4798      	blx	r3
    4c20:	bd10      	pop	{r4, pc}
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	00003cc9 	.word	0x00003cc9
    4c28:	20000ec4 	.word	0x20000ec4
    4c2c:	20000d3c 	.word	0x20000d3c
    4c30:	00003cdd 	.word	0x00003cdd
    4c34:	00003cf1 	.word	0x00003cf1
    4c38:	00003d2d 	.word	0x00003d2d

00004c3c <common_tc_init>:
    4c3c:	b508      	push	{r3, lr}
    4c3e:	2200      	movs	r2, #0
    4c40:	4b03      	ldr	r3, [pc, #12]	; (4c50 <common_tc_init+0x14>)
    4c42:	701a      	strb	r2, [r3, #0]
    4c44:	4b03      	ldr	r3, [pc, #12]	; (4c54 <common_tc_init+0x18>)
    4c46:	4798      	blx	r3
    4c48:	4b03      	ldr	r3, [pc, #12]	; (4c58 <common_tc_init+0x1c>)
    4c4a:	7018      	strb	r0, [r3, #0]
    4c4c:	bd08      	pop	{r3, pc}
    4c4e:	46c0      	nop			; (mov r8, r8)
    4c50:	20000d3c 	.word	0x20000d3c
    4c54:	00003d45 	.word	0x00003d45
    4c58:	20000ec4 	.word	0x20000ec4

00004c5c <tmr_ovf_callback>:
    4c5c:	b508      	push	{r3, lr}
    4c5e:	4b0e      	ldr	r3, [pc, #56]	; (4c98 <tmr_ovf_callback+0x3c>)
    4c60:	685b      	ldr	r3, [r3, #4]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d007      	beq.n	4c76 <tmr_ovf_callback+0x1a>
    4c66:	4a0c      	ldr	r2, [pc, #48]	; (4c98 <tmr_ovf_callback+0x3c>)
    4c68:	6853      	ldr	r3, [r2, #4]
    4c6a:	3b01      	subs	r3, #1
    4c6c:	6053      	str	r3, [r2, #4]
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d101      	bne.n	4c76 <tmr_ovf_callback+0x1a>
    4c72:	4b0a      	ldr	r3, [pc, #40]	; (4c9c <tmr_ovf_callback+0x40>)
    4c74:	4798      	blx	r3
    4c76:	4a08      	ldr	r2, [pc, #32]	; (4c98 <tmr_ovf_callback+0x3c>)
    4c78:	7813      	ldrb	r3, [r2, #0]
    4c7a:	3301      	adds	r3, #1
    4c7c:	b2db      	uxtb	r3, r3
    4c7e:	7013      	strb	r3, [r2, #0]
    4c80:	4a07      	ldr	r2, [pc, #28]	; (4ca0 <tmr_ovf_callback+0x44>)
    4c82:	7812      	ldrb	r2, [r2, #0]
    4c84:	429a      	cmp	r2, r3
    4c86:	d806      	bhi.n	4c96 <tmr_ovf_callback+0x3a>
    4c88:	4b03      	ldr	r3, [pc, #12]	; (4c98 <tmr_ovf_callback+0x3c>)
    4c8a:	2200      	movs	r2, #0
    4c8c:	701a      	strb	r2, [r3, #0]
    4c8e:	68db      	ldr	r3, [r3, #12]
    4c90:	2b00      	cmp	r3, #0
    4c92:	d000      	beq.n	4c96 <tmr_ovf_callback+0x3a>
    4c94:	4798      	blx	r3
    4c96:	bd08      	pop	{r3, pc}
    4c98:	20000d3c 	.word	0x20000d3c
    4c9c:	00003cf1 	.word	0x00003cf1
    4ca0:	20000ec4 	.word	0x20000ec4

00004ca4 <tmr_cca_callback>:
    4ca4:	b508      	push	{r3, lr}
    4ca6:	4b04      	ldr	r3, [pc, #16]	; (4cb8 <tmr_cca_callback+0x14>)
    4ca8:	4798      	blx	r3
    4caa:	4b04      	ldr	r3, [pc, #16]	; (4cbc <tmr_cca_callback+0x18>)
    4cac:	691b      	ldr	r3, [r3, #16]
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d000      	beq.n	4cb4 <tmr_cca_callback+0x10>
    4cb2:	4798      	blx	r3
    4cb4:	bd08      	pop	{r3, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	00003cdd 	.word	0x00003cdd
    4cbc:	20000d3c 	.word	0x20000d3c

00004cc0 <set_common_tc_expiry_callback>:
    4cc0:	4b01      	ldr	r3, [pc, #4]	; (4cc8 <set_common_tc_expiry_callback+0x8>)
    4cc2:	6118      	str	r0, [r3, #16]
    4cc4:	4770      	bx	lr
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	20000d3c 	.word	0x20000d3c

00004ccc <__aeabi_uidiv>:
    4ccc:	2900      	cmp	r1, #0
    4cce:	d034      	beq.n	4d3a <.udivsi3_skip_div0_test+0x6a>

00004cd0 <.udivsi3_skip_div0_test>:
    4cd0:	2301      	movs	r3, #1
    4cd2:	2200      	movs	r2, #0
    4cd4:	b410      	push	{r4}
    4cd6:	4288      	cmp	r0, r1
    4cd8:	d32c      	bcc.n	4d34 <.udivsi3_skip_div0_test+0x64>
    4cda:	2401      	movs	r4, #1
    4cdc:	0724      	lsls	r4, r4, #28
    4cde:	42a1      	cmp	r1, r4
    4ce0:	d204      	bcs.n	4cec <.udivsi3_skip_div0_test+0x1c>
    4ce2:	4281      	cmp	r1, r0
    4ce4:	d202      	bcs.n	4cec <.udivsi3_skip_div0_test+0x1c>
    4ce6:	0109      	lsls	r1, r1, #4
    4ce8:	011b      	lsls	r3, r3, #4
    4cea:	e7f8      	b.n	4cde <.udivsi3_skip_div0_test+0xe>
    4cec:	00e4      	lsls	r4, r4, #3
    4cee:	42a1      	cmp	r1, r4
    4cf0:	d204      	bcs.n	4cfc <.udivsi3_skip_div0_test+0x2c>
    4cf2:	4281      	cmp	r1, r0
    4cf4:	d202      	bcs.n	4cfc <.udivsi3_skip_div0_test+0x2c>
    4cf6:	0049      	lsls	r1, r1, #1
    4cf8:	005b      	lsls	r3, r3, #1
    4cfa:	e7f8      	b.n	4cee <.udivsi3_skip_div0_test+0x1e>
    4cfc:	4288      	cmp	r0, r1
    4cfe:	d301      	bcc.n	4d04 <.udivsi3_skip_div0_test+0x34>
    4d00:	1a40      	subs	r0, r0, r1
    4d02:	431a      	orrs	r2, r3
    4d04:	084c      	lsrs	r4, r1, #1
    4d06:	42a0      	cmp	r0, r4
    4d08:	d302      	bcc.n	4d10 <.udivsi3_skip_div0_test+0x40>
    4d0a:	1b00      	subs	r0, r0, r4
    4d0c:	085c      	lsrs	r4, r3, #1
    4d0e:	4322      	orrs	r2, r4
    4d10:	088c      	lsrs	r4, r1, #2
    4d12:	42a0      	cmp	r0, r4
    4d14:	d302      	bcc.n	4d1c <.udivsi3_skip_div0_test+0x4c>
    4d16:	1b00      	subs	r0, r0, r4
    4d18:	089c      	lsrs	r4, r3, #2
    4d1a:	4322      	orrs	r2, r4
    4d1c:	08cc      	lsrs	r4, r1, #3
    4d1e:	42a0      	cmp	r0, r4
    4d20:	d302      	bcc.n	4d28 <.udivsi3_skip_div0_test+0x58>
    4d22:	1b00      	subs	r0, r0, r4
    4d24:	08dc      	lsrs	r4, r3, #3
    4d26:	4322      	orrs	r2, r4
    4d28:	2800      	cmp	r0, #0
    4d2a:	d003      	beq.n	4d34 <.udivsi3_skip_div0_test+0x64>
    4d2c:	091b      	lsrs	r3, r3, #4
    4d2e:	d001      	beq.n	4d34 <.udivsi3_skip_div0_test+0x64>
    4d30:	0909      	lsrs	r1, r1, #4
    4d32:	e7e3      	b.n	4cfc <.udivsi3_skip_div0_test+0x2c>
    4d34:	1c10      	adds	r0, r2, #0
    4d36:	bc10      	pop	{r4}
    4d38:	4770      	bx	lr
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d001      	beq.n	4d42 <.udivsi3_skip_div0_test+0x72>
    4d3e:	2000      	movs	r0, #0
    4d40:	43c0      	mvns	r0, r0
    4d42:	b407      	push	{r0, r1, r2}
    4d44:	4802      	ldr	r0, [pc, #8]	; (4d50 <.udivsi3_skip_div0_test+0x80>)
    4d46:	a102      	add	r1, pc, #8	; (adr r1, 4d50 <.udivsi3_skip_div0_test+0x80>)
    4d48:	1840      	adds	r0, r0, r1
    4d4a:	9002      	str	r0, [sp, #8]
    4d4c:	bd03      	pop	{r0, r1, pc}
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	00000019 	.word	0x00000019

00004d54 <__aeabi_uidivmod>:
    4d54:	2900      	cmp	r1, #0
    4d56:	d0f0      	beq.n	4d3a <.udivsi3_skip_div0_test+0x6a>
    4d58:	b503      	push	{r0, r1, lr}
    4d5a:	f7ff ffb9 	bl	4cd0 <.udivsi3_skip_div0_test>
    4d5e:	bc0e      	pop	{r1, r2, r3}
    4d60:	4342      	muls	r2, r0
    4d62:	1a89      	subs	r1, r1, r2
    4d64:	4718      	bx	r3
    4d66:	46c0      	nop			; (mov r8, r8)

00004d68 <__aeabi_idiv0>:
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			; (mov r8, r8)

00004d6c <__aeabi_lmul>:
    4d6c:	469c      	mov	ip, r3
    4d6e:	0403      	lsls	r3, r0, #16
    4d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d72:	0c1b      	lsrs	r3, r3, #16
    4d74:	0417      	lsls	r7, r2, #16
    4d76:	0c3f      	lsrs	r7, r7, #16
    4d78:	0c15      	lsrs	r5, r2, #16
    4d7a:	1c1e      	adds	r6, r3, #0
    4d7c:	1c04      	adds	r4, r0, #0
    4d7e:	0c00      	lsrs	r0, r0, #16
    4d80:	437e      	muls	r6, r7
    4d82:	436b      	muls	r3, r5
    4d84:	4347      	muls	r7, r0
    4d86:	4345      	muls	r5, r0
    4d88:	18fb      	adds	r3, r7, r3
    4d8a:	0c30      	lsrs	r0, r6, #16
    4d8c:	1818      	adds	r0, r3, r0
    4d8e:	4287      	cmp	r7, r0
    4d90:	d902      	bls.n	4d98 <__aeabi_lmul+0x2c>
    4d92:	2380      	movs	r3, #128	; 0x80
    4d94:	025b      	lsls	r3, r3, #9
    4d96:	18ed      	adds	r5, r5, r3
    4d98:	0c03      	lsrs	r3, r0, #16
    4d9a:	18ed      	adds	r5, r5, r3
    4d9c:	4663      	mov	r3, ip
    4d9e:	435c      	muls	r4, r3
    4da0:	434a      	muls	r2, r1
    4da2:	0436      	lsls	r6, r6, #16
    4da4:	0c36      	lsrs	r6, r6, #16
    4da6:	18a1      	adds	r1, r4, r2
    4da8:	0400      	lsls	r0, r0, #16
    4daa:	1980      	adds	r0, r0, r6
    4dac:	1949      	adds	r1, r1, r5
    4dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004db0 <__libc_init_array>:
    4db0:	b570      	push	{r4, r5, r6, lr}
    4db2:	4b0e      	ldr	r3, [pc, #56]	; (4dec <__libc_init_array+0x3c>)
    4db4:	4d0e      	ldr	r5, [pc, #56]	; (4df0 <__libc_init_array+0x40>)
    4db6:	2400      	movs	r4, #0
    4db8:	1aed      	subs	r5, r5, r3
    4dba:	10ad      	asrs	r5, r5, #2
    4dbc:	1c1e      	adds	r6, r3, #0
    4dbe:	42ac      	cmp	r4, r5
    4dc0:	d004      	beq.n	4dcc <__libc_init_array+0x1c>
    4dc2:	00a3      	lsls	r3, r4, #2
    4dc4:	58f3      	ldr	r3, [r6, r3]
    4dc6:	4798      	blx	r3
    4dc8:	3401      	adds	r4, #1
    4dca:	e7f8      	b.n	4dbe <__libc_init_array+0xe>
    4dcc:	f000 f9b0 	bl	5130 <_init>
    4dd0:	4b08      	ldr	r3, [pc, #32]	; (4df4 <__libc_init_array+0x44>)
    4dd2:	4d09      	ldr	r5, [pc, #36]	; (4df8 <__libc_init_array+0x48>)
    4dd4:	2400      	movs	r4, #0
    4dd6:	1aed      	subs	r5, r5, r3
    4dd8:	10ad      	asrs	r5, r5, #2
    4dda:	1c1e      	adds	r6, r3, #0
    4ddc:	42ac      	cmp	r4, r5
    4dde:	d004      	beq.n	4dea <__libc_init_array+0x3a>
    4de0:	00a3      	lsls	r3, r4, #2
    4de2:	58f3      	ldr	r3, [r6, r3]
    4de4:	4798      	blx	r3
    4de6:	3401      	adds	r4, #1
    4de8:	e7f8      	b.n	4ddc <__libc_init_array+0x2c>
    4dea:	bd70      	pop	{r4, r5, r6, pc}
    4dec:	0000513c 	.word	0x0000513c
    4df0:	0000513c 	.word	0x0000513c
    4df4:	0000513c 	.word	0x0000513c
    4df8:	00005140 	.word	0x00005140

00004dfc <memcpy>:
    4dfc:	b510      	push	{r4, lr}
    4dfe:	2300      	movs	r3, #0
    4e00:	4293      	cmp	r3, r2
    4e02:	d003      	beq.n	4e0c <memcpy+0x10>
    4e04:	5ccc      	ldrb	r4, [r1, r3]
    4e06:	54c4      	strb	r4, [r0, r3]
    4e08:	3301      	adds	r3, #1
    4e0a:	e7f9      	b.n	4e00 <memcpy+0x4>
    4e0c:	bd10      	pop	{r4, pc}

00004e0e <memset>:
    4e0e:	1c03      	adds	r3, r0, #0
    4e10:	1882      	adds	r2, r0, r2
    4e12:	4293      	cmp	r3, r2
    4e14:	d002      	beq.n	4e1c <memset+0xe>
    4e16:	7019      	strb	r1, [r3, #0]
    4e18:	3301      	adds	r3, #1
    4e1a:	e7fa      	b.n	4e12 <memset+0x4>
    4e1c:	4770      	bx	lr
	...

00004e20 <srand>:
    4e20:	b538      	push	{r3, r4, r5, lr}
    4e22:	4b10      	ldr	r3, [pc, #64]	; (4e64 <srand+0x44>)
    4e24:	1c05      	adds	r5, r0, #0
    4e26:	681c      	ldr	r4, [r3, #0]
    4e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d115      	bne.n	4e5a <srand+0x3a>
    4e2e:	2018      	movs	r0, #24
    4e30:	f000 f862 	bl	4ef8 <malloc>
    4e34:	4b0c      	ldr	r3, [pc, #48]	; (4e68 <srand+0x48>)
    4e36:	63a0      	str	r0, [r4, #56]	; 0x38
    4e38:	8003      	strh	r3, [r0, #0]
    4e3a:	4b0c      	ldr	r3, [pc, #48]	; (4e6c <srand+0x4c>)
    4e3c:	8043      	strh	r3, [r0, #2]
    4e3e:	4b0c      	ldr	r3, [pc, #48]	; (4e70 <srand+0x50>)
    4e40:	8083      	strh	r3, [r0, #4]
    4e42:	4b0c      	ldr	r3, [pc, #48]	; (4e74 <srand+0x54>)
    4e44:	80c3      	strh	r3, [r0, #6]
    4e46:	4b0c      	ldr	r3, [pc, #48]	; (4e78 <srand+0x58>)
    4e48:	8103      	strh	r3, [r0, #8]
    4e4a:	2305      	movs	r3, #5
    4e4c:	8143      	strh	r3, [r0, #10]
    4e4e:	230b      	movs	r3, #11
    4e50:	8183      	strh	r3, [r0, #12]
    4e52:	2201      	movs	r2, #1
    4e54:	2300      	movs	r3, #0
    4e56:	6102      	str	r2, [r0, #16]
    4e58:	6143      	str	r3, [r0, #20]
    4e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e5c:	2200      	movs	r2, #0
    4e5e:	611d      	str	r5, [r3, #16]
    4e60:	615a      	str	r2, [r3, #20]
    4e62:	bd38      	pop	{r3, r4, r5, pc}
    4e64:	20000074 	.word	0x20000074
    4e68:	0000330e 	.word	0x0000330e
    4e6c:	ffffabcd 	.word	0xffffabcd
    4e70:	00001234 	.word	0x00001234
    4e74:	ffffe66d 	.word	0xffffe66d
    4e78:	ffffdeec 	.word	0xffffdeec
    4e7c:	00000000 	.word	0x00000000

00004e80 <rand>:
    4e80:	4b17      	ldr	r3, [pc, #92]	; (4ee0 <rand+0x60>)
    4e82:	b510      	push	{r4, lr}
    4e84:	681c      	ldr	r4, [r3, #0]
    4e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d115      	bne.n	4eb8 <rand+0x38>
    4e8c:	2018      	movs	r0, #24
    4e8e:	f000 f833 	bl	4ef8 <malloc>
    4e92:	4b14      	ldr	r3, [pc, #80]	; (4ee4 <rand+0x64>)
    4e94:	63a0      	str	r0, [r4, #56]	; 0x38
    4e96:	8003      	strh	r3, [r0, #0]
    4e98:	4b13      	ldr	r3, [pc, #76]	; (4ee8 <rand+0x68>)
    4e9a:	8043      	strh	r3, [r0, #2]
    4e9c:	4b13      	ldr	r3, [pc, #76]	; (4eec <rand+0x6c>)
    4e9e:	8083      	strh	r3, [r0, #4]
    4ea0:	4b13      	ldr	r3, [pc, #76]	; (4ef0 <rand+0x70>)
    4ea2:	80c3      	strh	r3, [r0, #6]
    4ea4:	4b13      	ldr	r3, [pc, #76]	; (4ef4 <rand+0x74>)
    4ea6:	8103      	strh	r3, [r0, #8]
    4ea8:	2305      	movs	r3, #5
    4eaa:	8143      	strh	r3, [r0, #10]
    4eac:	230b      	movs	r3, #11
    4eae:	8183      	strh	r3, [r0, #12]
    4eb0:	2201      	movs	r2, #1
    4eb2:	2300      	movs	r3, #0
    4eb4:	6102      	str	r2, [r0, #16]
    4eb6:	6143      	str	r3, [r0, #20]
    4eb8:	4b08      	ldr	r3, [pc, #32]	; (4edc <rand+0x5c>)
    4eba:	4a07      	ldr	r2, [pc, #28]	; (4ed8 <rand+0x58>)
    4ebc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4ebe:	6920      	ldr	r0, [r4, #16]
    4ec0:	6961      	ldr	r1, [r4, #20]
    4ec2:	f7ff ff53 	bl	4d6c <__aeabi_lmul>
    4ec6:	2201      	movs	r2, #1
    4ec8:	2300      	movs	r3, #0
    4eca:	1880      	adds	r0, r0, r2
    4ecc:	4159      	adcs	r1, r3
    4ece:	6120      	str	r0, [r4, #16]
    4ed0:	6161      	str	r1, [r4, #20]
    4ed2:	0048      	lsls	r0, r1, #1
    4ed4:	0840      	lsrs	r0, r0, #1
    4ed6:	bd10      	pop	{r4, pc}
    4ed8:	4c957f2d 	.word	0x4c957f2d
    4edc:	5851f42d 	.word	0x5851f42d
    4ee0:	20000074 	.word	0x20000074
    4ee4:	0000330e 	.word	0x0000330e
    4ee8:	ffffabcd 	.word	0xffffabcd
    4eec:	00001234 	.word	0x00001234
    4ef0:	ffffe66d 	.word	0xffffe66d
    4ef4:	ffffdeec 	.word	0xffffdeec

00004ef8 <malloc>:
    4ef8:	b508      	push	{r3, lr}
    4efa:	4b03      	ldr	r3, [pc, #12]	; (4f08 <malloc+0x10>)
    4efc:	1c01      	adds	r1, r0, #0
    4efe:	6818      	ldr	r0, [r3, #0]
    4f00:	f000 f804 	bl	4f0c <_malloc_r>
    4f04:	bd08      	pop	{r3, pc}
    4f06:	46c0      	nop			; (mov r8, r8)
    4f08:	20000074 	.word	0x20000074

00004f0c <_malloc_r>:
    4f0c:	b570      	push	{r4, r5, r6, lr}
    4f0e:	2303      	movs	r3, #3
    4f10:	1ccd      	adds	r5, r1, #3
    4f12:	439d      	bics	r5, r3
    4f14:	3508      	adds	r5, #8
    4f16:	1c06      	adds	r6, r0, #0
    4f18:	2d0c      	cmp	r5, #12
    4f1a:	d201      	bcs.n	4f20 <_malloc_r+0x14>
    4f1c:	250c      	movs	r5, #12
    4f1e:	e001      	b.n	4f24 <_malloc_r+0x18>
    4f20:	2d00      	cmp	r5, #0
    4f22:	db3f      	blt.n	4fa4 <_malloc_r+0x98>
    4f24:	428d      	cmp	r5, r1
    4f26:	d33d      	bcc.n	4fa4 <_malloc_r+0x98>
    4f28:	4b20      	ldr	r3, [pc, #128]	; (4fac <_malloc_r+0xa0>)
    4f2a:	681c      	ldr	r4, [r3, #0]
    4f2c:	1c1a      	adds	r2, r3, #0
    4f2e:	1c21      	adds	r1, r4, #0
    4f30:	2900      	cmp	r1, #0
    4f32:	d013      	beq.n	4f5c <_malloc_r+0x50>
    4f34:	6808      	ldr	r0, [r1, #0]
    4f36:	1b43      	subs	r3, r0, r5
    4f38:	d40d      	bmi.n	4f56 <_malloc_r+0x4a>
    4f3a:	2b0b      	cmp	r3, #11
    4f3c:	d902      	bls.n	4f44 <_malloc_r+0x38>
    4f3e:	600b      	str	r3, [r1, #0]
    4f40:	18cc      	adds	r4, r1, r3
    4f42:	e01e      	b.n	4f82 <_malloc_r+0x76>
    4f44:	428c      	cmp	r4, r1
    4f46:	d102      	bne.n	4f4e <_malloc_r+0x42>
    4f48:	6863      	ldr	r3, [r4, #4]
    4f4a:	6013      	str	r3, [r2, #0]
    4f4c:	e01a      	b.n	4f84 <_malloc_r+0x78>
    4f4e:	6848      	ldr	r0, [r1, #4]
    4f50:	6060      	str	r0, [r4, #4]
    4f52:	1c0c      	adds	r4, r1, #0
    4f54:	e016      	b.n	4f84 <_malloc_r+0x78>
    4f56:	1c0c      	adds	r4, r1, #0
    4f58:	6849      	ldr	r1, [r1, #4]
    4f5a:	e7e9      	b.n	4f30 <_malloc_r+0x24>
    4f5c:	4c14      	ldr	r4, [pc, #80]	; (4fb0 <_malloc_r+0xa4>)
    4f5e:	6820      	ldr	r0, [r4, #0]
    4f60:	2800      	cmp	r0, #0
    4f62:	d103      	bne.n	4f6c <_malloc_r+0x60>
    4f64:	1c30      	adds	r0, r6, #0
    4f66:	f000 f825 	bl	4fb4 <_sbrk_r>
    4f6a:	6020      	str	r0, [r4, #0]
    4f6c:	1c30      	adds	r0, r6, #0
    4f6e:	1c29      	adds	r1, r5, #0
    4f70:	f000 f820 	bl	4fb4 <_sbrk_r>
    4f74:	1c43      	adds	r3, r0, #1
    4f76:	d015      	beq.n	4fa4 <_malloc_r+0x98>
    4f78:	1cc4      	adds	r4, r0, #3
    4f7a:	2303      	movs	r3, #3
    4f7c:	439c      	bics	r4, r3
    4f7e:	4284      	cmp	r4, r0
    4f80:	d10a      	bne.n	4f98 <_malloc_r+0x8c>
    4f82:	6025      	str	r5, [r4, #0]
    4f84:	1c20      	adds	r0, r4, #0
    4f86:	300b      	adds	r0, #11
    4f88:	2207      	movs	r2, #7
    4f8a:	1d23      	adds	r3, r4, #4
    4f8c:	4390      	bics	r0, r2
    4f8e:	1ac3      	subs	r3, r0, r3
    4f90:	d00b      	beq.n	4faa <_malloc_r+0x9e>
    4f92:	425a      	negs	r2, r3
    4f94:	50e2      	str	r2, [r4, r3]
    4f96:	e008      	b.n	4faa <_malloc_r+0x9e>
    4f98:	1a21      	subs	r1, r4, r0
    4f9a:	1c30      	adds	r0, r6, #0
    4f9c:	f000 f80a 	bl	4fb4 <_sbrk_r>
    4fa0:	3001      	adds	r0, #1
    4fa2:	d1ee      	bne.n	4f82 <_malloc_r+0x76>
    4fa4:	230c      	movs	r3, #12
    4fa6:	6033      	str	r3, [r6, #0]
    4fa8:	2000      	movs	r0, #0
    4faa:	bd70      	pop	{r4, r5, r6, pc}
    4fac:	20000d54 	.word	0x20000d54
    4fb0:	20000d50 	.word	0x20000d50

00004fb4 <_sbrk_r>:
    4fb4:	b538      	push	{r3, r4, r5, lr}
    4fb6:	4c07      	ldr	r4, [pc, #28]	; (4fd4 <_sbrk_r+0x20>)
    4fb8:	2300      	movs	r3, #0
    4fba:	1c05      	adds	r5, r0, #0
    4fbc:	1c08      	adds	r0, r1, #0
    4fbe:	6023      	str	r3, [r4, #0]
    4fc0:	f7fc fd40 	bl	1a44 <_sbrk>
    4fc4:	1c43      	adds	r3, r0, #1
    4fc6:	d103      	bne.n	4fd0 <_sbrk_r+0x1c>
    4fc8:	6823      	ldr	r3, [r4, #0]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d000      	beq.n	4fd0 <_sbrk_r+0x1c>
    4fce:	602b      	str	r3, [r5, #0]
    4fd0:	bd38      	pop	{r3, r4, r5, pc}
    4fd2:	46c0      	nop			; (mov r8, r8)
    4fd4:	20000ec8 	.word	0x20000ec8
    4fd8:	42000800 	.word	0x42000800
    4fdc:	42000c00 	.word	0x42000c00
    4fe0:	42001000 	.word	0x42001000
    4fe4:	42001400 	.word	0x42001400
    4fe8:	42001800 	.word	0x42001800
    4fec:	42001c00 	.word	0x42001c00
    4ff0:	00000d9c 	.word	0x00000d9c
    4ff4:	00000df8 	.word	0x00000df8
    4ff8:	00000df8 	.word	0x00000df8
    4ffc:	00000d96 	.word	0x00000d96
    5000:	00000d96 	.word	0x00000d96
    5004:	00000db2 	.word	0x00000db2
    5008:	00000da2 	.word	0x00000da2
    500c:	00000db8 	.word	0x00000db8
    5010:	00000de6 	.word	0x00000de6
    5014:	00001020 	.word	0x00001020
    5018:	00001080 	.word	0x00001080
    501c:	00001080 	.word	0x00001080
    5020:	00001000 	.word	0x00001000
    5024:	00001012 	.word	0x00001012
    5028:	0000102e 	.word	0x0000102e
    502c:	00001004 	.word	0x00001004
    5030:	0000103c 	.word	0x0000103c
    5034:	00001070 	.word	0x00001070
    5038:	42002c00 	.word	0x42002c00
    503c:	42003000 	.word	0x42003000
    5040:	42003400 	.word	0x42003400
    5044:	001c1c1b 	.word	0x001c1c1b
    5048:	10000800 	.word	0x10000800
    504c:	00002000 	.word	0x00002000
    5050:	00001e7c 	.word	0x00001e7c
    5054:	00001f5a 	.word	0x00001f5a
    5058:	0000200e 	.word	0x0000200e
    505c:	00001fda 	.word	0x00001fda
    5060:	0000200e 	.word	0x0000200e
    5064:	0000200e 	.word	0x0000200e
    5068:	00001fe2 	.word	0x00001fe2
    506c:	00001ff6 	.word	0x00001ff6
    5070:	00002004 	.word	0x00002004
    5074:	20646e45 	.word	0x20646e45
    5078:	69766544 	.word	0x69766544
    507c:	00006563 	.word	0x00006563
    5080:	74736554 	.word	0x74736554
    5084:	75636553 	.word	0x75636553
    5088:	79746972 	.word	0x79746972
    508c:	3079654b 	.word	0x3079654b
    5090:	00000000 	.word	0x00000000
    5094:	00002d98 	.word	0x00002d98
    5098:	00002f10 	.word	0x00002f10
    509c:	00002f1a 	.word	0x00002f1a
    50a0:	000030b6 	.word	0x000030b6
    50a4:	000030be 	.word	0x000030be
    50a8:	0000369a 	.word	0x0000369a
    50ac:	00003758 	.word	0x00003758
    50b0:	000036a4 	.word	0x000036a4
    50b4:	000036c4 	.word	0x000036c4
    50b8:	00003758 	.word	0x00003758
    50bc:	000036e6 	.word	0x000036e6
    50c0:	00003758 	.word	0x00003758
    50c4:	00003728 	.word	0x00003728

000050c8 <tc_interrupt_vectors.11765>:
    50c8:	00141312 00000043                       ....C...

000050d0 <__sf_fake_stdin>:
	...

000050f0 <__sf_fake_stdout>:
	...

00005110 <__sf_fake_stderr>:
	...

00005130 <_init>:
    5130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5132:	46c0      	nop			; (mov r8, r8)
    5134:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5136:	bc08      	pop	{r3}
    5138:	469e      	mov	lr, r3
    513a:	4770      	bx	lr

0000513c <__init_array_start>:
    513c:	000000d9 	.word	0x000000d9

00005140 <_fini>:
    5140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5146:	bc08      	pop	{r3}
    5148:	469e      	mov	lr, r3
    514a:	4770      	bx	lr

0000514c <__fini_array_start>:
    514c:	000000b1 	.word	0x000000b1
